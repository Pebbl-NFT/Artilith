import { useMemo, useEffect, useState } from 'react';
import { useSignal, initData } from '@telegram-apps/sdk-react';
// Update the path below to the correct relative path if the file exists elsewhere, for example:
import HeroEnergyAutoRegeneration from '@/hooks/HeroEnergyAutoRegeneration';
// Or, if the file does not exist, create it at src/components/hooks/HeroEnergyAutoRegeneration.tsx
import { supabase } from "@/lib/supabaseClient";
import { toast } from "react-hot-toast";
import { useCallback } from 'react';

interface TopBarProps {
    points: number;
}

export default function TopBar({ points }: TopBarProps) {
  const initDataState = useSignal(initData.state);
  const userId = initDataState?.user?.id;

  // –°—Ç–∞–Ω –¥–ª—è –±–∞–ª–∞–Ω—Å—ñ–≤
  const [tonBalance, setTonBalance] = useState<number>(0);
  const [atlBalance, setAtlBalance] = useState<number>(0); // <-- –ó–ú–Ü–ù–ê: –î–æ–¥–∞–Ω–æ —Å—Ç–∞–Ω –¥–ª—è ATL

  // <-- –ó–ú–Ü–ù–ê: –°—Ç–≤–æ—Ä–µ–Ω–æ –æ–¥–Ω—É —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±—É–¥—å-—è–∫–æ–≥–æ –±–∞–ª–∞–Ω—Å—É
  const fetchBalance = useCallback(async (balanceColumn: 'ton_balance' | 'atl_balance', setBalanceState: (value: number) => void) => {
    if (!userId) return;

    try {
      const { data, error } = await supabase
        .from("users")
        .select(balanceColumn)
        .eq("id", String(userId))
        .single();

      if (error) {
        console.error(`Error fetching ${balanceColumn}:`, error.message);
        setBalanceState(0);
      } else if (data) {
        // –Ø–≤–Ω–æ —Ç–∏–ø—ñ–∑—É—î–º–æ data, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–º–∏–ª–∫–∏ TypeScript
        const typedData = data as Record<'ton_balance' | 'atl_balance', number | null>;
        const balance = typedData[balanceColumn] || 0;
        setBalanceState(parseFloat(Number(balance).toFixed(4)));
      } else {
        setBalanceState(0);
      }
    } catch (err) {
      console.error(`Unexpected error fetching ${balanceColumn}:`, err);
      toast.error("An unexpected error occurred while loading balances.");
      setBalanceState(0);
    }
  }, [userId]); // useCallback –∑–∞–ª–µ–∂–∏—Ç—å —Ç—ñ–ª—å–∫–∏ –≤—ñ–¥ userId

  useEffect(() => {
    if (userId) {
      // <-- –ó–ú–Ü–ù–ê: –í–∏–∫–ª–∏–∫–∞—î–º–æ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –æ–±–æ—Ö –±–∞–ª–∞–Ω—Å—ñ–≤
      fetchBalance('ton_balance', setTonBalance);
      fetchBalance('atl_balance', setAtlBalance);
    }
  }, [userId, fetchBalance]); // –î–æ–¥–∞—î–º–æ fetchBalance –¥–æ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π

  return (
    <div className='top-bar' style={{
      display: 'flex',
      justifyContent: 'space-between',
      alignItems: 'center',
      width: '100%',
      height: 50,
      backgroundColor: "#121015",
      backdropFilter: "blur(2px)",
      position: 'fixed',
      top: 0,
      zIndex: 10,
      padding: '0 10px',
      boxSizing: 'border-box'
    }}>
      {/* –ë–ª–æ–∫ TON –±–∞–ª–∞–Ω—Å—É */}
      <div style={{ display: "flex", alignItems: "center", gap: "5px", color: "#fff", fontSize: 12 }}>
        <span>üíé</span>
        <span>{tonBalance.toFixed(4)}</span>
      </div>

      {/* –ë–ª–æ–∫ ATL –±–∞–ª–∞–Ω—Å—É */}
      <div style={{ display: "flex", alignItems: "center", gap: "5px", color: "#fff", fontSize: 12 }}>
        <span>ü™ô</span>
        {/* <-- –ó–ú–Ü–ù–ê: –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Ä–µ–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å ATL –∑–∞–º—ñ—Å—Ç—å 0 */}
        <span>{atlBalance.toFixed(4)}</span>
      </div>

      {/* –ë–ª–æ–∫ –æ—á–æ–∫ */}
      <div style={{ display: "flex", alignItems: "center", gap: "5px", color: "#fff", fontSize: 12 }}>
        <span>ü™®</span>
        <span>{points}</span>
      </div>
      
      {/* –ë–ª–æ–∫ –µ–Ω–µ—Ä–≥—ñ—ó */}
      <HeroEnergyAutoRegeneration userId={userId} supabase={supabase} />
    </div>
  );
}

/* Removed erroneous local useCallback definition that was shadowing React's useCallback */
