import { Button } from '@telegram-apps/telegram-ui';
import tonSvg from '../app/_assets/ton.svg';
import { useMemo, useEffect, useState, } from 'react';
import { useSignal, initData } from '@telegram-apps/sdk-react';
import HeroEnergyAutoRegeneration from '@/hooks/HeroEnergyAutoRegeneration';
import { supabase } from "@/lib/supabaseClient";
import { toast } from "react-hot-toast"; // –î–æ–¥–∞—î–º–æ toast –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å

interface TopBarProps {
    points: number;
    energy: number; // –¢–µ–ø–µ—Ä –µ–Ω–µ—Ä–≥—ñ—è –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —è–∫ –ø—Ä–æ–ø—Å
    setEnergy: (energy: number) => void; // –§—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–Ω–µ—Ä–≥—ñ—ó —Ç–∞–∫–æ–∂ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —è–∫ –ø—Ä–æ–ø—Å
}

export default function TopBar({ points, energy, setEnergy }: TopBarProps) {
  const initDataState = useSignal(initData.state);
  const userId = initDataState?.user?.id;

  // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π —Å—Ç–∞–Ω –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É TON
  const [tonBalance, setTonBalance] = useState<number>(0);

  const username = useMemo(() => {
    return initDataState?.user?.firstName || 'User';
  }, [initDataState]);

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É TON
  const fetchTonBalance = async () => {
    if (!userId) {
      console.warn("User ID is not available to fetch TON balance.");
      return;
    }

    try {
      const { data, error } = await supabase
        .from("users")
        .select("ton_balance")
        .eq("id", userId)
        .single();

      if (error) {
        console.error("Error fetching TON balance:", error.message);
        toast.error("Failed to load TON balance.");
        setTonBalance(0); // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ 0 —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
      } else if (data) {
        // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ TON –±–∞–ª–∞–Ω—Å —É —á–∏—Å–ª–æ –∑ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –∑–Ω–∞–∫—ñ–≤ –ø—ñ—Å–ª—è –∫–æ–º–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        // –∞–±–æ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —è–∫ —î, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ —Ç–æ—á–Ω—ñ—Å—Ç—å.
        // –î–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –º–æ–∂–ª–∏–≤–æ, –∫—Ä–∞—â–µ –æ–∫—Ä—É–≥–ª–∏—Ç–∏.
        setTonBalance(parseFloat(data.ton_balance.toFixed(4))); // –û–∫—Ä—É–≥–ª—é—î–º–æ –¥–æ 4 –∑–Ω–∞–∫—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
      } else {
        setTonBalance(0); // –Ø–∫—â–æ –¥–∞–Ω–∏—Ö –Ω–µ–º–∞—î, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ 0
      }
    } catch (err) {
      console.error("Unexpected error fetching TON balance:", err);
      toast.error("An unexpected error occurred while loading TON balance.");
      setTonBalance(0);
    }
  };

  useEffect(() => {
    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –±–∞–ª–∞–Ω—Å TON –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Ç–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ userId
    fetchTonBalance();

    if (initDataState?.user) {
      const user = initDataState.user;
      console.log('User data before saving:', user);
    }
  }, [userId, initDataState?.user]); // –î–æ–¥–∞—î–º–æ userId –¥–æ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π, —â–æ–± –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ –ø—Ä–∏ –π–æ–≥–æ –∑–º—ñ–Ω—ñ

  return (
    <div className='top-bar'
    style={{
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        width: '100%',
        height: 50,
        backgroundColor: "#121015",
        backdropFilter: "blur(2px)",
        transition: "filter 0.3s ease",
        pointerEvents: "auto",
        gap: 0,
        top: 0,
        position: 'fixed',
        zIndex: 10,
        fontSize: 9,
    }}>
      <div
        style={{
          display: "flex",
          flexDirection: "row",
          justifyContent: "center",
          alignItems: "center",
          gap: "30px",
          padding: 10,
          color: "#fff",
          animation: "fadeIn 0.6s ease forwards",
          fontSize: 12,
        }}
      >
        <div style={{ display: "flex", justifyContent: "space-between", width: "100%" }}>
          {/* –ó–º—ñ–Ω–µ–Ω–æ —ñ–∫–æ–Ω–∫—É —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É TON */}
          {/* –ú–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ img –¥–ª—è SVG, —è–∫—â–æ tonSvg - —Ü–µ —à–ª—è—Ö */}
          {/* <img src={tonSvg.src} alt="TON" style={{ width: 16, height: 16, marginRight: 5 }} /> */}
          <span>üíé</span> {/* –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –µ–º–æ–¥–∑—ñ –∞–±–æ —ñ–Ω—à—É —ñ–∫–æ–Ω–∫—É */}
          <span> {tonBalance.toFixed(4)} TON</span> {/* –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –±–∞–ª–∞–Ω—Å TON, –æ–∫—Ä—É–≥–ª—é—é—á–∏ –¥–æ 4 –∑–Ω–∞–∫—ñ–≤ */}
        </div>
      </div>
      <div
        style={{
          display: "flex",
          flexDirection: "row",
          justifyContent: "center",
          alignItems: "center",
          gap: "30px",
          padding: 10,
          color: "#fff",
          animation: "fadeIn 0.6s ease forwards",
          fontSize: 12,
        }}
      >
        {/* –¶–µ –º—ñ—Å—Ü–µ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è, –º–æ–∂–ª–∏–≤–æ, —Ü–µ –±—É–ª–æ —Ä–∞–Ω—ñ—à–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ü—ñ–ª–µ–π */}
        <div style={{ display: "flex", justifyContent: "space-between", width: "100%" }}>
          <span>ü™ô</span>
          <span> 0 </span> {/* –ó–∞–ª–∏—à–∞—î–º–æ 0, —è–∫—â–æ —Ü–µ placeholder */}
        </div>
      </div>
      <div
        style={{
          display: "flex",
          flexDirection: "row",
          justifyContent: "center",
          alignItems: "center",
          gap: "30px",
          padding: 10,
          color: "#fff",
          animation: "fadeIn 0.6s ease forwards",
          fontSize: 12,
        }}
      >
        <div style={{ display: "flex", justifyContent: "space-between", width: "100%" }}>
          <span>ü™®</span>
          <span> {points} </span>
        </div>
      </div>
      <div
        style={{
          display: "flex",
          flexDirection: "row",
          justifyContent: "center",
          alignItems: "center",
          gap: "30px",
          padding: 10,
          color: "#fff",
          animation: "fadeIn 0.6s ease forwards",
          fontSize: 12,
        }}
      >
        <HeroEnergyAutoRegeneration
          userId={userId}
          energy={energy}
          setEnergy={setEnergy}
          supabase={supabase}
        />
      </div>
    </div>
  );
}