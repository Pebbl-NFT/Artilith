"use client";

import { useState, useEffect, useCallback } from 'react';
import { useSignal, initData } from '@telegram-apps/sdk-react';
import { supabase } from '@/lib/supabaseClient';
import { Button, Placeholder } from '@telegram-apps/telegram-ui';
import { toast } from 'react-hot-toast';
import Image from "next/image";
import { useRouter } from 'next/navigation';

// –®–ª—è—Ö–∏ –¥–æ –≤–∞—à–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å
import victim from '@/app/_assets/victim.png';
import travel from '@/app/_assets/travel.png';

// –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É
const formatTime = (seconds: number) => {
    const h = Math.floor(seconds / 3600).toString().padStart(2, '0');
    const m = Math.floor((seconds % 3600) / 60).toString().padStart(2, '0');
    const s = (seconds % 60).toString().padStart(2, '0');
    return `${h}:${m}:${s}`;
};

interface Reward {
    type: 'common' | 'uncommon' | 'rare';
    points: number;
    energy: number;
    item_name: string | null;
    atl: number;
}

export function Fountain() {
    const initDataState = useSignal(initData.state);
    const userId = initDataState?.user?.id;
    const router = useRouter(); // <-- –ù–ê–®–Ü –ó–ú–Ü–ù–ò: –î–æ–¥–∞–Ω–æ —Ö—É–∫ –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó

    const [status, setStatus] = useState<'loading' | 'ready' | 'cooldown'>('loading');
    const [cooldown, setCooldown] = useState(0);
    const [isClaiming, setIsClaiming] = useState(false);

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–Ω—É —Ñ–æ–Ω—Ç–∞–Ω—É
    const checkFountainStatus = useCallback(async () => {
        if (!userId) return;
        setStatus('loading');
        const { data, error } = await supabase
            .from('users')
            .select('last_fountain_claim_at')
            .eq('id', String(userId))
            .single();

        if (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ñ–æ–Ω—Ç–∞–Ω—É:", error);
            setStatus('ready'); // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ 'ready' —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏, —â–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º—ñ–≥ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏
            return;
        }

        const lastClaimTime = data?.last_fountain_claim_at ? new Date(data.last_fountain_claim_at).getTime() : 0;
        const now = Date.now();
        const twentyFourHours = 24 * 60 * 60 * 1000;
        const timeSinceLastClaim = now - lastClaimTime;

        if (timeSinceLastClaim >= twentyFourHours) {
            setStatus('ready');
            setCooldown(0);
        } else {
            setStatus('cooldown');
            setCooldown(Math.round((twentyFourHours - timeSinceLastClaim) / 1000));
        }
    }, [userId]);

    // –ü–µ—Ä–≤–∏–Ω–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    useEffect(() => {
        checkFountainStatus();
    }, [checkFountainStatus]);

    // –¢–∞–π–º–µ—Ä –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤—ñ–¥–ª—ñ–∫—É
    useEffect(() => {
        if (status === 'cooldown' && cooldown > 0) {
            const timer = setInterval(() => {
                setCooldown(prev => {
                    if (prev <= 1) {
                        clearInterval(timer);
                        setStatus('ready');
                        return 0;
                    }
                    return prev - 1;
                });
            }, 1000);
            return () => clearInterval(timer);
        }
    }, [status, cooldown]);

    // –§—É–Ω–∫—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–≥–æ—Ä–æ–¥–∏
    const handleClaim = async () => {
        if (!userId || isClaiming) return;
        setIsClaiming(true);
        toast.loading('–ó–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –¥—É—Ö—ñ–≤...');

        const { data, error } = await supabase.rpc('claim_fountain_reward', { p_user_id: String(userId) });
        toast.dismiss();

        if (error || !data.success) {
            toast.error(data?.message || '–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
            setIsClaiming(false);
            return;
        }

        const reward: Reward = data.reward;
        let rewardMessages = [];
        if (reward.points > 0) rewardMessages.push(`${reward.points} ü™®`);
        if (reward.energy > 0) rewardMessages.push(`${reward.energy} ‚ö°`);
        if (reward.atl > 0) rewardMessages.push(`${reward.atl} ü™ô`);
        if (reward.item_name) rewardMessages.push(`1x "${reward.item_name}"`);

        toast.success(`–í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏: ${rewardMessages.join(', ')}!`, { duration: 4000 });
        
        checkFountainStatus();
        setIsClaiming(false);
    };

    const buttonText = status === 'ready' ? "–û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞—Ä–∏!" : formatTime(cooldown);
    const isButtonDisabled = status !== 'ready' || isClaiming;

    // <-- –ù–ê–®–Ü –ó–ú–Ü–ù–ò: –û–Ω–æ–≤–ª–µ–Ω–æ –≤—Å—é JSX —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    return (
        <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: '16px', width: '100%', padding: '0 16px', boxSizing: 'border-box' }}>
            
            {/* --- –ë–õ–û–ö –î–ñ–ï–†–ï–õ–ê –î–ê–†–Ü–í --- */}
            <Placeholder
                header="–î–∂–µ—Ä–µ–ª–æ –î–∞—Ä—ñ–≤"
                description="–†–∞–∑ –Ω–∞ –¥–µ–Ω—å –¥—É—Ö–∏ –¥–∞—Ä—É—é—Ç—å —Å–º—ñ–ª–∏–≤—Ü—è–º —Ü—ñ–Ω–Ω—ñ —Ä–µ—Å—É—Ä—Å–∏. –í–∏–ø—Ä–æ–±—É–π —Å–≤–æ—é —É–¥–∞—á—É!"
                style={{ width: '100%', marginTop: '20px' }}
            >
                <Image
                    alt="–î–∂–µ—Ä–µ–ª–æ –î–∞—Ä—ñ–≤"
                    src={victim}
                    width={96}
                    height={96}
                    style={{ marginBottom: '16px' }}
                />
                <Button
                    size="l"
                    stretched
                    onClick={handleClaim}
                    disabled={isButtonDisabled}
                    loading={status === 'loading' || isClaiming}
                >
                    {status === 'loading' ? '–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞...' : buttonText}
                </Button>
            </Placeholder>

            {/* --- –ë–õ–û–ö –ü–û–î–û–†–û–ñ–Ü (–ë–Ü–ô) --- */}
            <Placeholder
                 header="–ü–æ–¥–æ—Ä–æ–∂ —É –Ω–µ–≤—ñ–¥–æ–º–µ"
                 description="–í–∏—Ä—É—à–∞–π—Ç–µ –≤ –ø–æ–¥–æ—Ä–æ–∂, —â–æ–± –∑–¥–æ–±—É—Ç–∏ –¥–æ—Å–≤—ñ–¥ —Ç–∞ —Å–ª–∞–≤—É."
                 style={{ width: '100%'}}
            >
                <Image
                    alt="–ü–æ–¥–æ—Ä–æ–∂"
                    src={travel}
                    width={96}
                    height={96}
                    style={{ marginBottom: '16px' }}
                />
                <div style={{ color: '#999', marginBottom: '16px', fontFamily: 'monospace' }}>
                    –ù–∞–≥–æ—Ä–æ–¥–∞: +ü™® +üî∑ | –¶—ñ–Ω–∞: -1‚ö°
                </div>
                <Button
                    size="l"
                    stretched
                    onClick={() => router.push('/home/battle')}
                >
                    ‚öîÔ∏è –í –ø–æ–¥–æ—Ä–æ–∂ ‚öîÔ∏è
                </Button>
            </Placeholder>

        </div>
    );
}