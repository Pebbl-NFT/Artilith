"use client";

import React, { useEffect, useState, useRef } from "react";
import { List, Placeholder } from "@telegram-apps/telegram-ui";
import { Page } from "@/components/Page";
import TopBar from "@/components/TopBar";
import BottomBar from "@/components/BottomBar";
import { useSignal, initData } from "@telegram-apps/sdk-react";
import { supabase } from "@/lib/supabaseClient";
import artilithLogo from "../_assets/Artilith_logo-no-bg.png";
import swordr1m3 from "../_assets/sword-r1-m3.png";
import staffr1m3 from "../_assets/staff-r1-m3.png";
import potionmp from "../_assets/potion-mp.png";
import Image from "next/image";
import PageLoader from "next/dist/client/page-loader";


export default function HomePage() {
  const [points, setPoints] = useState(0);
  const [clickDelay, setClickDelay] = useState(1000);
  const [isClickable, setIsClickable] = useState(true);
  const [countdown, setCountdown] = useState(0);
  const [animationTime, setAnimationTime] = useState(1100);
  const [activeTab, setActiveTab] = useState("home");
  const [locked, setLocked] = useState(true);


  const timerRef = useRef<NodeJS.Timeout | null>(null);
  const initDataState = useSignal(initData.state);
  const userId = initDataState?.user?.id;

  useEffect(() => {
    const fetchUserData = async () => {
      if (!userId) return;
      const { data, error } = await supabase
        .from("users")
        .select("points, click_delay")
        .eq("id", userId)
        .single();

      if (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:", error);
      } else if (data) {
        setPoints(data.points);
        setClickDelay(data.click_delay);
        setAnimationTime(data.click_delay + 100);
      }
    };

    fetchUserData();
  }, [userId]);

  const saveUserData = async (newPoints: number, newClickDelay: number) => {
    if (!userId) return;

    const { error } = await supabase
      .from("users")
      .upsert([{ id: userId, points: newPoints, click_delay: newClickDelay }], {
        onConflict: "id",
      });

    if (error) console.error("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:", error);
  };

  const updateCountdown = (endTime: number) => {
    if (timerRef.current) clearInterval(timerRef.current);

    const now = Date.now();
    const remaining = Math.ceil((endTime - now) / 1000);

    if (remaining <= 0) {
      setCountdown(0);
      setIsClickable(true);
      localStorage.removeItem("nextClickTime");
      return;
    }

    setCountdown(remaining);
    setIsClickable(false);

    timerRef.current = setInterval(() => {
      const now = Date.now();
      const remaining = Math.ceil((endTime - now) / 1000);
      if (remaining <= 0) {
        clearInterval(timerRef.current!);
        setCountdown(0);
        setIsClickable(true);
        localStorage.removeItem("nextClickTime");
      } else {
        setCountdown(remaining);
      }
    }, 1000);
  };

  useEffect(() => {
    const savedNextClick = localStorage.getItem("nextClickTime");
    if (savedNextClick) {
      const endTime = parseInt(savedNextClick, 10);
      updateCountdown(endTime);
    }
  }, []);

  const handleClick = async () => {
    if (!isClickable) return;

    const nextAvailableClick = Date.now() + clickDelay;
    localStorage.setItem("nextClickTime", nextAvailableClick.toString());

    setIsClickable(false);
    updateCountdown(nextAvailableClick);

    const newPoints = points + 1;
    const newClickDelay = clickDelay + 1000;

    setPoints(newPoints);
    setClickDelay(newClickDelay);
    setAnimationTime(newClickDelay + 100);
    saveUserData(newPoints, newClickDelay);

    // –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å –¥–ª—è –ø—É–ª—å—Å–∞—Ü—ñ—ó
    const imgWrap = document.querySelector(".imgWrap");
    if (imgWrap) {
      imgWrap.classList.add("active");
      setTimeout(() => {
        imgWrap.classList.remove("active");
      }, 1000); // –í—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —á–∞—Å—É –∞–Ω—ñ–º–∞—Ü—ñ—ó
    }
  };

  type ItemCardProps = {
    name: string;
    image?: string;
    description: string;
    damage?: string;
    strength?: string;
    price: number;
  };
  
  const ItemCard: React.FC<ItemCardProps> = ({ name, image, description, damage, price, strength }) => (
    <div
      style={{
        borderRadius: "10px",
        padding: "20px",
        textAlign: "center",
        boxShadow: "0 2px 9px rgba(0, 0, 0, 0.3)",
        border: "1px solid rgba(255, 255, 255, 0.1)",
      }}
    >
    <img 
      src={image} 
      alt={name} 
      width={150} 
      height={150}
      style={{
        borderRadius: "10px",
        marginBottom: "15px",
        boxShadow: "0 5px 15px rgba(255, 255, 255, 0.3)",
      }}
    />
    <h3 style={{ color: "#00ffcc", marginBottom: "10px" }}>{name}</h3>
    <p style={{ color: "#ddd", marginBottom: "15px" }}>{description}</p>
    {damage && <p style={{ color: "#ddd", marginBottom: "15px" }}>{damage}</p>}
    {strength && <p style={{ color: "#ddd", marginBottom: "15px" }}>{strength}</p>}
    <button
      style={{
        backgroundColor: "#00bcd4",
        border: "none",
        padding: "12px 24px",
        fontSize: "1rem",
        color: "#fff",
        borderRadius: "6px",
        cursor: "pointer",
        transition: "all 0.3s ease",
        marginTop: "10px",
      }}
      onClick={() => alert(`–í–∏ –ø—Ä–∏–¥–±–∞–ª–∏ ${name}!`)}
    >
      –ö—É–ø–∏—Ç–∏ –∑–∞ : {price} ü™®
    </button>
  </div>
);
  
  
  const formatTime = (totalSeconds: number) => {
    const hours = Math.floor(totalSeconds / 3600);
    const minutes = Math.floor((totalSeconds % 3600) / 60);
    const seconds = totalSeconds % 60;
  
    const pad = (num: number) => num.toString().padStart(2, "0");
  
    return `${pad(hours)}:${pad(minutes)}:${pad(seconds)}`;
  };
  const renderContent = () => {
    switch (activeTab) {
      case 'shop':
        return (
        <Page back>
          <Placeholder>
            <div
              className="page"
              style={{
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                justifyContent: "center",
                marginTop: "-20px",
              }}
            >
              <h1
                style={{
                  fontSize: "2rem",
                  fontWeight: "bold",
                  marginBottom: "20px",
                  marginTop: "5px",
                  textAlign: "center",
                  lineHeight: "1",
                  color: "#fff",
                }}
              >
                –ú–ê–ì–ê–ó–ò–ù –ü–†–ï–î–ú–ï–¢–Ü–í
              </h1>

              <p
                style={{
                  fontSize: "1rem",
                  color: "#ddd",
                  textAlign: "center",
                  marginBottom: "30px",
                  maxWidth: "600px",
                }}
              >
                –¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–¥–±–∞—Ç–∏ –ø–æ—á–∞—Ç–∫–æ–≤–µ —Å–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è –¥–ª—è –ø—Ä–∏–≥–æ–¥: –∑–±—Ä–æ—é, –±—Ä–æ–Ω—é —Ç–∞ –∑—ñ–ª–ª—è.
              </p>

              {/* –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ */}
              <div
                style={{
                  display: "grid",
                  gridTemplateColumns: "repeat(1, 1fr)",
                  gap: "20px",
                  width: "100%",
                  maxWidth: "1200px",
                }}
              >
                {/* –ú–µ—á –¥–µ—Ä–µ–≤'—è–Ω–∏–π */}
                <ItemCard
                  name="–î–µ—Ä–µ–≤—è–Ω–∞ –ø–∞–ª–∏—Ü—è"
                  image={swordr1m3.src}
                  description="–ü–æ—á–∞—Ç–∫–æ–≤–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –¥–ª—è –≤–æ—ó–Ω—ñ–≤."
                  damage="–®–∫–æ–¥–∞: 1"
                  strength="–ú—ñ—Ü–Ω—ñ—Å—Ç—å: 5"
                  price={30}
                />

                {/* –ú–∞–ª–µ–Ω—å–∫–µ –∑—ñ–ª–ª—è */}
                <ItemCard
                  name="–ú–∞–ª–µ–Ω—å–∫–µ –∑—ñ–ª–ª—è"
                  image={potionmp.src}
                  description="–í—ñ–¥–Ω–æ–≤–ª—é—î –µ–Ω–µ—Ä–≥—ñ—é. –û–¥–∏–Ω –∫–æ–≤—Ç–æ–∫ ‚Äî —ñ –≤–∏ –∑–Ω–æ–≤—É –≤ —Å—Ç—Ä–æ—é."
                  price={50}
                /> 
                
                {/* –ü–∞–ª–∏—Ü—è –º–∞–≥–∞ */}
                <ItemCard
                  name="–ú–∞–≥—ñ—á–Ω–∞ –ø–∞–ª–∏—Ü—è"
                  image={staffr1m3.src}
                  description="–ü–æ—á–∞—Ç–∫–æ–≤–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –¥–ª—è –º–∞–≥—ñ–≤."
                  damage="–®–∫–æ–¥–∞: 1-3"
                  strength="–ú—ñ—Ü–Ω—ñ—Å—Ç—å: 4"
                  price={65}
                />
              </div>
            </div>
          </Placeholder>
          <Placeholder>
          <div
              className="page"
              style={{
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                justifyContent: "center",
                marginTop: "-20px",
              }}
            >
              <h1
                style={{
                  fontSize: "2rem",
                  fontWeight: "bold",
                  marginBottom: "20px",
                  marginTop: "5px",
                  textAlign: "center",
                  lineHeight: "1",
                  color: "#fff",
                }}
              >
                –†—ñ–≤–µ–Ω—å 2
              </h1>

              <p
                style={{
                  fontSize: "1rem",
                  color: "#ddd",
                  textAlign: "center",
                  marginBottom: "30px",
                  maxWidth: "600px",
                }}
              >
                –í–∏ —â–µ –Ω–µ –¥–æ—Å–∏—Ç—å —Å–∏–ª—å–Ω—ñ, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ —Ü—å–æ–≥–æ —Ä—ñ–≤–Ω—è. –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –≥—Ä–∞—Ç–∏, —â–æ–± —Ä–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –Ω–æ–≤—ñ –ø—Ä–µ–¥–º–µ—Ç–∏!
              </p>

              {/* –û–∫—Ä–µ–º–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç—É */}
              <div style={{ position: "relative", marginTop: "20px" }}>
                {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
                <div
                  className="blur-target"
                  style={{
                    display: "grid",
                    gap: "20px",
                    width: "100%",
                    maxWidth: "1200px",
                    margin: "0 auto",
                    filter: locked ? "blur(15px)" : "none",
                    transition: "filter 0.3s ease",
                  }}
                >
                  {/* –¢–≤–æ—ó ItemCard-–∏ */}
                  <ItemCard
                    name="–•–∏—Ç—Ä—É–Ω"
                    image={swordr1m3.src}
                    description="–•–∏—Ç—Ä—É–Ω"
                    damage="–®–∫–æ–¥–∞: –•–∏—Ç—Ä—É–Ω"
                    strength="–ú—ñ—Ü–Ω—ñ—Å—Ç—å: –•–∏—Ç—Ä—É–Ω"
                    price={999999}
                  />
                </div>
              </div>
            </div>
          </Placeholder>
        </Page>
        );
      case 'home':
        return (
          <div
            className="HIJtihMA8FHczS02iWF5"
            style={{ overflow: "visible" }}
            onClick={handleClick}
          >
            <Placeholder>
            <div
              className="page"
              style={{
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                justifyContent: "center",
                marginTop: "-20px",
              }}
            >
              <h1
                style={{
                  fontSize: "2rem",
                  fontWeight: "bold",
                  marginBottom: "20px",
                  marginTop: "5px",
                  textAlign: "center",
                  lineHeight: "1",
                  color: "#fff",
                }}
              >
                HOLD
              </h1>

              <div
                className="imgWrap"
                style={{
                  position: "relative",
                  display: "flex",
                  justifyContent: "center",
                  alignItems: "center",
                  overflow: "visible",
                  marginTop: "0px",
                  marginBottom: "0px",
                  width: "90%",
                  height: "90%",
                }}
              >
                <Image
                className="blue"
                alt="Artilith Logo Blue"
                src={artilithLogo}
                width={400}
                height={400}
                style={{
                  position: "absolute",
                  width: "100%",
                  height: "auto",
                  maxWidth: "250px", // –¥–ª—è –º–æ–±—ñ–ª–∫–∏
                }}
                />
              </div>
              <p
              style={{
                fontSize: "0.9rem",
                fontWeight: "lighter",
                color: "#ccc",
                textAlign: "center",
                lineHeight: "1",
                fontFamily: "Arial, sans-serif",
                marginTop: "0px",
              }}
              >
                <span>
                  {countdown > 0 ? `${formatTime(countdown)}` : "–¢–∏—Å–Ω–∏, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —É–ª–∞–º–æ–∫!"}
                </span>
              </p>
              <h2
                style={{
                  fontSize: "1rem",
                  fontWeight: "lighter",
                  color: "#ccc",
                  textAlign: "center",
                  marginTop: "10px",
                  lineHeight: "1.4",
                  fontFamily: "Arial, sans-serif",
                }}
              >
                –ó–±–∏—Ä–∞–π—Ç–µ —É–ª–∞–º–∫–∏, —â–æ–± –ø—Ä–æ–∫–∞—á–∞—Ç–∏ —Å–≤–æ–≥–æ –≥–µ—Ä–æ—è —Ç–∞ –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –π–æ–≥–æ –¥–æ –ø—Ä–∏–≥–æ–¥.
              </h2>
            </div>
          </Placeholder>
          </div>
        );
      case 'hiro':
        return (
          <div>
            <Placeholder>
            <div
              className="page"
              style={{
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                justifyContent: "center",
                marginTop: "-20px",
              }}
            >
              <h1
                style={{
                  fontSize: "2rem",
                  fontWeight: "bold",
                  marginBottom: "20px",
                  marginTop: "5px",
                  textAlign: "center",
                  lineHeight: "1",
                  color: "#fff",
                }}
              >
                –ì–ï–†–û–ô
              </h1>

              <h2
              style={{
                fontSize: "1.1rem",
                fontWeight: "lighter",
                color: "#ccc",
                textAlign: "center",
                marginTop: "10px",
                lineHeight: "1.4",
                fontFamily: "Arial, sans-serif",
              }}
            >
              –¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Å–≤–æ–≥–æ –≥–µ—Ä–æ—è, –ø—Ä–æ–∫–∞—á–∞—Ç–∏ –π–æ–≥–æ —Ç–∞ –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –¥–æ –ø—Ä–∏–≥–æ–¥.
            </h2>
            </div>
          </Placeholder>
          </div>
        );
      default:
        return null;
    }
  };
  

  return (
    <Page back={false}>
      <List>
        <TopBar points={points} />
        <div style={{ paddingBottom: 100 }}>{renderContent()}</div>
        <BottomBar activeTab={activeTab} setActiveTab={setActiveTab} />
      </List>
    </Page>
  );
}
