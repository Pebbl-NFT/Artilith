"use client";

import React, { useEffect, useState, useCallback, useMemo } from "react";
import Image from "next/image";
import { List, Placeholder, Card } from "@telegram-apps/telegram-ui";
import { useSignal, initData } from "@telegram-apps/sdk-react";
import { Toaster, toast } from "react-hot-toast";

// --- –ö–û–ú–ü–û–ù–ï–ù–¢–ò ---
import { Page } from "@/components/Page";
import TopBar from "@/components/TopBar";
import BottomBar from "@/components/BottomBar";
import { ItemCard } from "@/components/ItemCard";
import EquippedItemSlot from "@/components/Item/EquippedItemSlot";
import InventoryItemSlot from "@/components/Item/InventoryItemSlot";
import { Fountain } from '@/components/Fountain/Fountain';

// --- –î–ê–ù–Ü –¢–ê –õ–û–ì–Ü–ö–ê ---
import { supabase } from "@/lib/supabaseClient";
import { MergedInventoryItem, fetchInventory as fetchInventoryHook } from "@/hooks/useInventory";
import { updateUserPoints } from "@/hooks/useUserPoints";
import { getPlayerStats } from "@/utils/getPlayerStats";

// --- –ó–û–ë–†–ê–ñ–ï–ù–ù–Ø ---
import citybg from '../_assets/citybg.jpg';
import blacksmithbg from '../_assets/blacksmithbg.jpg';
import alleyofheroesnbg from '../_assets/alleyofheroesnbg.jpg';

type SelectedItemState = MergedInventoryItem & {
  mode: "inventory" | "equipped";
};

export default function HomePage() {
  const initDataState = useSignal(initData.state);
  const userId = initDataState?.user?.id;

  const [activeTab, setActiveTab] = useState("home");
  const [loading, setLoading] = useState(true);
  const [inventory, setInventory] = useState<MergedInventoryItem[]>([]);
  const [selectedItem, setSelectedItem] = useState<SelectedItemState | null>(null);
  
  const [points, setPoints] = useState(0);
  const [level, setLevel] = useState(1);
  const [experience, setExperience] = useState(0);
  const [players, setPlayers] = useState<{ id: any; first_name: any; level: any }[]>([]);

  const username = useMemo(() => initDataState?.user?.firstName || 'User', [initDataState]);
  const heroStats = useMemo(() => getPlayerStats(inventory, level), [inventory, level]);
  const equippedItems = useMemo(() => inventory.filter(item => item.equipped), [inventory]);
  const unequippedItems = useMemo(() => inventory.filter(item => !item.equipped), [inventory]);
  
  const getRequiredExp = (level: number): number => 100 * Math.pow(2, level - 1);

  const loadData = useCallback(async () => {
    if (!userId) return;
    setLoading(true);
    const [userDataRes, inventoryDataRes, playersDataRes] = await Promise.all([
      supabase.from("users").select("points, level, experience").eq("id", String(userId)).single(),
      fetchInventoryHook(String(userId)),
      supabase.from("users").select("id, first_name, level").order("level", { ascending: false })
    ]);
    
    if (userDataRes.data) {
      setPoints(userDataRes.data.points);
      setLevel(userDataRes.data.level ?? 1);
      setExperience(userDataRes.data.experience ?? 0);
    }
    setInventory(inventoryDataRes);
    if(playersDataRes.data) setPlayers(playersDataRes.data);
    setLoading(false);
  }, [userId]);

  useEffect(() => {
    loadData();
  }, [userId]);
  
  async function handleEquip(item: MergedInventoryItem) {
    if (!userId) return;
    setSelectedItem(null); // –û–¥—Ä–∞–∑—É –∑–∞–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
    
    // –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ–¥–Ω—É-—î–¥–∏–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ —Ä–æ–±–∏—Ç—å –≤—Å—é –º–∞–≥—ñ—é
    const { error } = await supabase.rpc('equip_item', {
        p_user_id: String(userId),
        p_inventory_id: item.id // –ü–µ—Ä–µ–¥–∞—î–º–æ ID –∑–∞–ø–∏—Å—É –≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ
    });

    if (error) {
        toast.error(`–ü–æ–º–∏–ª–∫–∞ –µ–∫—ñ–ø—ñ—Ä—É–≤–∞–Ω–Ω—è: ${error.message}`);
        console.error("Equip error:", error);
    } else {
        toast.success(`–í–∏ —Å–ø–æ—Ä—è–¥–∏–ª–∏ ${item.name}!`);
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await loadData();
}

async function handleUnequip(item: MergedInventoryItem) {
    if (!userId) return;
    setSelectedItem(null);

    // –®—É–∫–∞—î–º–æ, —á–∏ —ñ—Å–Ω—É—î —Å—Ç–∞–∫ –¥–ª—è –æ–±'—î–¥–Ω–∞–Ω–Ω—è (—Ç–æ–π —Å–∞–º–∏–π –ø—Ä–µ–¥–º–µ—Ç, —Ç–æ–≥–æ –∂ —Ä—ñ–≤–Ω—è, –Ω–µ –µ–∫—ñ–ø—ñ—Ä–æ–≤–∞–Ω–∏–π)
    const existingStack = inventory.find(i => 
        !i.equipped && 
        i.item_id === item.item_id &&
        i.upgrade_level === item.upgrade_level
    );

    if (existingStack) {
        // –Ø–∫—â–æ —Å—Ç–∞–∫ —î, –æ–±'—î–¥–Ω—É—î–º–æ
        const updates = [
            // –ó–±—ñ–ª—å—à—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ—Å–Ω—É—é—á–æ–≥–æ —Å—Ç–∞–∫—É
            supabase
                .from('inventory')
                .update({ quantity: existingStack.quantity + item.quantity })
                .eq('id', existingStack.id),
            // –í–∏–¥–∞–ª—è—î–º–æ –µ–∫—ñ–ø—ñ—Ä–æ–≤–∞–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç
            supabase
                .from('inventory')
                .delete()
                .eq('id', item.id)
        ];
        await Promise.all(updates);
    } else {
        // –Ø–∫—â–æ —Å—Ç–∞–∫—É –Ω–µ–º–∞—î, –ø—Ä–æ—Å—Ç–æ –∑–Ω—ñ–º–∞—î–º–æ –ø–æ–∑–Ω–∞—á–∫—É 'equipped'
        await supabase
            .from('inventory')
            .update({ equipped: false })
            .eq('id', item.id);
    }

    toast.success(`–í–∏ –∑–Ω—è–ª–∏ ${item.name}!`);
    await loadData();
}

  async function handleDismantle(item: MergedInventoryItem) {
    if (!userId) return;

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ —É —Å—Ç–∞–∫—É
    if (item.quantity > 1) {
      // –Ø–∫—â–æ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –±—ñ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ, –ø—Ä–æ—Å—Ç–æ –∑–º–µ–Ω—à—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞ 1
      const { error } = await supabase
        .from('inventory')
        .update({ quantity: item.quantity - 1 })
        .eq('id', item.id);
      
      if (error) {
        toast.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ–¥–∞–∂—É –ø—Ä–µ–¥–º–µ—Ç–∞!");
        return;
      }

    } else {
      // –Ø–∫—â–æ –ø—Ä–µ–¥–º–µ—Ç –æ—Å—Ç–∞–Ω–Ω—ñ–π —É —Å—Ç–∞–∫—É, –≤–∏–¥–∞–ª—è—î–º–æ –∑–∞–ø–∏—Å –ø–æ–≤–Ω—ñ—Å—Ç—é
      const { error } = await supabase
        .from('inventory')
        .delete()
        .eq('id', item.id);

      if (error) {
        toast.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ–¥–∞–∂—É –ø—Ä–µ–¥–º–µ—Ç–∞!");
        return;
      }
    }
    const dismantleReward = 15;
    if (dismantleReward > 0) {
        const newPoints = points + dismantleReward;
        await updateUserPoints(String(userId), newPoints);
        setPoints(newPoints);
        toast.success(`${item.name} —Ä–æ–∑—ñ–±—Ä–∞–Ω–æ. –û—Ç—Ä–∏–º–∞–Ω–æ ${dismantleReward} —É–ª–∞–º–∫—ñ–≤!`);
    } else {
        toast.success(`${item.name} —Ä–æ–∑—ñ–±—Ä–∞–Ω–æ.`);
    }
    await loadData();
    setSelectedItem(null);
  }

  const renderContent = () => {
    if (loading) return <Placeholder>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</Placeholder>;

    switch (activeTab) {
      case "home":
        return (
          <div style={{ padding: '0 16px', display: 'flex', flexDirection: 'column', alignItems: 'center', gap: '20px' }}>
             <h1 style={{ fontSize: "2rem", fontWeight: "bold", color: "#fff", marginTop:"80px" }}>–î–Ü–ú</h1>
            <Card className="page">
                <div style={{display: "flex",flexDirection: "row",justifyContent: "center",alignItems: "center",marginBottom: -30,gap: "30px",padding: 10,color: "#fff"}}>
                  <p>{username}</p><p>Lv. {level}</p>
                </div>
                <div style={{display: "flex",flexDirection: "row",justifyContent: "center",alignItems: "center",fontSize: 10,gap: "10px",padding: 10,color: "#fff"}}>
                  <p>üî∑ XP :</p>
                  <strong>{experience} / {getRequiredExp(level)} üî∑</strong>
                </div>
                <div style={{position: "relative",display: "flex",flexDirection: "column",alignItems: "center",justifyContent: "center",marginTop: 10,marginBottom: 30,color: "#fff"}}>
                  <Image src="/hero/heroidle.png" alt="–ü–µ—Ä—Å–æ–Ω–∞–∂" width={270} height={270} style={{ objectFit: "contain" , marginRight:-50, marginLeft: -30 }}/>
                  <div style={{position: "absolute",top: "50%",left: "0%",transform: "translate(-80%, -50%)",display: "grid",gridTemplateColumns: "repeat(1, 1fr)",gap: '10px'}}>
                    <EquippedItemSlot 
                      item={equippedItems.find(i => i.item_type === "weapon")} 
                      fallbackIcon=""
                      onClick={(item) => {
                        if (item) setSelectedItem({ ...item, mode: "equipped" });
                      }} 
                    />
                    <EquippedItemSlot 
                      item={equippedItems.find(i => i.item_type === "shield")} 
                      fallbackIcon=""
                      onClick={(item) => {
                        if (item) setSelectedItem({ ...item, mode: "equipped" });
                      }} 
                    />
                  </div>
                </div>
                <div style={{display: "flex",flexDirection: "row",justifyContent: "space-around",alignItems: "center",gap: "30px",padding: 10,color: "#fff",width: '100%'}}>
                  <span>‚ù§Ô∏è {heroStats.health}</span>
                  <span>üó°Ô∏è {heroStats.attack}</span>
                  <span>üõ°Ô∏è {heroStats.defense}</span>
                </div>
            </Card>

            <h2 style={{ textAlign: 'center', margin: '20px 0', color: '#fff' }}>–Ü–ù–í–ï–ù–¢–ê–†</h2>
            <div style={{ display: "grid", gridTemplateColumns: "repeat(auto-fill, minmax(100px, 1fr))", gap: "20px", width: '100%' }}>
              {unequippedItems.length > 0 ? (
                unequippedItems.map((item) => (
                  <InventoryItemSlot
                    key={item.id}
                    item={item}
                    onClick={() => setSelectedItem({ ...item, mode: "inventory" })}
                  />
                ))
              ) : ( <p style={{ gridColumn: '1 / -1', textAlign: 'center', color: '#ccc' }}>–Ü–Ω–≤–µ–Ω—Ç–∞—Ä –ø–æ—Ä–æ–∂–Ω—ñ–π.</p> )}
            </div>
          </div>
        );

      case "city":
        return (
          <Page back>
            <Placeholder style={{ display: "flex", flexDirection: "column", alignItems: "center", justifyContent: "center", animation: "fadeIn 1s ease forwards", gap: "20px" }}>
              <div onClick={() => setActiveTab("blacksmith")} className="page" style={{ backgroundImage: `url(${blacksmithbg.src})`, backgroundSize: 'cover', backgroundPosition: 'center', color: 'white', display: 'flex', justifyContent: 'center', alignItems: 'center' }}><h1>–ö–û–í–ê–õ–¨</h1></div>
              <div onClick={() => setActiveTab("guild")} className="page" style={{ backgroundImage: `url(${citybg.src})`, backgroundSize: 'cover', backgroundPosition: 'center', color: 'white', display: 'flex', justifyContent: 'center', alignItems: 'center' }}><h1>–ì–Ü–õ–¨–î–Ü–Ø</h1></div>
              <div onClick={() => setActiveTab("alleyofheroes")} className="page" style={{ backgroundImage: `url(${alleyofheroesnbg.src})`, backgroundSize: 'cover', backgroundPosition: 'center', color: 'white', display: 'flex', justifyContent: 'center', alignItems: 'center' }}><h1>–ê–õ–ï–Ø –ì–ï–†–û–á–í</h1></div>
            </Placeholder>
          </Page>
        );
      
      case "adventures":
        return (
          <div style={{ padding: '0 16px' }}>
            <Fountain />
          </div>
        );
        
      default:
        return <Placeholder>–ù–µ–∑–∞–±–∞—Ä–æ–º...</Placeholder>;
    }
  };

  return (
    <Page back={false}>
      <List>
        <TopBar points={points} />
        <div style={{ paddingBottom: 100 }}>{renderContent()}</div>

        {selectedItem && (
          <div className="modal-overlay" onClick={() => setSelectedItem(null)}>
            <div onClick={(e) => e.stopPropagation()}>
              <ItemCard
                item={selectedItem}
                mode={selectedItem.mode}
                onEquipRequest={handleEquip}
                onUnequipRequest={handleUnequip}
                onSellRequest={handleDismantle}
                onClose={() => setSelectedItem(null)}
              />
            </div>
          </div>
        )}
      </List>
      <BottomBar activeTab={activeTab} setActiveTab={setActiveTab} />
      <Toaster position="top-center" reverseOrder={false} />
    </Page>
  );
}
