"use client";

import React, { useEffect, useState, useRef, useCallback, useMemo,  } from "react";
import Image from "next/image";
import Link from "next/link";
import { useRouter } from "next/navigation";
import {
  List,
  Placeholder,
  Button,
  Card,
} from "@telegram-apps/telegram-ui";
import { useSignal, initData } from "@telegram-apps/sdk-react";
import { Toaster } from "react-hot-toast";
import toast from "react-hot-toast";

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
import { Page } from "@/components/Page";
import TopBar from "@/components/TopBar";
import BottomBar from "@/components/BottomBar";
import { ItemCard } from "@/components/ItemCard";
import EquippedItemSlot from "@/components/Item/EquippedItemSlot";
import InventoryItemSlot from "@/components/Item/InventoryItemSlot";
import Shop from "@/components/Shop";

// –î–∞–Ω—ñ —Ç–∞ –ª–æ–≥—ñ–∫–∞
import { supabase } from "@/lib/supabaseClient";
import { AllItems } from "@/components/Item/Items";
import { WeaponItems as RawWeaponItems } from "@/components/Item/WeaponItem";
import { ShieldItems as RawShieldItems } from "@/components/Item/ShieldItem";
import { ScrollItems as RawScrollItems } from "@/components/Item/ScrollItem";

// Convert item_id to string to match Item type
const WeaponItems = RawWeaponItems.map(item => ({ ...item, item_id: String(item.item_id) }));
const ShieldItems = RawShieldItems.map(item => ({ ...item, item_id: String(item.item_id) }));
const ScrollItems = RawScrollItems.map(item => ({ ...item, item_id: String(item.item_id) }));
import { formatTime } from "@/utils/formatTime";
import { getPlayerStats } from "@/utils/getPlayerStats";
import { updateUserPoints } from "@/hooks/useUserPoints";
import {addInventoryItem} from "@/hooks/useItemActions";

// –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è
import victim from "../_assets/victim.png";
import travel from "../_assets/travel.png";
import citybg from '../_assets/citybg.jpg';
import shopbg from '../_assets/shopbg.jpg';
import blacksmithbg from '../_assets/blacksmithbg.jpg';
import alleyofheroesnbg from '../_assets/alleyofheroesnbg.jpg';
import CardbgCommon from '@/assets/CardbgCommon_fixed.png'


export default function HomePage() {
  // –ö—ñ–ª—å–∫—ñ—Å—Ç—å —É–ª–∞–º–∫—ñ–≤ (points)
  const [points, setPoints] = useState(0);
  const [clickDelay, setClickDelay] = useState(1000);
  const [isClickable, setIsClickable] = useState(true);
  const [countdown, setCountdown] = useState(0);
  const [activeTab, setActiveTab] = useState("home");
  const [loading, setLoading] = useState(false);
  const [inventory, setInventory] = useState<any[]>([]);
  const [energy, setEnergy] = useState(0);
  const timerRef = useRef<NodeJS.Timeout | null>(null);
  const initDataState = useSignal(initData.state);
  const userId = initDataState?.user?.id;
  const [experience, setExperience] = useState(0);
  const [level, setLevel] = useState(1);
  const router = useRouter();
  const [showTooltip, setShowTooltip] = useState(false);
  const [selectedItemToUpgrade, setSelectedItemToUpgrade] = useState<InventoryItemType | null>(null); // –ó–∞–º—ñ—Å—Ç—å selectedWeapon

  type InventoryItemType = {
    id: string;
    item_id: number;
    type: string;
    name: string;
    image: string;
    description: string;
    damage?: number;
    defense?: number;
    strength?: number;
    price: number;
    rarity?: string;
    equipped?: boolean;
    upgrade_level?: number;
  };

  const [selectedWeapon, setSelectedWeapon] = useState<InventoryItemType | null>(null);
  // Define a minimal Item type for scrolls, or adjust as needed
  type ScrollItemType = {
    id: string;
    item_id: number;
    type: string;
    name: string;
    image: string;
    description: string;
    price: number;
    rarity?: string;
    equipped?: boolean;
    upgrade_level?: number;
  };
  const [selectedScroll, setSelectedScroll] = useState<ScrollItemType | null>(null);
  const [isUpgrading, setIsUpgrading] = useState(false);
  const [result, setResult] = useState<{ type: string; text: string } | null>(null);

  const username = useMemo(() => {
      return initDataState?.user?.firstName || 'User';
    }, [initDataState]);

  const [heroStats, setHeroStats] = useState({
    health: 20,
    attack: 1,
    defense: 0,
  });

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –¥–æ—Å–≤—ñ–¥—É
  const getRequiredExp = (level: number): number => {
    return 100 * Math.pow(2, level - 1); // 1 lvl = 100 XP, 2 lvl = 200, 3 lvl = 400 —ñ —Ç.–¥.
  };

  // –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–æ–∫—É–ø–∫–∏
  const [selectedItem, setSelectedItem] = useState<SelectedItemType>(null);
  type SelectedItemType = {
    mode: "city" | "inventory" | "equipped" | "sweapon" |"sshield" |"sscroll";
    item_id: number;
    type: string;
    name: string;
    image: string;
    description: string;
    damage?: string;
    defense?: string;
    strength?: string;
    price: number;
    rarity?: string;
    upgrade_level?: number;
  } | null;

  // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ–∑ Supabase
  useEffect(() => {
    const fetchUserData = async () => {
      if (!userId) return;
      const { data, error } = await supabase
        .from("users")
        .select("points, click_delay, energy, experience, level")
        .eq("id", userId)
        .single();
      if (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:", error);
      } else if (data) {
        setPoints(data.points);
        setClickDelay(data.click_delay);
        setEnergy(data.energy); // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –µ–Ω–µ—Ä–≥—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        setExperience(data.experience ?? 0);
        setLevel(data.level ?? 1);
      }
    };
    
    fetchUserData();
  }, [userId]);
  
  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É –≥—Ä–∞–≤—Ü—ñ–≤
  useEffect(() => {
    const fetchPlayers = async () => {
      const { data, error } = await supabase
        .from("users")
        .select("id, first_name, level")
        .order("level", { ascending: false }); // –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —Ä—ñ–≤–Ω–µ–º
      if (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—ñ–≤:", error);
      } else {
        setPlayers(data);
      }
    };
    fetchPlayers();
  }, []); // –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –º–æ–Ω—Ç—É–≤–∞–Ω–Ω—ñ

  // –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–æ–∫—É–ø–∫–∏
  const confirmBuy = async () => {
    if (selectedItem) {
      await handleBuyItem(selectedItem);
      setSelectedItem(null);
    }
  };

  // –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–∫—É–ø–∫–∏
  const handleBuyItem = async (item: { item_id: number; type:string; name: string; image: string; description: string; damage?: string; strength?: string; price: number }) => {
    if (points < item.price) {
      toast.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —É–ª–∞–º–∫—ñ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏!");
      return;
    }

    if (!userId) {
      toast.error('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!');
      return;
    }

    // –î–æ–¥–∞—î–º–æ –ø—Ä–µ–¥–º–µ—Ç
    const added = await addInventoryItem(String(userId), item.item_id, item.name);
    if (added) {
      const newPoints = points - item.price;
      await updateUserPoints(String(userId), newPoints);
      setPoints(newPoints);

      toast.success(`–í–∏ –ø—Ä–∏–¥–±–∞–ª–∏ ${item.name}!`);
    } else {
      toast.error(`–í–∏ –≤–∂–µ –º–∞—î—Ç–µ ${item.name} –∞–±–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞!`);
    }
  };

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –∫–ª—ñ–∫—É
  const updateCountdown = (endTime: number) => {
    if (timerRef.current) clearInterval(timerRef.current);

    const now = Date.now();
    let remaining = Math.ceil((endTime - now) / 1000);

    if (remaining <= 0) {
      setCountdown(0);
      setIsClickable(true);
      localStorage.removeItem("nextClickTime");
      return;
    }

    setCountdown(remaining);
    setIsClickable(false);

    timerRef.current = setInterval(() => {
      const now = Date.now();
      remaining = Math.ceil((endTime - now) / 1000);

      if (remaining <= 0) {
        clearInterval(timerRef.current!);
        setCountdown(0);
        setIsClickable(true);
        localStorage.removeItem("nextClickTime");
      } else {
        setCountdown(remaining);
      }
    }, 1000);
  };
  useEffect(() => {
    const savedNextClick = localStorage.getItem("nextClickTime");
    if (savedNextClick) {
      const endTime = parseInt(savedNextClick, 10);
      updateCountdown(endTime);
    }
  }, []);

  // –ö–ª—ñ–∫ –Ω–∞ "HOLD"
  const handleClick = async () => {
    if (!isClickable) return;
    const nextAvailableClick = Date.now() + clickDelay;
    localStorage.setItem("nextClickTime", nextAvailableClick.toString());
    setIsClickable(false);
    updateCountdown(nextAvailableClick);
    const newPoints = points + 2;
    const newEnergy = (energy ?? 0) + 2; // –î–æ–¥–∞—î–º–æ +1 –¥–æ –µ–Ω–µ—Ä–≥—ñ—ó, —è–∫—â–æ energy null, –±–µ—Ä–µ–º–æ 0
    const newClickDelay = clickDelay + 5000;
    setPoints(newPoints);
    setEnergy(newEnergy); // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –µ–Ω–µ—Ä–≥—ñ—ó
    setClickDelay(newClickDelay);
    if (!userId) return;
    const { error } = await supabase
      .from("users")
      .upsert([{ id: userId, points: newPoints, click_delay: newClickDelay, energy: newEnergy }], { // –î–æ–¥–∞—î–º–æ energy –¥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        onConflict: "id",
      });
    if (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:", error);
    }
    const imgWrap = document.querySelector(".imgWrap");
    if (imgWrap) {
      imgWrap.classList.add("active");
      setTimeout(() => {
        imgWrap.classList.remove("active");
      }, 1000);
    }
    const xpGain = 5; // –ö–æ–∂–µ–Ω –∫–ª—ñ–∫ ‚Äî +1 XP
    let newExperience = experience + xpGain;
    let newLevel = level;
    // –ü—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è
    while (newExperience >= getRequiredExp(newLevel)) {
      newExperience -= getRequiredExp(newLevel);
      newLevel++;
      toast.success(`üéâ –ù–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å! –¢–µ–ø–µ—Ä –≤–∏ —Ä—ñ–≤–µ–Ω—å ${newLevel}`);
    }
    setExperience(newExperience);
    setLevel(newLevel);
    await supabase
      .from("users")
      .upsert([
        {
          id: userId,
          points: newPoints,
          click_delay: newClickDelay,
          energy: newEnergy, // –î–æ–¥–∞—î–º–æ energy –¥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
          experience: newExperience,
          level: newLevel,
        },
      ], { onConflict: "id" });
      toast.success(`–í–∞–º –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ + 2 ü™®`);
      toast.success(`–í–∞–º –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ + 2 ‚ö°`);
      toast.success(`–í–∞–º –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ + 5 üî∑`);
  };

 function getEnchantChance(upgradeLevel: number): number {
  if (upgradeLevel < 1) return 1.0; // 100%
  if (upgradeLevel === 1) return 0.9; // 90%
  if (upgradeLevel === 2) return 0.8; // 80% (–≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –∑ 0.9 –Ω–∞ 0.8 –∑–≥—ñ–¥–Ω–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—è, —è–∫—â–æ —Ü–µ –º–∞–ª–æ—Å—è –Ω–∞ —É–≤–∞–∑—ñ)
  if (upgradeLevel >= 3 && upgradeLevel < 4) return 0.6; // 60%
  if (upgradeLevel >= 4 && upgradeLevel < 5) return 0.5; // 50%
  if (upgradeLevel >= 5 && upgradeLevel < 6) return 0.4; // 40%
  if (upgradeLevel >= 6 && upgradeLevel < 7) return 0.3; // 30%
  if (upgradeLevel >= 7 && upgradeLevel < 8) return 0.2; // 20%
  if (upgradeLevel >= 8 && upgradeLevel < 9) return 0.091; // 9.1%
  if (upgradeLevel >= 9 && upgradeLevel < 10) return 0.0585; // 5.85%
  if (upgradeLevel >= 10 && upgradeLevel < 11) return 0.04; // 4%
  if (upgradeLevel >= 11 && upgradeLevel < 12) return 0.027; // 2.7%
  if (upgradeLevel >= 12 && upgradeLevel < 13) return 0.0173; // 1.73%
  if (upgradeLevel >= 13 && upgradeLevel < 14) return 0.0116; // 1.16%
  // –£ —Ç–≤–æ—î–º—É –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–º—É –∫–æ–¥—ñ –±—É–ª–æ –¥–≤—ñ –æ–¥–Ω–∞–∫–æ–≤—ñ —É–º–æ–≤–∏ –¥–ª—è 13-14, —è –≤–∏–±—Ä–∞–≤ –æ—Å—Ç–∞–Ω–Ω—é
  if (upgradeLevel >= 14 && upgradeLevel < 15) return 0.0077; // 0.77%
  return 0; // –Ω–µ –º–æ–∂–Ω–∞ –±—ñ–ª—å—à–µ –ø–æ–∫—Ä–∞—â—É–≤–∞—Ç–∏ –∞–±–æ —à–∞–Ω—Å –≤–∫—Ä–∞–π –Ω–∏–∑—å–∫–∏–π
}

const RARE_SCROLL_ITEM_ID = 1001; // ID —Ä—ñ–¥–∫—ñ—Å–Ω–æ–≥–æ —Å—É–≤–æ—é, —è–∫–∏–π –∑–∞—Ö–∏—â–∞—î –≤—ñ–¥ –ø–æ–ª–æ–º–∫–∏

// –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Å–ø—Ä–æ–±–∏ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç–∞
async function tryUpgradeWeapon(
  inventoryId: string, // ID –∑–∞–ø–∏—Å—É –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü—ñ 'inventory' Supabase
  upgradeLevel: number,
  scrollId: string, // ID –∑–∞–ø–∏—Å—É —Å—É–≤–æ—é –≤ —Ç–∞–±–ª–∏—Ü—ñ 'inventory' Supabase
  useProtectionItem: boolean // –ß–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –∑–∞—Ö–∏—Å–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç
): Promise<{ result: "success" | "fail" | "broken" | "safe_fail" | "protected_fail" | "error"; newLevel?: number | null }> {
  // 1. –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏–π —Å—É–≤—ñ–π –∑ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—é
  const { data: scrollData, error: scrollFetchError } = await supabase
    .from("inventory")
    .select("item_id")
    .eq("id", scrollId)
    .single();

  if (scrollFetchError || !scrollData) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å—É–≤—ñ–π –∞–±–æ —Å—É–≤—ñ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ:", scrollFetchError?.message);
    return { result: "error", newLevel: upgradeLevel };
  }

  // 2. –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –†—ñ–¥–∫—ñ—Å–Ω–∏–π —Å—É–≤—ñ–π
  const isRareScrollUsed = scrollData.item_id === RARE_SCROLL_ITEM_ID;

  const currentChance = getEnchantChance(upgradeLevel);
  const isSuccess = Math.random() < currentChance;

  // 3. –í–∏–¥–∞–ª—è—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏–π —Å—É–≤—ñ–π –∑ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—é (–Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è)
  const { error: deleteScrollError } = await supabase.from("inventory").delete().eq("id", scrollId);

  if (deleteScrollError) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Å—É–≤–æ—é:", deleteScrollError.message);
    // –¶–µ –º–æ–∂–µ –±—É—Ç–∏ –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞, –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –≤–∞—à–æ—ó –ª–æ–≥—ñ–∫–∏.
    // –ù–∞—Ä–∞–∑—ñ, –º–∏ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ, –∞–ª–µ –ª–æ–≥—É—î–º–æ –ø—Ä–æ–±–ª–µ–º—É.
  }

  if (isSuccess) {
    // –£—Å–ø—ñ—à–Ω–µ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è
    await supabase
      .from("inventory")
      .update({ upgrade_level: upgradeLevel + 1 })
      .eq("id", inventoryId);
    return { result: "success", newLevel: upgradeLevel + 1 };
  } else {
    // –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è
    if (isRareScrollUsed) {
      // –Ø–∫—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –†—ñ–¥–∫—ñ—Å–Ω–∏–π —Å—É–≤—ñ–π, –ø—Ä–µ–¥–º–µ—Ç –Ω—ñ–∫–æ–ª–∏ –Ω–µ –ª–∞–º–∞—î—Ç—å—Å—è
      return { result: "safe_fail", newLevel: upgradeLevel };
    }

    // –Ü—Å–Ω—É—é—á–∞ –ª–æ–≥—ñ–∫–∞ –±–µ–∑–ø–µ—á–Ω–æ—ó –Ω–µ–≤–¥–∞—á—ñ –¥–ª—è –Ω–∏–∑—å–∫–∏—Ö —Ä—ñ–≤–Ω—ñ–≤ (—è–∫—â–æ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ "–∑–∞—Ö–∏—â–µ–Ω–∏–π" –†—ñ–¥–∫—ñ—Å–Ω–∏–º —Å—É–≤–æ—î–º)
    const isSafeUpgradeBasedOnLevel = upgradeLevel < 4; // –ü–µ—Ä–µ–π–º–µ–Ω–æ–≤–∞–Ω–æ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É
    if (isSafeUpgradeBasedOnLevel) {
      return { result: "safe_fail", newLevel: upgradeLevel };
    }

    // –Ü—Å–Ω—É—é—á–∞ –ª–æ–≥—ñ–∫–∞ –∑–∞—Ö–∏—Å—Ç—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –æ–∫—Ä–µ–º–æ–≥–æ –∑–∞—Ö–∏—Å–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ (—è–∫—â–æ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ "–∑–∞—Ö–∏—â–µ–Ω–∏–π" –†—ñ–¥–∫—ñ—Å–Ω–∏–º —Å—É–≤–æ—î–º)
    if (useProtectionItem) {
      return { result: "protected_fail", newLevel: upgradeLevel };
    }

    // –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –≤—Ä—è—Ç—É–≤–∞–ª–æ, –ø—Ä–µ–¥–º–µ—Ç –ª–∞–º–∞—î—Ç—å—Å—è ‚Äî –≤–∏–¥–∞–ª—è—î–º–æ —Å–∞–º –ø—Ä–µ–¥–º–µ—Ç
    await supabase.from("inventory").delete().eq("id", inventoryId);
    return { result: "broken", newLevel: null };
  }
}

// --- –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏ —Ç–∞ –¥–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó (–±–µ–∑ –∑–º—ñ–Ω, –∑–∞–ª–∏—à–∞—î–º–æ —è–∫ —î) ---

interface UpgradableItem {
  damage: number;
  defense: number;
}

interface UpgradedStats {
  damage: number;
  defense: number;
}

const getUpgradedStats = (base: UpgradableItem, level: number): UpgradedStats => {
  // –ù–∞–ø—Ä–∏–∫–ª–∞–¥: +1 damage —ñ +10% defense –∑–∞ –∫–æ–∂–µ–Ω —Ä—ñ–≤–µ–Ω—å
  return {
    damage: base.damage + level,
    defense: Math.round(base.defense * (1 + 0.1 * level)),
  };
};

  // –§—É–Ω–∫—Ü—ñ—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä
  const fetchInventory = async () => {
    if (!userId) return [];
    setLoading(true);

    const { data, error } = await supabase
      .from("inventory")
      .select(`
        id,
        item_id,
        equipped,
        upgrade_level
      `)
      .eq("user_id", userId);

    if (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è:", error.message);
      setLoading(false);
      return [];
    }

    if (data) {
      const formatted = data.map((entry) => {
        const item = AllItems.find((i) => i.item_id === entry.item_id);
        return {
          ...item,
          id: entry.id,
          equipped: entry.equipped ?? false,
          upgrade_level: entry.upgrade_level ?? 0,
        };
      });      

      setInventory(formatted);
      setLoading(false);
      return formatted;
    }

    setLoading(false);
    return [];
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–µ–∫—É–≤–∞–Ω–Ω—è –æ–¥–Ω–∞–∫–æ–≤–∏—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
  interface StackableInventoryItem extends InventoryItemType {
    count: number;
  }

  const stackItems = (inventory: InventoryItemType[]): StackableInventoryItem[] => {
    const itemStacks: Record<string, StackableInventoryItem> = {};
    inventory.forEach((item: InventoryItemType) => {
      const key = `${item.type}-${item.name}-${item.rarity}-${item.upgrade_level}`;
      if (!itemStacks[key]) {
        itemStacks[key] = { ...item, count: 1 }; // –î–æ–¥–∞—î–º–æ –ø–æ–ª–µ `count`
      } else {
        itemStacks[key].count += 1; // –ó–±—ñ–ª—å—à—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É —Å—Ç–µ–∫—É
      }
    });
    return Object.values(itemStacks); // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤
  };

  const toggleEquip = async (index: number) => {
    const selectedItem = inventory[index];

    if (!selectedItem || !userId) return;

    const itemType = selectedItem.type;

    if (selectedItem.equipped) {
      await supabase
        .from('inventory')
        .update({ equipped: false })
        .eq('user_id', userId)
        .eq('id', selectedItem.id); // –ó–º—ñ–Ω–∞ —Ç—É—Ç
    } else {
      // –ó–Ω—è—Ç–∏ –≤—Å—ñ –ø—Ä–µ–¥–º–µ—Ç–∏ —Ç–∞–∫–æ–≥–æ —Ç–∏–ø—É
      const idsToUnequip = inventory
        .filter(item => item.type === itemType && item.equipped)
        .map(item => item.id);

      if (idsToUnequip.length > 0) {
        await supabase
          .from('inventory')
          .update({ equipped: false })
          .eq('user_id', userId)
          .in('id', idsToUnequip);
      }

      // –ï–∫—ñ–ø—ñ—Ä—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π
      await supabase
        .from('inventory')
        .update({ equipped: true })
        .eq('user_id', userId)
        .eq('id', selectedItem.id); // –ó–º—ñ–Ω–∞ —Ç—É—Ç
    }

    await fetchInventory(); // –û–Ω–æ–≤–∏—Ç–∏ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä
    await updateHeroStats(); // –û–Ω–æ–≤–∏—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≥–µ—Ä–æ—è
  };

  // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä –ø—Ä–∏ –∑–º—ñ–Ω—ñ userId
  useEffect(() => {
    if (activeTab === "home" && userId) {
      fetchInventory();
    }
    if (activeTab === "blacksmith" && userId) {
      fetchInventory();
    }
  }, [activeTab, userId]);

  const [players, setPlayers] = useState<{ id: any; first_name: any; level: any }[]>([]);
      // –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–∞—Ö—É–Ω–∫—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≥–µ—Ä–æ—è
  const updateHeroStats = useCallback(() => {
    const stats = getPlayerStats(inventory);
    setHeroStats(stats);
  }, [inventory]);

  // –í–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó –ø—Ä–∏ –∑–º—ñ–Ω—ñ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—é
  useEffect(() => {
    updateHeroStats();
  }, [inventory, updateHeroStats]);


  useEffect(() => {
    const fetchPlayers = async () => {
      const { data, error } = await supabase
        .from('user')
        .select('id, first_name, level')
        .order('level', { ascending: false }); // –°–æ—Ä—Ç—É—î–º–æ –ø–æ —Ä—ñ–≤–Ω—é
      if (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—ñ–≤:", error);
      } else {
        setPlayers(data);
      }
    };
    fetchPlayers();
  }, []);

  useEffect(() => {
    const updateSelectedWeapon = async () => {
      await fetchInventory();
      const updated = inventory.find(i => i.id === selectedWeapon?.id);
      setSelectedWeapon(updated ?? null);
    };
    if (selectedWeapon) {
      updateSelectedWeapon();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [selectedWeapon?.id]);

  useEffect(() => {
    if (selectedWeapon && !inventory.find(i => i.id === selectedWeapon.id)) {
      setSelectedWeapon(null);
    }
  }, [inventory]);

  useEffect(() => {
    if (!selectedWeapon) return;
    const updated = inventory.find(i => i.id === selectedWeapon.id);
    if (updated && updated !== selectedWeapon) {
      setSelectedWeapon(updated);
    }
  }, [inventory]);

  // –§—É–Ω–∫—Ü—ñ—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –≤–∫–ª–∞–¥–æ–∫
  const renderContent = () => {
  switch (activeTab) {
    case "city":
      return (
        <Page back >
          <Placeholder style={{
            display: "flex",
            flexDirection: "column",
            alignItems: "center",
            justifyContent: "center",
            marginTop: "20px",
            animation: "fadeIn 1s ease forwards",
            backgroundSize: 'cover', // –ü–æ–∫—Ä–∏—Ç–∏ –≤–µ—Å—å –±–ª–æ–∫
            backgroundPosition: 'center', // –¶–µ–Ω—Ç—Ä—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            height: '100%', // –ó–∞–π–Ω—è—Ç–∏ –≤—Å—é –≤–∏—Å–æ—Ç—É –≤—ñ–∫–Ω–∞
            color: "#fff", // –¢–µ–∫—Å—Ç –Ω–∞–≤–∫–æ–ª–æ, —â–æ–± –±—É—Ç–∏ –±—ñ–ª—ñ—à–∏–º –Ω–∞ —Ñ–æ–Ω—ñ
          }} >
          </Placeholder>
          <Placeholder style={{
            display: "flex",
            flexDirection: "column",
            alignItems: "center",
            justifyContent: "center",
            animation: "fadeIn 1s ease forwards",
            marginTop: "-40px",
          }} >
            <div onClick={() => setActiveTab("shop")}
              className="page"
              style={{
                backgroundImage: `url(${shopbg.src})`,
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                justifyContent: "center",
                marginTop: "20px",
                animation: "fadeIn 1s ease forwards",
              }}
            >
              <h1
                style={{
                  fontSize: "1.2rem",
                  fontWeight: "bold",
                  textAlign: "center",
                  lineHeight: "1",
                  color: "#fff",
                }}
              >
                –¢–û–†–ì–û–í–ï–¶–¨
              </h1>
            </div>
            <div onClick={() => setActiveTab("blacksmith")}
              className="page"
              style={{
                backgroundImage: `url(${blacksmithbg.src})`,
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                justifyContent: "center",
                marginTop: "20px",
                animation: "fadeIn 1s ease forwards",
              }}
            >
              <h1
                style={{
                  fontSize: "1.2rem",
                  fontWeight: "bold",
                  textAlign: "center",
                  lineHeight: "1",
                  color: "#fff",
                }}
              >
                –ö–û–í–ê–õ–¨
              </h1>
            </div>
            <div onClick={() => setActiveTab("guild")}
              className="page"
              style={{
                backgroundImage: `url(${citybg.src})`,
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                justifyContent: "center",
                marginTop: "20px",
                animation: "fadeIn 1s ease forwards",
              }}
            >
              <h1
                style={{
                  fontSize: "1.2rem",
                  fontWeight: "bold",
                  textAlign: "center",
                  lineHeight: "1",
                  color: "#fff",
                }}
              >
                –ì–Ü–õ–¨–î–Ü–Ø
              </h1>
            </div>
            <div onClick={() => setActiveTab("alleyofheroes")}
              className="page"
              style={{
                backgroundImage: `url(${alleyofheroesnbg.src})`, 
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                justifyContent: "center",
                marginTop: "20px",
                animation: "fadeIn 1s ease forwards",
              }}
            >
              <h1
                style={{
                  fontSize: "1.2rem",
                  fontWeight: "bold",
                  textAlign: "center",
                  lineHeight: "1",
                  color: "#fff",
                }}
              >
                –ê–õ–ï–Ø –ì–ï–†–û–á–í
              </h1>
            </div>
          </Placeholder>
        </Page>
      );
    case "shop":
      return (
        <Page back>
          <Shop
    WeaponItems={WeaponItems}
    ShieldItems={ShieldItems}
    ScrollItems={ScrollItems}
    setSelectedItem={(item) =>
      setSelectedItem({
        ...item,
        mode: "city",
        item_id: Number(item.item_id),
        damage: item.damage !== undefined ? String(item.damage) : undefined,
        defense: item.defense !== undefined ? String(item.defense) : undefined,
      })
    }
/>
        </Page>
      );
      return (
        <Page back>
          <Placeholder>
            <h1
                style={{
                  fontSize: "2rem",
                  fontWeight: "bold",
                  marginTop: "50px",
                  textAlign: "center",
                  lineHeight: "1",
                  color: "#fff",
                }}
              >
                –ö–û–í–ê–õ–¨
              </h1>
            <div
              className="page"
              style={{
                backgroundImage: `url(${blacksmithbg.src})`,
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                justifyContent: "center",
                animation: "fadeIn 1s ease forwards",
                backgroundSize: 'cover', // –ü–æ–∫—Ä–∏—Ç–∏ –≤–µ—Å—å –±–ª–æ–∫
                backgroundPosition: 'center', // –¶–µ–Ω—Ç—Ä—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                height: '100%', // –ó–∞–π–Ω—è—Ç–∏ –≤—Å—é –≤–∏—Å–æ—Ç—É –≤—ñ–∫–Ω–∞
                color: "#fff", // –¢–µ–∫—Å—Ç –Ω–∞–≤–∫–æ–ª–æ, —â–æ–± –±—É—Ç–∏ –±—ñ–ª—ñ—à–∏–º –Ω–∞ —Ñ–æ–Ω—ñ
              }}
            >
              <p
                style={{
                  fontSize: "0.8rem",
                  color: "#ddd",
                  textAlign: "center",
                  marginBottom: "20px",
                  marginLeft: "240px",
                  marginTop: "0px",
                  maxWidth: "600px",
                  background: "rgba(0, 0, 0, 0.59)",
                  padding: "5px",
                  animation: "fadeIn 3s ease forwards",
                }}
              >
                –ó–Ω–æ–≤—É —â–æ—Å—å –∑–ª–∞–º–∞–≤? –Ø –Ω–µ –º–æ–∂—É –≤—ñ—á–Ω–æ —Ç–µ–±–µ —Ä—è—Ç—É–≤–∞—Ç–∏!
              </p>
              <h1
                style={{
                  fontSize: "1rem",
                  fontWeight: "bold",
                  marginBottom: "70px",
                  marginTop: "5px",
                  textAlign: "center",
                  lineHeight: "1",
                  color: "#fff",
                }}
              >
                
              </h1>
              <Card className="page"
              style={{
                display: "flex",
                flexDirection: "row",
                justifyContent: "center",
                alignItems: "center",
                marginBottom: 20,
                gap: "30px",
                padding: 5,
                color: "#fff",
                animation: "fadeIn 0.6s ease forwards",
                background: "rgba(0, 0, 0, 0.45)",
              }}>
                –í–Ü–î–†–ï–ú–û–ù–¢–£–í–ê–¢–ò
              </Card>

              <Card className="page" onClick={() => setActiveTab("upgrade")} 
              style={{
              display: "flex",
              flexDirection: "row",
              justifyContent: "center",
              alignItems: "center",
              marginBottom: 20,
              gap: "30px",
              padding: 5,
              color: "#fff",
              animation: "fadeIn 0.6s ease forwards",
              background: "rgba(0, 0, 0, 0.59)",
            }}>
                –ü–û–ö–†–ê–©–ò–¢–ò
              </Card>
            </div>
          </Placeholder>
        </Page>
      ); 
      case "blacksmith":
        const upgradableItemsFromInventory = inventory.filter(
          (i) => i.type === "weapon" || i.type === "shield"
        );
        const scrollItemsFromInventory = inventory.filter(i => i.type === "scroll");
        return (
          <Page back>
            <Placeholder>
              <div
                className="page"
                style={{
                  backgroundImage: `url(${blacksmithbg.src})`,
                  display: "flex",
                  flexDirection: "column",
                  alignItems: "top",
                  justifyContent: "top",
                  animation: "fadeIn 1s ease forwards",
                  backgroundSize: 'cover', // –ü–æ–∫—Ä–∏—Ç–∏ –≤–µ—Å—å –±–ª–æ–∫
                  backgroundPosition: 'top', // –¶–µ–Ω—Ç—Ä—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                  height: '200px', // –ó–∞–π–Ω—è—Ç–∏ –≤—Å—é –≤–∏—Å–æ—Ç—É –≤—ñ–∫–Ω–∞
                  color: "#fff", // –¢–µ–∫—Å—Ç –Ω–∞–≤–∫–æ–ª–æ, —â–æ–± –±—É—Ç–∏ –±—ñ–ª—ñ—à–∏–º –Ω–∞ —Ñ–æ–Ω—ñ
                  marginTop: "20px", // –ó–±—ñ–ª—å—à–µ–Ω–æ –≤—ñ–¥—Å—Ç—É–ø –∑–≤–µ—Ä—Ö—É
                }}
              >
                <h1
                style={{
                  fontSize: "1.6rem", // –ó–±—ñ–ª—å—à–µ–Ω–æ –¥–ª—è –∞–∫—Ü–µ–Ω—Ç—É
                  fontWeight: "bold",
                  marginBottom: "110px",
                  textAlign: "center",
                  paddingTop: "20px", // –ó–±—ñ–ª—å—à–µ–Ω–æ –≤—ñ–¥—Å—Ç—É–ø –∑–≤–µ—Ä—Ö—É
                  paddingLeft: "55%", // –ó–±—ñ–ª—å—à–µ–Ω–æ –≤—ñ–¥—Å—Ç—É–ø –∑–ª—ñ–≤–∞
                  color: "#fff",
                  textShadow: "2px 2px 4px rgba(0,0,0,0.7)", // –î–æ–¥–∞–Ω–æ —Ç—ñ–Ω—å –¥–ª—è —Ç–µ–∫—Å—Ç—É
                  animation: "fadeIn 1s ease forwards", // –î–æ–¥–∞–Ω–æ –∞–Ω—ñ–º–∞—Ü—ñ—é
                }}
                >
                  –ö–û–í–ê–õ–¨
                </h1>
                <p
                  style={{
                    fontSize: "0.7rem", // –¢—Ä–æ—Ö–∏ –∑–±—ñ–ª—å—à–µ–Ω–æ
                    color: "#e0e0e0", // –°–≤—ñ—Ç–ª—ñ—à–∏–π —Å—ñ—Ä–∏–π
                    textAlign: "center",
                    marginBottom: "30px",
                    maxWidth: "600px",
                    background: "rgba(0, 0, 0, 0.65)", // –¢—Ä–æ—Ö–∏ —Ç–µ–º–Ω—ñ—à–∏–π —Ñ–æ–Ω –¥–ª—è –∫—Ä–∞—â–æ—ó —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ
                    padding: "10px 15px", // –ó–±—ñ–ª—å—à–µ–Ω–æ –ø–∞–¥—ñ–Ω–≥–∏
                    animation: "fadeIn 1.5s ease forwards 0.5s", // –î–æ–¥–∞–Ω–æ –∑–∞—Ç—Ä–∏–º–∫—É –∞–Ω—ñ–º–∞—Ü—ñ—ó
                    borderRadius: "8px", // –ó–∞–∫—Ä—É–≥–ª–µ–Ω—ñ –∫—É—Ç–∏
                    boxShadow: "0 4px 8px rgba(0,0,0,0.3)", // –î–æ–¥–∞–Ω–æ —Ç—ñ–Ω—å
                  }}
                >
                  –¢—É—Ç –∫—É—î—Ç—å—Å—è –¥–æ–ª—è... –∞–±–æ –ø—Ä–æ—Å—Ç–æ –ª–∞–º–∞—î—Ç—å—Å—è —á–µ—Ä–≥–æ–≤–∏–π –º–µ—á. –û–±–∏—Ä–∞–π –º—É–¥—Ä–æ!
                </p>
              </div>
              <div
                style={{ // –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ blacksmithbg.src –ø—Ä–∞–≤–∏–ª—å–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ
                  display: "flex",
                  flexDirection: "column",
                  alignItems: "center",
                  animation: "fadeIn 1s ease forwards",
                  padding: "0px",
                }}
              >
                {/* <Card className="page" style={{ ... }}>–í–Ü–î–†–ï–ú–û–ù–¢–£–í–ê–¢–ò</Card> */}
                <Card // –û—Å–Ω–æ–≤–Ω–∞ –∫–∞—Ä—Ç–∫–∞ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—É –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è
                  className="page" // –í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü–µ–π –∫–ª–∞—Å –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–∏—Ö —Å—Ç–∏–ª—ñ–≤ –∫–∞—Ä—Ç–æ–∫
                  style={{
                    display: "flex",
                    flexDirection: "column",
                    alignItems: "center",
                    marginBottom: 20,
                    gap: "20px", // –ó–±—ñ–ª—å—à–µ–Ω–æ –≤—ñ–¥—Å—Ç—É–ø –º—ñ–∂ —Å–µ–∫—Ü—ñ—è–º–∏
                    padding: "25px", // –ó–±—ñ–ª—å—à–µ–Ω–æ –ø–∞–¥—ñ–Ω–≥–∏
                    color: "#fff",
                    background: "rgba(10, 20, 30, 0.75)", // –¢–µ–º–Ω—ñ—à–∏–π, –±—ñ–ª—å—à "–º–µ—Ç–∞–ª–µ–≤–∏–π" —Ñ–æ–Ω
                    borderRadius: "12px", // –ë—ñ–ª—å—à –∑–∞–æ–∫—Ä—É–≥–ª–µ–Ω—ñ –∫—É—Ç–∏
                    width: "100%",
                    maxWidth: "700px", // –û–±–º–µ–∂–µ–Ω–Ω—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó —à–∏—Ä–∏–Ω–∏
                    boxShadow: "0 8px 16px rgba(0,0,0,0.4)", // –ë—ñ–ª—å—à –≤–∏—Ä–∞–∂–µ–Ω–∞ —Ç—ñ–Ω—å
                  }}
                >
                  <div style={{ fontSize: "1.6rem", marginBottom: "10px", marginTop: "10px", fontWeight: "bold", color: "#FFD700" }}>
                    –ü–û–ö–†–ê–©–ï–ù–ù–Ø –°–ü–û–†–Ø–î–ñ–ï–ù–ù–Ø
                  </div>
                  {/* –°–µ–∫—Ü—ñ—è –≤–∏–±–æ—Ä—É –ü—Ä–µ–¥–º–µ—Ç–∞ (–ó–±—Ä–æ—è –∞–±–æ –©–∏—Ç) */}
                  <div style={{ width: '100%' }}>
                    <h3 style={{ textAlign: 'center', marginBottom: '15px', fontSize: '1.3rem', color: '#C0C0C0' }}>
                      1. –í–∏–±–µ—Ä—ñ—Ç—å –ü—Ä–µ–¥–º–µ—Ç –¥–ª—è –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è:
                    </h3>
                    {upgradableItemsFromInventory.length > 0 ? (
                      <div style={{ display: "flex", flexWrap: "wrap", gap: "15px", justifyContent: "center", padding: "10px", background: "rgba(0,0,0,0.2)", borderRadius: "8px" }}>
                        {upgradableItemsFromInventory.map(item => {
                          const stats = getUpgradedStats(item, item.upgrade_level ?? 0); // –ü–µ—Ä–µ–¥–∞—î–º–æ 0, —è–∫—â–æ upgrade_level undefined
                          return (
                            <Card
                              key={item.id}
                              style={{
                                padding: "12px",
                                minWidth: "160px",
                                maxWidth: "180px",
                                background: selectedItemToUpgrade?.id === item.id ? "rgba(70, 80, 50, 0.9)" : "rgba(40, 43, 21, 0.8)",
                                border: selectedItemToUpgrade?.id === item.id ? "2px solid #AFFFAB" : "1.5px solid #778",
                                cursor: "pointer",
                                borderRadius: "8px",
                                textAlign: "center",
                                transition: "transform 0.2s ease, box-shadow 0.2s ease",
                                boxShadow: selectedItemToUpgrade?.id === item.id ? "0 0 15px #AFFFAB" : "none",
                              }}
                              onClick={() => setSelectedItemToUpgrade(item)}
                              onMouseEnter={(e) => e.currentTarget.style.transform = 'translateY(-3px)'}
                              onMouseLeave={(e) => e.currentTarget.style.transform = 'translateY(0px)'}
                            >
                              <Image src={item.image} width={48} height={48} alt={item.name} style={{ marginBottom: '8px' }} />
                              <div style={{ fontWeight: 'bold', color: selectedItemToUpgrade?.id === item.id ? '#FFF' : '#DDD' }}>{item.name} <span style={{ color: '#AFFFAB', fontSize: 15 }}>+{item.upgrade_level ?? 0}</span></div>
                              <div style={{ fontSize: 12, color: '#A0A0FF' }}>
                                {/* –£–º–æ–≤–Ω–µ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ */}
                                {item.type === "weapon" && `–®–∫–æ–¥–∞: ${stats.damage}`}
                                {item.type === "shield" && `–ó–∞—Ö–∏—Å—Ç: ${stats.defense}`}
                                {/* –Ø–∫—â–æ –ø—Ä–µ–¥–º–µ—Ç –º–æ–∂–µ –º–∞—Ç–∏ —ñ —Ç–µ, —ñ —ñ–Ω—à–µ, –º–æ–∂–Ω–∞ —Ä–æ–∑—à–∏—Ä–∏—Ç–∏ –ª–æ–≥—ñ–∫—É */}
                                {item.type !== "weapon" && item.type !== "shield" && `–¢–∏–ø: ${item.type}`}
                              </div>
                            </Card>
                          );
                        })}
                      </div>
                    ) : (
                      <div style={{ color: "#ccc", textAlign: "center", padding: "10px" }}>–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–±—Ä–æ—ó —á–∏ —â–∏—Ç—ñ–≤ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è.</div>
                    )}
                  </div>
                  {/* –°–µ–∫—Ü—ñ—è –≤–∏–±–æ—Ä—É –°—É–≤–æ—é (–∑'—è–≤–ª—è—î—Ç—å—Å—è –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –ø—Ä–µ–¥–º–µ—Ç–∞) */}
                  {selectedItemToUpgrade && (
                    <div style={{ width: '100%', marginTop: '20px' }}>
                      <h3 style={{ textAlign: 'center', marginBottom: '15px', fontSize: '1.3rem', color: '#C0C0C0' }}>
                        2. –í–∏–±–µ—Ä—ñ—Ç—å –°—É–≤—ñ–π –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è:
                      </h3>
                      {scrollItemsFromInventory.length > 0 ? (
                        <div style={{ display: "flex", flexWrap: "wrap", gap: "12px", justifyContent: "center", padding: "10px", background: "rgba(0,0,0,0.2)", borderRadius: "8px" }}>
                          {scrollItemsFromInventory.map(scroll => (
                            <Card
                              key={scroll.id}
                              onClick={() => setSelectedScroll(scroll)}
                              style={{
                                padding: "10px",
                                minWidth: "130px",
                                background: selectedScroll?.id === scroll.id ? "rgba(70, 80, 50, 0.9)" : "rgba(40, 43, 21, 0.8)",
                                border: selectedScroll?.id === scroll.id ? "2px solid #AFFFAB" : "1px solid #666",
                                cursor: "pointer",
                                borderRadius: "8px",
                                textAlign: "center",
                                transition: "transform 0.2s ease, box-shadow 0.2s ease",
                                boxShadow: selectedScroll?.id === scroll.id ? "0 0 15px #AFFFAB" : "none",
                              }}
                              onMouseEnter={(e) => e.currentTarget.style.transform = 'translateY(-3px)'}
                              onMouseLeave={(e) => e.currentTarget.style.transform = 'translateY(0px)'}
                            >
                              <Image src={scroll.image} width={40} height={40} alt={scroll.name} style={{ marginBottom: '5px', borderRadius:'50%',  boxShadow: '0 0 8px rgba(255,255,255,0.3)' }} />
                              <div style={{ fontSize: 13, color: selectedScroll?.id === scroll.id ? '#FFF' : '#DDD' }}>{scroll.name}</div>
                            </Card>
                          ))}
                        </div>
                      ) : (
                        <div style={{ color: "#ccc", textAlign: "center", padding: "10px" }}>–ù–µ–º–∞—î —Å—É–≤–æ—ó–≤ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è.</div>
                      )}
                    </div>
                  )}
                  {/* –ó–æ–Ω–∞ –¥—ñ—ó: –ö–Ω–æ–ø–∫–∞ —Ç–∞ –®–∞–Ω—Å (–∑'—è–≤–ª—è—î—Ç—å—Å—è –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –ø—Ä–µ–¥–º–µ—Ç–∞ —Ç–∞ —Å—É–≤–æ—é) */}
                  {selectedItemToUpgrade && selectedScroll && (
                    <div style={{ marginTop: "25px", marginBottom: "10px", textAlign: 'center', padding: '20px', background: 'rgba(0,0,0,0.3)', borderRadius: '10px' }}>
                      <div style={{ fontSize: '1.1rem', color: '#FFD700', marginBottom: '8px' }}>
                        –û–±—Ä–∞–Ω–æ: {selectedItemToUpgrade.name} +{selectedItemToUpgrade.upgrade_level ?? 0}
                      </div>
                      <div style={{ fontSize: '1rem', color: '#B0E0E6', marginBottom: '15px' }}>
                        –°—É–≤—ñ–π: {selectedScroll.name}
                      </div>
                      <div style={{ fontSize: '1.4rem', color: '#aaa', marginBottom: "15px", fontWeight: 'bold' }}>
                        –®–∞–Ω—Å —É—Å–ø—ñ—Ö—É: {Math.round(getEnchantChance(selectedItemToUpgrade.upgrade_level ?? 0) * 100)}%
                      </div>
                      <Button
                        onClick={async () => {
                          if (!selectedItemToUpgrade || !selectedScroll) return;
                          setIsUpgrading(true);
                          setResult(null); // –°–∫–∏–¥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                          // –¢—É—Ç –≤–∞—à–∞ –≤–∂–µ —ñ—Å–Ω—É—é—á–∞ —Ñ—É–Ω–∫—Ü—ñ—è tryUpgradeWeapon
                          const upgradeOutcome = await tryUpgradeWeapon(
                            selectedItemToUpgrade.id,
                            selectedItemToUpgrade.upgrade_level ?? 0,
                            selectedScroll.id,
                            false // useProtectionItem
                          );
                          // –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —Å—Ç–∞–ª–æ –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–∏–º
                          let resultText = "";
                          let resultType = upgradeOutcome.result; // success, safe_fail, protected_fail, broken
                          if (upgradeOutcome.result === 'success') {
                            resultText = `${selectedItemToUpgrade.name} —É—Å–ø—ñ—à–Ω–æ –ø–æ–∫—Ä–∞—â–µ–Ω–æ –¥–æ +${upgradeOutcome.newLevel}!`;
                          } else if (upgradeOutcome.result === 'broken') {
                            resultText = `–û –Ω—ñ! ${selectedItemToUpgrade.name} –∑–ª–∞–º–∞–≤—Å—è —Ç–∞ –∑–Ω–∏–∫...`;
                          } else if (upgradeOutcome.result === 'safe_fail') {
                            resultText = `–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è ${selectedItemToUpgrade.name} –Ω–µ –≤–¥–∞–ª–æ—Å—è, –∞–ª–µ –≤—ñ–Ω –∑–∞–ª–∏—à–∏–≤—Å—è —Ü—ñ–ª–∏–º.`;
                            resultType = 'fail'; // –î–ª—è –≤—ñ–∑—É–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∏–ª—é "–Ω–µ–≤–¥–∞—á—ñ"
                          } else if (upgradeOutcome.result === 'protected_fail') {
                            resultText = `–ó–∞—Ö–∏—Å—Ç —Å–ø—Ä–∞—Ü—é–≤–∞–≤! ${selectedItemToUpgrade.name} –Ω–µ –ø–æ–∫—Ä–∞—â–∏–≤—Å—è, –∞–ª–µ –π –Ω–µ –∑–ª–∞–º–∞–≤—Å—è.`;
                            resultType = 'fail'; // –î–ª—è –≤—ñ–∑—É–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∏–ª—é "–Ω–µ–≤–¥–∞—á—ñ"
                          } else {
                            resultText = '–°—Ç–∞–ª–∞—Å—è –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è.';
                            resultType = 'error'; // –ó–∞–≥–∞–ª—å–Ω–∏–π —Ç–∏–ø –¥–ª—è –ø–æ–º–∏–ª–æ–∫
                          }
                          setResult({ type: resultType, text: resultText });
                          setSelectedScroll(null); // –°–∫–∏–¥–∞—î–º–æ —Å—É–≤—ñ–π
                          setIsUpgrading(false);
                          await fetchInventory(); // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä
                          // –û–Ω–æ–≤–ª—é—î–º–æ –≤–∏–±—Ä–∞–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç, —è–∫—â–æ –≤—ñ–Ω –Ω–µ –∑–ª–∞–º–∞–≤—Å—è
                          if (upgradeOutcome.result !== 'broken') {
                              const updatedItem = inventory.find(i => i.id === selectedItemToUpgrade.id);
                              setSelectedItemToUpgrade(updatedItem ?? null);
                          } else {
                              setSelectedItemToUpgrade(null); // –ü—Ä–µ–¥–º–µ—Ç –∑–Ω–∏–∫
                          }
                        }}
                        disabled={!selectedItemToUpgrade || !selectedScroll || isUpgrading}
                        style={{ // –ü—Ä–∏–∫–ª–∞–¥ —Å—Ç–∏–ª—ñ–≤ –¥–ª—è –∫–Ω–æ–ø–∫–∏
                          padding: '15px 30px',
                          fontSize: '1.2rem',
                          fontWeight: 'bold',
                          cursor: isUpgrading || !selectedItemToUpgrade || !selectedScroll ? 'not-allowed' : 'pointer',
                          borderRadius: '8px',
                          background: isUpgrading ? '#555' : 'linear-gradient(145deg, #ffac41, #ff8c00)',
                          color: isUpgrading? '#aaa' : '#fff',
                          border: 'none',
                          boxShadow: isUpgrading ? 'none' : '0 4px 8px rgba(0,0,0,0.3)',
                          transition: 'background 0.3s ease, transform 0.1s ease',
                        }}
                        onMouseDown={(e) => { if(!isUpgrading) e.currentTarget.style.transform = 'scale(0.98)'; }}
                        onMouseUp={(e) => { if(!isUpgrading) e.currentTarget.style.transform = 'scale(1)'; }}
                      >
                        {isUpgrading ? "–ö–£–í–ê–ù–ù–Ø..." : "‚ö° –ü–û–ö–†–ê–©–ò–¢–ò ‚ö°"}
                      </Button>
                    </div>
                  )}
                  {/* –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É */}
                  {result && (
                    <div style={{
                      color: result.type === 'success' ? "#86DC3D" : result.type === 'broken' ? "#FFA07A" : (result.type === 'fail' ? "#FFD700" : "#FF6347"),
                      marginTop: "20px",
                      padding: "15px",
                      fontWeight: 'bold',
                      fontSize: '1.2rem',
                      textAlign: 'center',
                      background: `rgba(${
                        result.type === 'success' ? '46, 204, 113' :
                        result.type === 'broken' ? '231, 76, 60' :
                        result.type === 'fail' ? '241, 196, 15' :
                        '200, 200, 200' // default –¥–ª—è error
                      }, 0.15)`,
                      borderRadius: '8px',
                      border: `2px solid ${result.type === 'success' ? "#86DC3D" : result.type === 'broken' ? "#FFA07A" : (result.type === 'fail' ? "#FFD700" : "#FF6347")}`,
                      animation: `${result.type === 'success' ? 'successGlow' : (result.type === 'fail' || result.type === 'broken' ? 'failShake' : 'fadeIn')} 0.5s ease-in-out`
                    }}>
                      {result.text}
                    </div>
                  )}
                </Card>
              </div>
            </Placeholder>
          </Page>
        );
    case "guild":
      return (
        <Page back>
          <Placeholder>
            <h1
                style={{
                  fontSize: "2rem",
                  fontWeight: "bold",
                  marginTop: "50px",
                  textAlign: "center",
                  lineHeight: "1",
                  color: "#fff",
                }}
              >
                –ì–Ü–õ–¨–î–Ü–Ø
              </h1>
            <div
              className="page"
              style={{
                backgroundImage: `url(${citybg.src})`,
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                justifyContent: "center",
                animation: "fadeIn 1s ease forwards",
                backgroundSize: 'cover', // –ü–æ–∫—Ä–∏—Ç–∏ –≤–µ—Å—å –±–ª–æ–∫
                backgroundPosition: 'center', // –¶–µ–Ω—Ç—Ä—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                height: '100%', // –ó–∞–π–Ω—è—Ç–∏ –≤—Å—é –≤–∏—Å–æ—Ç—É –≤—ñ–∫–Ω–∞
                color: "#fff", // –¢–µ–∫—Å—Ç –Ω–∞–≤–∫–æ–ª–æ, —â–æ–± –±—É—Ç–∏ –±—ñ–ª—ñ—à–∏–º –Ω–∞ —Ñ–æ–Ω—ñ
              }}
            >
              <p
                style={{
                  fontSize: "0.8rem",
                  color: "#ddd",
                  textAlign: "center",
                  marginTop: "0px",
                  maxWidth: "600px",
                  background: "rgba(0, 0, 0, 0.59)",
                  padding: "5px",
                  animation: "fadeIn 3s ease forwards",
                }}
              >
                –¶–µ –º—ñ—Å—Ü–µ –Ω–µ –¥–ª—è —Ç–µ–±–µ, —Ç—É—Ç —Å–ø—Ä–∞–≤–∂–Ω—ñ –≥–µ—Ä–æ—ó!
              </p>
            </div>
          </Placeholder>
          <Placeholder style={{
            display: "flex",
            flexDirection: "column",
            alignItems: "center",
            justifyContent: "center",
            animation: "fadeIn 1s ease forwards",
            marginTop: "-40px",
          }} >
            <div
              className="page"
              style={{
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                justifyContent: "center",
                marginTop: "20px",
                animation: "fadeIn 1s ease forwards",
              }}
            >
              <h1
                style={{
                  fontSize: "1rem",
                  fontWeight: "bold",
                  textAlign: "center",
                  lineHeight: "1",
                  color: "#fff",
                }}
              >
                –î–æ—Å—Ç—É–ø–Ω–æ –∑ 12 —Ä—ñ–≤–Ω—è
              </h1>
              <h1
                style={{
                  
                  fontSize: "1rem",
                  fontWeight: "bold",
                  textAlign: "center",
                  lineHeight: "1",
                  color: "#fff",
                  marginTop: "40px",
                }}
              >
                –í–∞—à —Ä—ñ–≤–µ–Ω—å: Lv. {level}
              </h1>
            </div>
          </Placeholder>
        </Page>
      ); 
    case "alleyofheroes":
      return (
        <Page back>
          <Placeholder>
            <h1
                style={{
                  fontSize: "2rem",
                  fontWeight: "bold",
                  marginTop: "50px",
                  textAlign: "center",
                  lineHeight: "1",
                  color: "#fff",
                }}
              >
                –ê–õ–ï–Ø –ì–ï–†–û–á–í
              </h1>
            <div
              className="page"
              style={{
                backgroundImage: `url(${alleyofheroesnbg.src})`, 
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                justifyContent: "center",
                animation: "fadeIn 1s ease forwards",
                backgroundSize: 'cover', // –ü–æ–∫—Ä–∏—Ç–∏ –≤–µ—Å—å –±–ª–æ–∫
                backgroundPosition: 'center', // –¶–µ–Ω—Ç—Ä—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                height: '100%', // –ó–∞–π–Ω—è—Ç–∏ –≤—Å—é –≤–∏—Å–æ—Ç—É –≤—ñ–∫–Ω–∞
                color: "#fff", // –¢–µ–∫—Å—Ç –Ω–∞–≤–∫–æ–ª–æ, —â–æ–± –±—É—Ç–∏ –±—ñ–ª—ñ—à–∏–º –Ω–∞ —Ñ–æ–Ω—ñ
              }}
            >
              <p
                style={{
                  fontSize: "0.8rem",
                  color: "#ddd",
                  textAlign: "center",
                  marginTop: "0px",
                  maxWidth: "600px",
                  background: "rgba(0, 0, 0, 0.59)",
                  padding: "5px",
                  animation: "fadeIn 3s ease forwards",
                }}
              >
                –í—à–∞–Ω—É–π–º–æ —à–ª—è—Ö–µ—Ç–Ω–∏—Ö –≥–µ—Ä–æ—ó–≤ —Ç–∞ —ó—Ö–Ω—ñ –ø–æ–¥–≤–∏–≥–∏!
              </p>
            </div>
          </Placeholder>
          <Placeholder style={{
            display: "flex",
            flexDirection: "column",
            alignItems: "center",
            justifyContent: "center",
            animation: "fadeIn 1s ease forwards",
            marginTop: "-40px",
          }}>
            {/* –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É –≥—Ä–∞–≤—Ü—ñ–≤ */}
            {players.map((player, index) => {
              // –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–æ–ª—ñ—Ä –±–æ—Ä–¥–µ—Ä–∞ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –ø–æ–∑–∏—Ü—ñ—ó
              let borderColor;

              if (index === 0) {
                borderColor = "rgb(255, 152, 0)"; // –î–ª—è ‚Ññ1
              } else if (index >= 1 && index <= 4) {
                borderColor = "rgb(156, 39, 176)"; // –î–ª—è ‚Ññ2 - 5
              } else if (index >= 5 && index <= 9) {
                borderColor = "rgb(33, 150, 243)"; // –î–ª—è ‚Ññ6 - 10
              } else if (index >= 10 && index <= 19) {
                borderColor = "rgb(76, 175, 80)"; // –î–ª—è ‚Ññ1 - 20
              } else {
                borderColor = "rgb(143, 143, 143)"; // –î–ª—è ‚Ññ1 - 20
              }
              

              return (
                <div
                  key={player.id}
                  className="page"
                  style={{
                    border: `1px solid ${borderColor}`,
                    background: "rgba(0, 0, 0, 0.52)",
                    display: "flex",
                    flexDirection: "row",
                    justifyContent: "center",
                    alignItems: "center",
                    marginTop: "10px",
                    animation: "fadeIn 1s ease forwards",
                    gap: "30px",
                    padding: 10,
                  }}
                >
                  <h1
                    style={{
                      fontSize: "1rem",
                      fontWeight: "bold",
                      textAlign: "center",
                      lineHeight: "1",
                      color: "#fff",
                    }}
                  >
                    ‚Ññ{index + 1}
                  </h1>
                  <h1
                    style={{
                      fontSize: "1rem",
                      fontWeight: "bold",
                      textAlign: "center",
                      lineHeight: "1",
                      color: "#fff",
                    }}
                  >
                    {player.first_name}
                  </h1>
                  <h1
                    style={{
                      fontSize: "0.9rem",
                      fontWeight: "bold",
                      textAlign: "center",
                      lineHeight: "1",
                      color: "#fff",
                    }}
                  >
                    Lv. {player.level}
                  </h1>
                </div>
              );
            })}
          </Placeholder>
        </Page>
      ); 
    case "home":
      const equippedItems = inventory.filter(item => item.equipped);
      const unequippedItems = inventory.filter(item => !item.equipped);
      return (
        <Page back >
          <Placeholder style={{
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                justifyContent: "center",
                marginTop: "-10px",
                animation: "fadeIn 0.6s ease forwards",
                paddingInline: 10,
              }}>
            <div
              className="page"
              style={{
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                justifyContent: "center",
                marginTop: "40px",
                animation: "fadeIn 0.6s ease forwards",
              }}
            >
              <h1 style={{ 
                fontSize: "2rem", 
                fontWeight: "bold", 
                marginBottom: "30px", 
                marginTop: "0px",
                textAlign: "center", 
                color: "#fff", 
                lineHeight: "1" }}>
                  –î–Ü–ú
              </h1>
              <div>
                <p
                  style={{
                    fontSize: "0.8rem",
                    fontWeight: "lighter",
                    fontFamily: "Arial, sans-serif",
                    fontVariantEmoji: "emoji",
                    color: "#ddd",
                    position: "absolute",
                    top: "-5px", // –ü–æ–∑–∏—Ü—ñ–æ–Ω—É—î–º–æ –≤—ñ–¥–Ω–æ—Å–Ω–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ div –∑ relative
                    right: "15px", // –ü–æ–∑–∏—Ü—ñ–æ–Ω—É—î–º–æ –≤—ñ–¥–Ω–æ—Å–Ω–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ div –∑ relative
                    background: "rgba(0, 0, 0, 0.35)",
                    borderRadius: "50px",
                    padding: "5px",
                    width: "10px",
                    height: "10px",
                    zIndex: 20, // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ "?" –ø–æ–≤–µ—Ä—Ö —Ç—É–ª—Ç—ñ–ø–∞, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
                    cursor: "help", // –ó–º—ñ–Ω—é—î–º–æ –∫—É—Ä—Å–æ—Ä –Ω–∞ –∑–Ω–∞–∫ –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –ø—ñ–¥–∫–∞–∑–∫–∏
                  }}
                  onMouseEnter={() => setShowTooltip(true)}
                  onMouseLeave={() => setShowTooltip(false)}
                >
                  ?
                </p>
                {showTooltip && ( // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Ç—É–ª—Ç—ñ–ø —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ showTooltip === true
                <div
                  style={{
                    position: "absolute", // –ê–±—Å–æ–ª—é—Ç–Ω–µ –ø–æ–∑–∏—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–¥–Ω–æ—Å–Ω–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ div –∑ relative
                    top: "20px", // –í—ñ–¥—Å—Ç—É–ø –∑–≤–µ—Ä—Ö—É –≤—ñ–¥ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ div (–º–æ–∂–ª–∏–≤–æ, –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—ñ–¥–ª–∞—à—Ç—É–≤–∞—Ç–∏)
                    right: "30px", // –ü–æ–∑–∏—Ü—ñ–æ–Ω—É—î–º–æ –ø—Ä–∞–≤–æ—Ä—É—á –≤—ñ–¥ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ div (–º–æ–∂–ª–∏–≤–æ, –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—ñ–¥–ª–∞—à—Ç—É–≤–∞—Ç–∏)
                    // –ú–æ–∂–Ω–∞ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –ø–æ–∑–∏—Ü—ñ–æ–Ω—É–≤–∞—Ç–∏ –ª—ñ–≤–æ—Ä—É—á, —è–∫—â–æ –ø—Ä–∞–≤–æ—Ä—É—á –∑–∞–≤–∞–∂–∞—î:
                    // left: "0px",
                    // top: "20px",
                    background: "rgba(0, 0, 0, 0.85)", // –¢–µ–º–Ω–∏–π –Ω–∞–ø—ñ–≤–ø—Ä–æ–∑–æ—Ä–∏–π —Ñ–æ–Ω
                    color: "#fff", // –ë—ñ–ª–∏–π —Ç–µ–∫—Å—Ç
                    padding: "8px 12px", // –í–Ω—É—Ç—Ä—ñ—à–Ω—ñ –≤—ñ–¥—Å—Ç—É–ø–∏
                    borderRadius: "8px", // –ó–∞–∫—Ä—É–≥–ª–µ–Ω—ñ –∫—É—Ç–∏
                    whiteSpace: "normal", // –î–æ–∑–≤–æ–ª—è—î–º–æ —Ç–µ–∫—Å—Ç—É –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç–∏—Å—å –Ω–∞ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫
                    maxWidth: "300px", // –û–±–º–µ–∂—É—î–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É —à–∏—Ä–∏–Ω—É —Ç—É–ª—Ç—ñ–ø–∞
                    zIndex: 15, // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ —Ç—É–ª—Ç—ñ–ø –ø—ñ–¥ "?" –∞–ª–µ –ø–æ–≤–µ—Ä—Ö —ñ–Ω—à–æ–≥–æ –≤–º—ñ—Å—Ç—É
                    pointerEvents: "none", // –¢—É–ª—Ç—ñ–ø –Ω–µ –ø–µ—Ä–µ—Ö–æ–ø–ª—é—î –ø–æ–¥—ñ—ó –º–∏—à—ñ
                    fontSize: "0.9rem", // –†–æ–∑–º—ñ—Ä —à—Ä–∏—Ñ—Ç—É
                    lineHeight: "1.3", // –ú—ñ–∂—Ä—è–¥–∫–æ–≤–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª
                    textAlign: "left", // –í–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
                    transform: 'translateX(5%)', // –ù–µ–≤–µ–ª–∏—á–∫–∏–π –∑—Å—É–≤ –ø—Ä–∞–≤–æ—Ä—É—á –≤—ñ–¥ –ø—Ä–∞–≤–æ—ó –º–µ–∂—ñ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ –±–ª–æ–∫—É
                    // –Ø–∫—â–æ –ø–æ–∑–∏—Ü—ñ–æ–Ω—É–≤–∞–ª–∏ –ª—ñ–≤–æ—Ä—É—á: transform: 'translateX(-105%)', // –ó—Å—É–≤ –ª—ñ–≤–æ—Ä—É—á –≤—ñ–¥ –ª—ñ–≤–æ—ó –º–µ–∂—ñ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ –±–ª–æ–∫—É
                  }}
                >
                  –¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Å–≤–æ–≥–æ –≥–µ—Ä–æ—è, —Ç–∞ –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –¥–æ –ø—Ä–∏–≥–æ–¥.
                </div>
              )}
              </div>

              <Card className="page">
                <div style={{
                  display: "flex",
                  flexDirection: "row",
                  justifyContent: "center",
                  alignItems: "center",
                  marginBottom: -30,
                  gap: "30px",
                  padding: 10,
                  color: "#fff",
                  animation: "fadeIn 0.6s ease forwards",
                }}>
                  <p>{username}</p><p>Lv. {level}</p>
                </div>

                {/* –î–æ—Å–≤—ñ–¥ */}
                <div style={{
                  display: "flex",
                  flexDirection: "row",
                  justifyContent: "center",
                  alignItems: "center",
                  fontSize: 10,
                  gap: "10px",
                  padding: 10,
                  color: "#fff",
                  animation: "fadeIn 0.6s ease forwards",
                  }}>
                  <p>üî∑ XP :</p>
                  <strong>{experience} / {getRequiredExp(level)} üî∑</strong>
                </div>

                <div style={{
                  position: "relative",
                  display: "flex",
                  flexDirection: "column",
                  alignItems: "center",
                  justifyContent: "center",
                  marginTop: 10,
                  marginBottom: 30,
                  color: "#fff",
                  animation: "fadeIn 0.6s ease forwards",
                }}>
                  <img 
                    src="/hero/heroidle.png" 
                    alt="–ü–µ—Ä—Å–æ–Ω–∞–∂" 
                    style={{ width: 270, height: 270, objectFit: "contain" , marginRight:-50,
                      marginLeft: -30,
                    }}
                  />

                  {/* –°–ª–æ—Ç–∏ –¥–ª—è –µ–∫—ñ–ø—ñ—Ä–æ–≤–∫–∏ */}
                  <div style={{
                    position: "absolute",
                    top: "50%",
                    left: "0%",
                    transform: "translate(-80%, -50%)",
                    display: "grid",
                    gridTemplateColumns: "repeat(1, 1fr)",
                    gap: -10
                  }}>
                    <EquippedItemSlot
                      item={equippedItems.find(i => i.type === "weapon")}
                      fallbackIcon=""
                      size={25}
                      onClick={() => {
                        const item = equippedItems.find(i => i.type === "weapon");
                        if (item) setSelectedItem({ ...item, mode: "equipped" });
                      }}
                    />

                    <EquippedItemSlot
                      item={equippedItems.find(i => i.type === "shield")}
                      fallbackIcon=""
                      size={25}
                      onClick={() => {
                        const item = equippedItems.find(i => i.type === "shield");
                        if (item) setSelectedItem({ ...item, mode: "equipped" });
                      }}
                    />
                  </div>
                </div>
                <div
                  style={{
                    display: "flex",
                    flexDirection: "row",
                    justifyContent: "center",
                    alignItems: "center",
                    gap: "30px",
                    padding: 10,
                    color: "#fff",
                    animation: "fadeIn 0.6s ease forwards",
                    marginLeft: 20,
                  }}
                >
                  <div style={{ display: "flex", justifyContent: "space-between", width: "100%" }}>
                    <span>‚ù§Ô∏è </span>
                    <span>{heroStats.health}</span>
                  </div>
                  <div style={{ display: "flex", justifyContent: "space-between", width: "100%" }}>
                    <span>üó°Ô∏è </span>
                    <span>{heroStats.attack}</span>
                  </div>
                  <div style={{ display: "flex", justifyContent: "space-between", width: "100%" }}>
                    <span>üõ°Ô∏è</span>
                    <span>{heroStats.defense}</span>
                  </div>
                </div>

                <div
                    style={{
                      display: "flex",
                      flexDirection: "row",
                      justifyContent: "center",
                      alignItems: "center",
                      marginTop:20,
                      fontSize: 5,
                      gap: "20px",
                      padding:10,
                      color: "#fff",
                      animation: "fadeIn 0.6s ease forwards",
                    }}
                    >

                    <Button onClick={() => setActiveTab("abilities")} style={{
                    border:"1px solid rgb(99, 99, 99)",
                    backgroundColor:"rgba(0, 0, 0, 0)",
                    borderRadius: 8,
                    }}>
                      <p style={{ fontSize: 12, }} >
                        –ó–¥—ñ–±–Ω–æ—Å—Ç—ñ
                      </p>
                      <span
                        style={{
                          position: 'absolute',
                          top: -5,
                          right: -4,
                          width: 8,
                          height: 8,
                          backgroundColor: '#ff3b30',
                          borderRadius: '50%',
                          border: '1px solid white',
                        }}
                      />
                    </Button>
                    <Link href="/home/profile">
                      <Button style={{
                        border:"1px solid rgb(99, 99, 99)",
                        backgroundColor:"rgba(0, 0, 0, 0)",
                        borderRadius: 8,
                        }}>
                        üìú
                      </Button>
                    </Link>
                    <Button onClick={() => setActiveTab("task")} style={{
                    border:"1px solid rgb(99, 99, 99)",
                    backgroundColor:"rgba(0, 0, 0, 0)",
                    borderRadius: 8,
                    }}>
                      <p style={{ fontSize: 12, }} >
                        –ó–∞–≤–¥–∞–Ω–Ω—è
                      </p>
                      <span
                        style={{
                          position: 'absolute',
                          top: -5,
                          right: -4,
                          width: 8,
                          height: 8,
                          backgroundColor: '#ff3b30',
                          borderRadius: '50%',
                          border: '1px solid white',
                        }}
                      />
                    </Button>
                </div>
              </Card>

                <h2
                  style={{
                    fontSize: "1rem",
                    fontWeight: "bold",
                    marginTop: "50px",
                    marginBottom: "40px",
                    textAlign: "center",
                    color: "#fff",
                  }}
                >
                  –Ü–ù–í–ï–ù–¢–ê–†
                </h2>

                <div
                  style={{
                    display: "grid",
                    gridTemplateColumns: "repeat(auto-fill, minmax(100px, 1fr))", // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞ —Å—ñ—Ç–∫–∞
                    gap: "20px", // –í—ñ–¥—Å—Ç—É–ø –º—ñ–∂ –∫–∞—Ä—Ç–∫–∞–º–∏
                    width: "100%",
                    margin: "0 auto",
                  }}
                >
                  {/* –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —ñ–Ω–≤–µ–Ω—Ç–∞—Ä */}
                  {inventory.length === 0 && (
                    <p
                      style={{
                        fontSize: "1rem",
                        fontWeight: "lighter",
                        color: "#ccc",
                        textAlign: "center",
                        marginBottom: "20px",
                        lineHeight: "1.4",
                        fontFamily: "Arial, sans-serif",
                        maxWidth: "100%",
                        gridColumn: "1 / -1", // –†–æ–∑—Ç—è–≥–Ω—É—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É —Å—ñ—Ç–∫–∏
                      }}
                    >
                      –Ü–Ω–≤–µ–Ω—Ç–∞—Ä –ø–æ—Ä–æ–∂–Ω—ñ–π ‚Äî –∫—É–ø—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω—ñ!
                    </p>
                  )}

                  {/* –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –æ–¥–Ω–∞–∫–æ–≤–∏—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ —É —Å—Ç–µ–∫–∏ */}
                  {stackItems(unequippedItems).map((item, index) => (
                    <InventoryItemSlot
                      key={`${item.type}-${index}`} // –ö–ª—é—á –±–∞–∑—É—î—Ç—å—Å—è –Ω–∞ —Ç–∏–ø—ñ —Ç–∞ —ñ–Ω–¥–µ–∫—Å—ñ
                      item={item}
                      index={index}
                      fallbackIcon=""
                      onClick={() => {
                        if (item) setSelectedItem({ 
                          ...item, 
                          mode: "inventory",
                          damage: item.damage !== undefined ? String(item.damage) : undefined,
                          defense: item.defense !== undefined ? String(item.defense) : undefined,
                          strength: item.strength !== undefined ? String(item.strength) : undefined,
                        });
                      }}
                      onEquipToggle={() => toggleEquip(index)}
                    />
                  ))}
                </div>
              </div>
          </Placeholder>
        </Page>
      );
      case "abilities":
      return (
        <Page back >
          <Placeholder style={{
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                justifyContent: "center",
                marginTop: "-10px",
                animation: "fadeIn 0.6s ease forwards",
                paddingInline: 10,
              }}>
            <div
              className="page"
              style={{
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                justifyContent: "center",
                marginTop: "40px",
                animation: "fadeIn 0.6s ease forwards",
              }}
            >
              <h1 style={{ 
                fontSize: "1rem", 
                fontWeight: "bold", 
                marginBottom: "20px", 
                marginTop: "20px",
                textAlign: "center", 
                color: "#fff", 
                lineHeight: "1" }}>
                  –ó–î–Ü–ë–ù–û–°–¢–Ü
              </h1>
            </div>
            <div
              className="page"
              style={{
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                justifyContent: "center",
                marginTop: "10px",
                animation: "fadeIn 0.6s ease forwards",
              }}
            >
              <h1 style={{ 
                fontSize: "1rem", 
                fontWeight: "bold", 
                marginBottom: "50px", 
                marginTop: "50px",
                textAlign: "center", 
                color: "#fff", 
                lineHeight: "1" }}>
                  –í —Ä–æ–∑–±—Ä–æ–±—Ü—ñ
              </h1>
            </div>
          </Placeholder>
        </Page>
      );
      case "task":
      return (
        <Page back >
          <Placeholder style={{
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                justifyContent: "center",
                marginTop: "-10px",
                animation: "fadeIn 0.6s ease forwards",
                paddingInline: 10,
              }}>
            <div
              className="page"
              style={{
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                justifyContent: "center",
                marginTop: "40px",
                animation: "fadeIn 0.6s ease forwards",
              }}
            >
              <h1 style={{ 
                fontSize: "1rem", 
                fontWeight: "bold", 
                marginBottom: "20px", 
                marginTop: "20px",
                textAlign: "center", 
                color: "#fff", 
                lineHeight: "1" }}>
                  –ó–ê–í–î–ê–ù–ù–Ø
              </h1>
            </div>
            <div
              className="page"
              style={{
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                justifyContent: "center",
                marginTop: "10px",
                animation: "fadeIn 0.6s ease forwards",
              }}
            >
              <h1 style={{ 
                fontSize: "1rem", 
                fontWeight: "bold", 
                marginBottom: "50px", 
                marginTop: "50px",
                textAlign: "center", 
                color: "#fff", 
                lineHeight: "1" }}>
                  –í —Ä–æ–±—Ä–æ–±—Ü—ñ
              </h1>
            </div>
          </Placeholder>
        </Page>
      );
    case "adventures":
      return (
        <div>
          <Placeholder className="HIJtihMA8FHczS02iWF5"
          style={{ overflow: "visible" }}
          onClick={handleClick}>
            
            <div
              className="page"
              style={{
                display: "flex",
                flexDirection: "row",
                alignItems: "center",
                justifyContent: "center",
                marginTop: "50px",
                width: "100%",
                height: "100px",
                paddingBottom: 40,
                paddingTop: 40,
                animation: "fadeIn 0.5s ease forwards",
              }}
            >
               <div>
                  <p 
                    style={{  
                      fontSize: "0.8rem",
                      fontWeight: "lighter",
                      fontFamily: "Arial, sans-serif",
                      fontVariantEmoji: "emoji",
                      color: "#ddd",
                      position: "absolute",
                      top: "-5px",
                      right: "10px",
                      background: "rgba(0, 0, 0, 0.35)",
                      borderRadius: "50px",
                      padding: "5px",
                      width: "10px",
                      height: "10px",
                    }}
                    onMouseEnter={() => setShowTooltip(true)}
                    onMouseLeave={() => setShowTooltip(false)}
                    >
                    ?
                  </p>
                  {showTooltip && ( // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Ç—É–ª—Ç—ñ–ø —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ showTooltip === true
                  <div
                    style={{
                      position: "absolute", // –ê–±—Å–æ–ª—é—Ç–Ω–µ –ø–æ–∑–∏—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–¥–Ω–æ—Å–Ω–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ div –∑ relative
                      top: "20px", // –í—ñ–¥—Å—Ç—É–ø –∑–≤–µ—Ä—Ö—É –≤—ñ–¥ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ div (–º–æ–∂–ª–∏–≤–æ, –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—ñ–¥–ª–∞—à—Ç—É–≤–∞—Ç–∏)
                      right: "30px", // –ü–æ–∑–∏—Ü—ñ–æ–Ω—É—î–º–æ –ø—Ä–∞–≤–æ—Ä—É—á –≤—ñ–¥ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ div (–º–æ–∂–ª–∏–≤–æ, –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—ñ–¥–ª–∞—à—Ç—É–≤–∞—Ç–∏)
                      // –ú–æ–∂–Ω–∞ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –ø–æ–∑–∏—Ü—ñ–æ–Ω—É–≤–∞—Ç–∏ –ª—ñ–≤–æ—Ä—É—á, —è–∫—â–æ –ø—Ä–∞–≤–æ—Ä—É—á –∑–∞–≤–∞–∂–∞—î:
                      // left: "0px",
                      // top: "20px",
                      background: "rgba(0, 0, 0, 0.85)", // –¢–µ–º–Ω–∏–π –Ω–∞–ø—ñ–≤–ø—Ä–æ–∑–æ—Ä–∏–π —Ñ–æ–Ω
                      color: "#fff", // –ë—ñ–ª–∏–π —Ç–µ–∫—Å—Ç
                      padding: "8px 12px", // –í–Ω—É—Ç—Ä—ñ—à–Ω—ñ –≤—ñ–¥—Å—Ç—É–ø–∏
                      borderRadius: "8px", // –ó–∞–∫—Ä—É–≥–ª–µ–Ω—ñ –∫—É—Ç–∏
                      whiteSpace: "normal", // –î–æ–∑–≤–æ–ª—è—î–º–æ —Ç–µ–∫—Å—Ç—É –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç–∏—Å—å –Ω–∞ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫
                      maxWidth: "300px", // –û–±–º–µ–∂—É—î–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É —à–∏—Ä–∏–Ω—É —Ç—É–ª—Ç—ñ–ø–∞
                      zIndex: 15, // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ —Ç—É–ª—Ç—ñ–ø –ø—ñ–¥ "?" –∞–ª–µ –ø–æ–≤–µ—Ä—Ö —ñ–Ω—à–æ–≥–æ –≤–º—ñ—Å—Ç—É
                      pointerEvents: "none", // –¢—É–ª—Ç—ñ–ø –Ω–µ –ø–µ—Ä–µ—Ö–æ–ø–ª—é—î –ø–æ–¥—ñ—ó –º–∏—à—ñ
                      fontSize: "0.9rem", // –†–æ–∑–º—ñ—Ä —à—Ä–∏—Ñ—Ç—É
                      lineHeight: "1.3", // –ú—ñ–∂—Ä—è–¥–∫–æ–≤–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª
                      textAlign: "left", // –í–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
                      transform: 'translateX(5%)', // –ù–µ–≤–µ–ª–∏—á–∫–∏–π –∑—Å—É–≤ –ø—Ä–∞–≤–æ—Ä—É—á –≤—ñ–¥ –ø—Ä–∞–≤–æ—ó –º–µ–∂—ñ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ –±–ª–æ–∫—É
                      // –Ø–∫—â–æ –ø–æ–∑–∏—Ü—ñ–æ–Ω—É–≤–∞–ª–∏ –ª—ñ–≤–æ—Ä—É—á: transform: 'translateX(-105%)', // –ó—Å—É–≤ –ª—ñ–≤–æ—Ä—É—á –≤—ñ–¥ –ª—ñ–≤–æ—ó –º–µ–∂—ñ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ –±–ª–æ–∫—É
                    }}
                  >
                    –¶–µ –≤–∞—à–µ –º—ñ—Å—Ü–µ —Å–∏–ª, —Ç—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏  –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Ä–µ—Å—É—Ä—Å–∏ —Ç–∞ –µ–Ω–µ—Ä–≥—ñ—é.
                  </div>
                )}
                </div>
              <div
                className="imgWrap"
                style={{
                  position: "relative",
                  flexDirection: "column",
                  display: "flex",
                  justifyContent: "center",
                  alignItems: "center",
                  overflow: "visible",
                  marginTop: "0px",
                  width: "80%",
                  height: "80%",
                }}
              >
                <Image
                  className="blue"
                  alt="Artilith Logo Blue"
                  src={victim}
                  width= {65}
                  height={65}
                  style={{
                    width: "auto",
                    height: "auto",
                    maxWidth: "200px",
                  }}
                />
                <p
                style={{
                  fontSize: "0.9rem",
                  fontWeight: "lighter",
                  color: "#ccc",
                  textAlign: "center",
                  fontFamily: "Arial, sans-serif",
                  marginTop: "200px",
                }}
              >
              </p>
              </div>
              <div>
                  <span style={{
                  position: "relative",
                  flexDirection: "row",
                  display: "flex",
                  justifyContent: "center",
                  alignItems: "center",
                  overflow: "visible",
                  marginBottom: "20px",
                  width: "155px",
                  height: "100%",
                }} >
                 5üî∑ 2‚ö° 2ü™®
                </span> 
                <Link href="" style={{
                  fontSize: "0.6rem",
                  fontWeight: "lighter",
                  color: "#fff",
                  textAlign: "center",
                  lineHeight: "1",
                  fontFamily: "Arial, sans-serif",
                  marginLeft: "auto",
                }}>
                  <Button style={{
                  fontSize: "16px",
                  fontWeight: "lighter",
                  color: "#fff",
                  backgroundColor: "#4caf50",
                  textAlign: "center",
                  lineHeight: "1",
                  fontFamily: "Arial, sans-serif",
                  marginLeft: "auto",
                  animation: "fadeIn 0.5s ease forwards",
                }} onClick={() => router.push("/home/battle")}
                  >
                    <p style={{
                  fontSize: "12px",}}>{countdown > 0 ? `${formatTime(countdown)}` : "–û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞—Ä–∏!"}</p>
                  </Button>
                </Link>
              </div>
            </div>
          </Placeholder>
          <Placeholder>
            <div
              className="page"
              style={{
                display: "flex",
                flexDirection: "row",
                alignItems: "center",
                justifyContent: "center",
                marginTop: "0px",
                width: "100%",
                height: "100px",
                paddingBottom: 40,
                paddingTop: 40,
                animation: "fadeIn 0.5s ease forwards",
              }}
            >
              <div>
                <p 
                  style={{  
                    fontSize: "0.8rem",
                    fontWeight: "lighter",
                    fontFamily: "Arial, sans-serif",
                    fontVariantEmoji: "emoji",
                    color: "#ddd",
                    position: "absolute",
                    top: "-5px",
                    right: "10px",
                    background: "rgba(0, 0, 0, 0.35)",
                    borderRadius: "50px",
                    padding: "5px",
                    width: "10px",
                    height: "10px",
                  }}>
                  ?
                </p>
              </div>
              <div
                className="imgWrap"
                style={{
                  position: "relative",
                  flexDirection: "column",
                  display: "flex",
                  justifyContent: "center",
                  alignItems: "center",
                  overflow: "visible",
                  marginTop: "0px",
                  width: "80%",
                  height: "80%",
                }}
              >
                <Image
                  className="blue"
                  alt="Artilith Logo Blue"
                  src={travel}
                  width= {65}
                  height={65}
                  style={{
                    width: "auto",
                    height: "auto",
                    maxWidth: "200px",
                  }}
                />
              </div>
              <div style={{
                  fontSize: "16px",}}>
                  <span style={{
                  position: "relative",
                  flexDirection: "row",
                  display: "flex",
                  justifyContent: "center",
                  alignItems: "center",
                  overflow: "visible",
                  marginBottom: "20px",
                  width: "100%",
                  height: "100%",
                }} >
                 +ü™® +üî∑ -1‚ö°
                </span>
                  <Button style={{
                  fontSize: "16px",
                  fontWeight: "lighter",
                  color: "#fff",
                  backgroundColor: "#4caf50",
                  textAlign: "center",
                  lineHeight: "1",
                  fontFamily: "Arial, sans-serif",
                  marginLeft: "auto",
                  animation: "fadeIn 0.5s ease forwards",
                }} onClick={() => router.push("/home/battle")}
                  >
                    <p style={{
                  fontSize: "12px",}}>‚öîÔ∏è –í –ø–æ–¥–æ—Ä–æ–∂ ‚öîÔ∏è</p>
                  </Button>
              </div>
            </div>
          </Placeholder>
        </div>
      );
    default:
      return null;
  }
  };

  async function handleEquip(selectedItem: { mode: "city" | "inventory" | "equipped"| "sweapon"| "sshield"| "sscroll"; item_id: number; type: string; name: string; image: string; description: string; damage?: string; strength?: string; price: number; }) {
    if (!userId) {
      toast.error("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!");
      return;
    }

    // –ó–Ω–∞–π—Ç–∏ —ñ–Ω–¥–µ–∫—Å –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ inventory
    const index = inventory.findIndex(
      (item) => item.item_id === selectedItem.item_id && !item.equipped
    );
    if (index === -1) {
      toast.error("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ!");
      return;
    }

    // –ó–Ω—è—Ç–∏ –≤—Å—ñ –ø—Ä–µ–¥–º–µ—Ç–∏ —Ç–∞–∫–æ–≥–æ —Ç–∏–ø—É
    const idsToUnequip = inventory
      .filter(item => item.type === selectedItem.type && item.equipped)
      .map(item => item.id);

    if (idsToUnequip.length > 0) {
      await supabase
        .from('inventory')
        .update({ equipped: false })
        .eq('user_id', userId)
        .in('id', idsToUnequip);
    }

    // –ï–∫—ñ–ø—ñ—Ä—É–≤–∞—Ç–∏ –≤–∏–±—Ä–∞–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç
    await supabase
      .from('inventory')
      .update({ equipped: true })
      .eq('user_id', userId)
      .eq('id', inventory[index].id);

    toast.success(`–í–∏ –µ–∫—ñ–ø—ñ—Ä—É–≤–∞–ª–∏ ${selectedItem.name}!`);
    await fetchInventory();
  }

  async function handleDismantle(selectedItem: { mode: "city" | "inventory" | "equipped"| "sweapon"| "sshield"| "sscroll"; item_id: number; type: string; name: string; image: string; description: string; damage?: string; strength?: string; price: number; }) {
    if (!userId) {
      toast.error("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!");
      return;
    }

    // –ó–Ω–∞–π—Ç–∏ —ñ–Ω—Å—Ç–∞–Ω—Å –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ inventory
    const itemInstance = inventory.find(
      (item) => item.item_id === selectedItem.item_id && !item.equipped
    );
    if (!itemInstance) {
      toast.error("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ!");
      return;
    }

    // –í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç –∑ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è
    const { error } = await supabase
      .from("inventory")
      .delete()
      .eq("user_id", userId)
      .eq("id", itemInstance.id);

    if (error) {
      toast.error("–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç!");
      return;
    }

    // –î–∞—Ç–∏ –≥—Ä–∞–≤—Ü—é —á–∞—Å—Ç–∏–Ω—É —Ü—ñ–Ω–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 50%)
    const dismantleReward = Math.floor(selectedItem.price * 0.5);
    const newPoints = points + dismantleReward;

    await updateUserPoints(String(userId), newPoints);
    setPoints(newPoints);

    toast.success(`–í–∏ —Ä–æ–∑—ñ–±—Ä–∞–ª–∏ ${selectedItem.name} —Ç–∞ –æ—Ç—Ä–∏–º–∞–ª–∏ ${dismantleReward} —É–ª–∞–º–∫—ñ–≤!`);
    await fetchInventory();
  }

  async function handleUnequip(selectedItem: { mode: "city" | "inventory" | "equipped" | "sweapon"| "sshield"| "sscroll"; item_id: number; type: string; name: string; image: string; description: string; damage?: string; strength?: string; price: number; }) {
    if (!userId) {
      toast.error("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!");
      return;
    }

    // –ó–Ω–∞–π—Ç–∏ —ñ–Ω—Å—Ç–∞–Ω—Å –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ inventory, —è–∫–∏–π –µ–∫—ñ–ø—ñ—Ä–æ–≤–∞–Ω–æ
    const itemInstance = inventory.find(
      (item) => item.item_id === selectedItem.item_id && item.equipped
    );
    if (!itemInstance) {
      toast.error("–ï–∫—ñ–ø—ñ—Ä–æ–≤–∞–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!");
      return;
    }

    // –ó–Ω—è—Ç–∏ –µ–∫—ñ–ø—ñ—Ä–æ–≤–∫—É
    const { error } = await supabase
      .from("inventory")
      .update({ equipped: false })
      .eq("user_id", userId)
      .eq("id", itemInstance.id);

    if (error) {
      toast.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω—è—Ç–∏ –µ–∫—ñ–ø—ñ—Ä–æ–≤–∫—É!");
      return;
    }

    toast.success(`–í–∏ –∑–Ω—è–ª–∏ ${selectedItem.name}!`);
    await fetchInventory();
  }

  return (
    <Page back={false}>
      <List>
        <TopBar points={points} energy={energy} setEnergy={setEnergy} />
        <div style={{ paddingBottom: 100 }}>{renderContent()}</div>
        {selectedItem && (
          <div className="modal-overlay" onClick={() => setSelectedItem(null)}>
            
              
              {selectedItem.mode === "city" && (
                <div
                  onClick={(e) => e.stopPropagation()}
                  style={{
                    backgroundImage: `url('/bg/Cardbg1.png')`,
                    backgroundSize: 'cover',
                    backgroundPosition: 'center',
                    backgroundRepeat: 'no-repeat',
                    padding: "0px",
                    borderRadius: "10px",
                    color: "#fff",
                    maxWidth: "300px",
                    width: "100%",
                    minHeight: "450px", // –¥–æ–¥–∞–Ω–æ!
                    textAlign: "center",
                    filter: "drop-shadow(0 0px 40px rgb(255, 255, 255))",
                  }}
                >
                   <div 
                    style={{
                      position: "relative",
                      flexDirection: "row",
                      display: "flex",
                      justifyContent: "center",
                      alignItems: "center",
                      overflow: "visible",
                      width: "100%",
                      height: "100%",
                      gap: "69%",
                    }} >
                    <p className={` rarity-font-${selectedItem.rarity?.toLowerCase()}`} 
                      style={{  
                        fontSize: "1rem",
                        fontWeight: "bolder",
                        fontFamily: "Arial, sans-serif",
                        position: "inherit",
                        padding: "4px",
                        marginTop:"30px",
                        borderRadius: "25px",
                        alignItems: "center",
                        background: "rgba(0, 0, 0, 0.5)",
                        cursor: "default",
                      }}>
                        +0
                    </p>
                    <p onClick={() => setSelectedItem(null)}
                      style={{  
                        fontSize: "1rem",
                        fontWeight: "bolder",
                        fontFamily: "Arial, sans-serif",
                        position: "inherit",
                        padding: "4px",
                        paddingInline: "8px",
                        marginTop:"30px",
                        borderRadius: "25px",
                        alignItems: "center",
                        background: "rgba(0, 0, 0, 0.5)",
                        cursor: "pointer",
                      }}>
                        x
                    </p>
                  </div>
                  <h2 className={` rarity-font-${selectedItem.rarity?.toLowerCase()}`} style={{ fontSize: "1.2rem", marginBottom: "10px",marginTop:"-10px",cursor: "default", }}>{selectedItem.name}</h2>
                 
                  {selectedItem.image && (
                      <img 
                      src={typeof selectedItem.image === "string" ? selectedItem.image : (selectedItem.image as { src: string }).src}
                      alt={selectedItem.name}
                      style={{ width: "130px", height: "80px", objectFit: "contain", marginBottom: "10px", marginTop: "30px", boxShadow: "0 0 40 rgb(253, 253, 253)", borderRadius: "360px", filter: "drop-shadow(0 0px 22px rgb(255, 255, 255))" }}
                    />
                  )}

                  <p style={{ fontSize: "0.9rem", color: "#ccc", marginBottom: "20px" }}>
                    –¢–∏–ø: <strong>{selectedItem.type}</strong>
                  </p>
                  <p style={{ fontSize: "0.9rem", color: "#ccc", marginBottom: "20px" }}>
                    –†—ñ–¥–∫—ñ—Å—Ç—å: <strong>{selectedItem.rarity}</strong>
                  </p>
                  <p style={{ fontSize: "0.9rem", color: "#ccc", marginBottom: "20px" }}>
                    –®–∫–æ–¥–∞: <strong>{selectedItem.damage}</strong>
                  </p>
                  <p style={{ fontSize: "0.9rem", color: "#ccc", marginBottom: "67px" }}>
                    –ó–∞—Ö–∏—Å—Ç: <strong>{selectedItem.defense}</strong>
                  </p>
                <div onClick={(e) => e.stopPropagation()}>
                  <div 
                    style={{
                      position: "relative",
                      flexDirection: "row",
                      display: "flex",
                      justifyContent: "center",
                      alignItems: "center",
                      overflow: "visible",
                      width: "100%",
                      height: "100%",
                      gap: "25px",
                    }} 
                  >
                    <button onClick={() => {confirmBuy();setSelectedItem(null);}}
                      style={{
                        backgroundColor:"#4caf50",
                        color: "#fff",
                        border: "none",
                        padding: "10px",
                        fontSize: "14px",
                        cursor: "pointer",
                        transition: "background-color 0.3s",
                        width: "90%",
                        borderRadius:20,
                        marginTop: "-8px",
                        marginBottom:"28px",
                        marginLeft: "20px",
                      }}>
                        –¢–∞–∫</button>
                    <button onClick={() => setSelectedItem(null)}
                      style={{
                        backgroundColor:"#f44336",
                        color: "#fff",
                        border: "none",
                        padding: "10px",
                        fontSize: "14px",
                        cursor: "pointer",
                        transition: "background-color 0.3s",
                        width: "90%",
                        borderRadius:20,
                        marginTop: "-8px",
                        marginBottom:"28px",
                        marginRight: "20px",
                      }}>
                        –ù—ñ</button>

                  </div>
                </div>
                <p style={{ fontSize: "0.9rem", color: "#ccc", position:"absolute", bottom: "65px", left: "30%", transform: "translateX(-50%)", }}>
                    –¶—ñ–Ω–∞:
                  </p>
                  <p style={{ fontSize: "0.9rem", color: "#ccc", position:"absolute", bottom: "65px", left: "70%", transform: "translateX(-50%)", }}>
                    <strong>{selectedItem.price} ü™®</strong>
                  </p>
                </div> 
              )}

              {selectedItem.mode === "inventory" && (
                <div
                  onClick={(e) => e.stopPropagation()}
                  style={{
                    backgroundImage: `url('/bg/Cardbg1.png')`,
                    backgroundSize: 'cover',
                    backgroundPosition: 'center',
                    backgroundRepeat: 'no-repeat',
                    padding: "0px",
                    borderRadius: "10px",
                    color: "#fff",
                    maxWidth: "300px",
                    width: "100%",
                    minHeight: "450px", // –¥–æ–¥–∞–Ω–æ!
                    textAlign: "center",
                    filter: "drop-shadow(0 0px 40px rgb(255, 255, 255))",
                  }}
                >

                  <div 
                    style={{
                      position: "relative",
                      flexDirection: "row",
                      display: "flex",
                      justifyContent: "center",
                      alignItems: "center",
                      overflow: "visible",
                      width: "100%",
                      height: "100%",
                      gap: "69%",
                    }} >
                    <p className={` rarity-font-${selectedItem.rarity?.toLowerCase()}`} 
                      style={{  
                        fontSize: "1rem",
                        fontWeight: "bolder",
                        fontFamily: "Arial, sans-serif",
                        position: "inherit",
                        padding: "4px",
                        marginTop:"30px",
                        borderRadius: "25px",
                        alignItems: "center",
                        background: "rgba(0, 0, 0, 0.5)",
                        cursor: "default",
                      }}>
                        +{selectedItem.upgrade_level}
                    </p>
                    <p onClick={() => setSelectedItem(null)}
                      style={{  
                        fontSize: "1rem",
                        fontWeight: "bolder",
                        fontFamily: "Arial, sans-serif",
                        position: "inherit",
                        padding: "4px",
                        paddingInline: "8px",
                        marginTop:"30px",
                        borderRadius: "25px",
                        alignItems: "center",
                        background: "rgba(0, 0, 0, 0.5)",
                        cursor: "pointer",
                      }}>
                        x
                    </p>
                  </div>
                  <h2 className={` rarity-font-${selectedItem.rarity?.toLowerCase()}`} style={{ fontSize: "1.2rem", marginBottom: "10px",marginTop:"-10px",cursor: "default", }}>{selectedItem.name}</h2>
                 
                  {selectedItem.image && (
                      <img 
                      src={typeof selectedItem.image === "string" ? selectedItem.image : (selectedItem.image as { src: string }).src}
                      alt={selectedItem.name}
                      style={{ width: "130px", height: "80px", objectFit: "contain", marginBottom: "30px", marginTop: "30px", boxShadow: "0 0 40 rgb(253, 253, 253)", borderRadius: "360px", filter: "drop-shadow(0 0px 22px rgb(255, 255, 255))" }}
                    />
                  )}

                  <div style={{objectFit: "contain", marginBottom: "30px", marginTop: "10px", boxShadow: "0 0 40 rgba(253, 253, 253, 0.5)", borderRadius: "20px", border:"1px", cursor: "default", }}>
                    <p style={{ fontSize: "0.8rem", color: "#ccc", marginBottom: "20px", }}>
                      –¢–∏–ø: <strong>{selectedItem.type}</strong>
                    </p>
                    <p style={{ fontSize: "0.8rem", color: "#ccc", marginBottom: "20px" }}>
                      –†—ñ–¥–∫—ñ—Å—Ç—å: <strong>{selectedItem.rarity}</strong>
                    </p>
                    {/* –û–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–æ–∫—Ä–∞—â–µ–Ω–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ */}
                    {(() => {
                      const stats = getUpgradedStats(
                        {
                          damage: Number(selectedItem.damage) || 0,
                          defense: Number(selectedItem.defense) || 0,
                        },
                        selectedItem.upgrade_level ?? 0
                      );
                      return (
                        <>
                          <p style={{ fontSize: "0.8rem", color: "#ccc", marginBottom: "20px" }}>
                            –®–∫–æ–¥–∞: <strong>{stats.damage}</strong>
                          </p>
                          <p style={{ fontSize: "0.8rem", color: "#ccc", marginBottom: "60px" }}>
                            –ó–∞—Ö–∏—Å—Ç: <strong>{stats.defense}</strong>
                          </p>
                        </>
                      );
                    })()}
                  </div>
                  
                  <div 
                    style={{
                      position: "relative",
                      flexDirection: "row",
                      display: "flex",
                      justifyContent: "center",
                      alignItems: "center",
                      overflow: "visible",
                      width: "100%",
                      height: "100%",
                    }} 
                  >
                    <button onClick={() => { handleDismantle(selectedItem); setSelectedItem(null); }}
                      style={{
                        backgroundColor: "#444",
                        border: "none",
                        fontSize: "0.7rem",
                        color: "rgb(190, 0, 0)",
                        background: "rgba(0, 0, 0, 0.06)",
                        borderRadius:20,
                        marginTop: "-8px",
                        marginBottom:"28px",
                        cursor: "pointer",
                        width: "100%",
                        fontWeight: "bolder",
                      }}>
                      üí• –†–û–ó–Ü–ë–†–ê–¢–ò 
                    </button>
                    {/* –£–º–æ–≤–Ω–∞ –∫–Ω–æ–ø–∫–∞: –°–ü–û–†–Ø–î–ò–¢–ò –∞–±–æ –í–ò–ö–û–†–ò–°–¢–ê–¢–ò */}
                    {(selectedItem.type === 'weapon' || selectedItem.type === 'shield') && (
                      <button onClick={() => { handleEquip(selectedItem); setSelectedItem(null); }}
                        style={{
                          backgroundColor: "#444",
                          border: "none",
                          fontSize: "0.7rem",
                          color: "rgb(0, 255, 98)",
                          background: "rgba(0, 0, 0, 0)",
                          borderRadius:20,
                          marginTop: "-8px",
                          marginBottom:"28px",
                          cursor: "pointer",
                          width: "100%",
                        }}>
                        –°–ü–û–†–Ø–î–ò–¢–ò ü´¥
                      </button>
                    )}
                    {selectedItem.type === 'scroll' && (
                      <button onClick={() => { 
                        // –¢—É—Ç –º–∞—î –±—É—Ç–∏ –≤–∞—à–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ handleUseItem
                        // handleUseItem(selectedItem); 
                        console.log("–í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç:", selectedItem.name); // –¢–∏–º—á–∞—Å–æ–≤–∏–π –ª–æ–≥
                        setSelectedItem(null); 
                      }}
                        style={{
                          backgroundColor: "#444",
                          border: "none",
                          fontSize: "0.7rem",
                          color: "rgb(0, 255, 98)",
                          background: "rgba(0, 0, 0, 0)",
                          borderRadius:20,
                          marginTop: "-8px",
                          marginBottom:"28px",
                          cursor: "pointer",
                          width: "100%",
                        }}>
                        ‚ú® –í–ò–ö–û–†–ò–°–¢–ê–¢–ò
                      </button>
                    )}
                    {selectedItem.type === 'element' && (
                      <button onClick={() => { 
                        // –¢—É—Ç –º–∞—î –±—É—Ç–∏ –≤–∞—à–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ handleUseItem
                        // handleUseItem(selectedItem); 
                        console.log("–í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç:", selectedItem.name); // –¢–∏–º—á–∞—Å–æ–≤–∏–π –ª–æ–≥
                        setSelectedItem(null); 
                      }}
                        style={{
                          backgroundColor: "#444",
                          border: "none",
                          fontSize: "0.7rem",
                          color: "rgb(0, 255, 98)", 
                          background: "rgba(0, 0, 0, 0)",
                          borderRadius:20,
                          marginTop: "-8px",
                          marginBottom:"28px",
                          cursor: "pointer",
                          width: "100%",
                        }}>
                        ‚ú® –í–ò–ö–û–†–ò–°–¢–ê–¢–ò
                      </button>
                    )}
                    {/* –Ø–∫—â–æ —î —ñ–Ω—à—ñ —Ç–∏–ø–∏ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤, –¥–ª—è —è–∫–∏—Ö –ø–æ—Ç—Ä—ñ–±–Ω—ñ —ñ–Ω—à—ñ –∫–Ω–æ–ø–∫–∏ –∞–±–æ —ó—Ö –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å, 
                        –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —â–µ —É–º–æ–≤–∏ —Å—é–¥–∏, –∞–±–æ –∑–∞–ª–∏—à–∏—Ç–∏ —Ç–∞–∫, —â–æ–± –¥–ª—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∏—Ö —Ç–∏–ø—ñ–≤ 
                        –Ω–µ –±—É–ª–æ –¥—Ä—É–≥–æ—ó –∫–Ω–æ–ø–∫–∏. 
                        –ù–∞–ø—Ä–∏–∫–ª–∞–¥, —è–∫—â–æ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –º–æ–∂–Ω–∞ –Ω—ñ —Å–ø–æ—Ä—è–¥–∏—Ç–∏, –Ω—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏, 
                        –∞–ª–µ –º–æ–∂–Ω–∞ —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏, —Ç–æ –±—É–¥–µ —Ç—ñ–ª—å–∫–∏ –∫–Ω–æ–ø–∫–∞ "–†–û–ó–Ü–ë–†–ê–¢–ò".
                    */}
                  </div>
                </div>
              )}

              {selectedItem.mode === "equipped" && (
                
                <div 
                  onClick={(e) => e.stopPropagation()}
                  style={{
                    backgroundImage: `url('/bg/Cardbg1.png')`,
                    backgroundSize: 'cover',
                    backgroundPosition: 'center',
                    backgroundRepeat: 'no-repeat',
                    padding: "0px",
                    borderRadius: "10px",
                    color: "#fff",
                    maxWidth: "300px",
                    width: "100%",
                    minHeight: "450px", // –¥–æ–¥–∞–Ω–æ!
                    textAlign: "center",
                    filter: "drop-shadow(0 0px 40px rgb(255, 255, 255))",
                  }}
                >
                  <div 
                    style={{
                      position: "relative",
                      flexDirection: "row",
                      display: "flex",
                      justifyContent: "center",
                      alignItems: "center",
                      overflow: "visible",
                      width: "100%",
                      height: "100%",
                      gap: "69%",
                    }} >
                    <p className={` rarity-font-${selectedItem.rarity?.toLowerCase()}`} 
                      style={{  
                        fontSize: "1rem",
                        fontWeight: "bolder",
                        fontFamily: "Arial, sans-serif",
                        position: "inherit",
                        padding: "4px",
                        marginTop:"30px",
                        borderRadius: "25px",
                        alignItems: "center",
                        background: "rgba(0, 0, 0, 0.33)",
                        cursor: "default",
                      }}>
                        +{selectedItem.upgrade_level}
                    </p>
                    <p onClick={() => setSelectedItem(null)}
                      style={{  
                        fontSize: "1rem",
                        fontWeight: "bolder",
                        fontFamily: "Arial, sans-serif",
                        position: "inherit",
                        padding: "4px",
                        paddingInline: "8px",
                        marginTop:"30px",
                        borderRadius: "25px",
                        alignItems: "center",
                        background: "rgba(0, 0, 0, 0.33)",
                        cursor: "pointer",
                      }}>
                        x
                    </p>
                  </div>
                  <h2 className={` rarity-font-${selectedItem.rarity?.toLowerCase()}`} style={{ fontSize: "1.2rem", marginBottom: "10px",marginTop:"-10px",cursor: "default", }}>{selectedItem.name}</h2>
                 
                  {selectedItem.image && (
                      <img 
                      src={typeof selectedItem.image === "string" ? selectedItem.image : (selectedItem.image as { src: string }).src}
                      alt={selectedItem.name}
                      style={{ width: "130px", height: "80px", objectFit: "contain", marginBottom: "30px", marginTop: "30px", boxShadow: "0 0 40 rgb(253, 253, 253)", borderRadius: "360px", filter: "drop-shadow(0 0px 22px rgb(255, 255, 255))" }}
                    />
                  )}

                  <div style={{objectFit: "contain", marginBottom: "30px", marginTop: "10px", boxShadow: "0 0 40 rgba(253, 253, 253, 0.5)", borderRadius: "20px", border:"1px", cursor: "default", }}>
                    <p style={{ fontSize: "0.8rem", color: "#ccc", marginBottom: "20px", }}>
                      –¢–∏–ø: <strong>{selectedItem.type}</strong>
                    </p>
                    <p style={{ fontSize: "0.8rem", color: "#ccc", marginBottom: "20px" }}>
                      –†—ñ–¥–∫—ñ—Å—Ç—å: <strong>{selectedItem.rarity}</strong>
                    </p>
                    {/* –û–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–æ–∫—Ä–∞—â–µ–Ω–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ */}
                    {(() => {
                      const stats = getUpgradedStats(
                        {
                          damage: Number(selectedItem.damage) || 0,
                          defense: Number(selectedItem.defense) || 0,
                        },
                        selectedItem.upgrade_level ?? 0
                      );
                      return (
                        <>
                          <p style={{ fontSize: "0.8rem", color: "#ccc", marginBottom: "20px" }}>
                            –®–∫–æ–¥–∞: <strong>{stats.damage}</strong>
                          </p>
                          <p style={{ fontSize: "0.8rem", color: "#ccc", marginBottom: "60px" }}>
                            –ó–∞—Ö–∏—Å—Ç: <strong>{stats.defense}</strong>
                          </p>
                        </>
                      );
                    })()}
                  </div>
                  
                  <div 
                    style={{
                      position: "relative",
                      flexDirection: "row",
                      display: "flex",
                      justifyContent: "center",
                      alignItems: "center",
                      overflow: "visible",
                      width: "100%",
                      height: "100%",
                      gap:20,
                    }} 
                  >
                    <button
                      style={{
                        backgroundColor: "#444",
                        border: "none",
                        fontSize: "0.7rem",
                        fontStyle: "italic",
                        fontFamily: "Arial, sans-serif",
                        fontWeight: "bolder",
                        color: "rgb(151, 151, 151)",
                        background: "rgba(0, 0, 0, 0.4)",
                        borderRadius:20,
                        marginTop: "-8px",
                        marginBottom:"28px",
                        cursor: "default",
                        width: "40%",
                      }}>
                        –°–ü–û–†–Ø–î–ñ–ï–ù–û
                    </button>
                    <button onClick={() => {handleUnequip(selectedItem);setSelectedItem(null);}}
                      style={{
                        backgroundColor: "#444",
                        border: "none",
                        fontSize: "0.7rem",
                        color: "#ffff",
                        background: "rgba(0, 0, 0, 0.4)",
                        borderRadius:20,
                        marginTop: "-8px",
                        marginBottom:"28px",
                        cursor: "pointer",
                        width: "40%",
                      }}>
                        –ó–ù–Ø–¢–ò ü´≥
                    </button>
                  </div>
                </div>
                
              )}

              {selectedItem.mode === "sweapon" && (
                <div
                  className={`item-image rarity-border-common rarity-shadow-common`}
                  onClick={(e) => e.stopPropagation()}
                  style={{
                    backgroundColor: "#1e1e1e",
                    padding: "20px",
                    borderRadius: "10px",
                    color: "#fff",
                    maxWidth: "300px",
                    width: "90%",
                    textAlign: "center",
                  }}
                >
                  <div 
                    style={{
                      position: "relative",
                      flexDirection: "row",
                      display: "flex",
                      justifyContent: "center",
                      alignItems: "center",
                      overflow: "visible",
                      marginBottom: "40px",
                      marginTop: "-20px",
                      width: "100%",
                      height: "100%",
                      gap: "70%",
                    }} >
                    <p
                      style={{  
                        position: "relative",
                        fontSize: "0.7rem",
                        fontWeight: "lighter",
                        fontFamily: "Arial, sans-serif",
                        fontVariantEmoji: "emoji",
                        color: "#ddd",
                        background: "rgba(0, 0, 0, 0.35)",
                        borderRadius: "50px",
                        padding: "8px",
                        width: "150px",
                        height: "10px",
                      }}>
                         –ó–ë–†–û–Ø
                    </p>
                    <p onClick={() => setSelectedItem(null)}
                      style={{  
                        fontSize: "0.8rem",
                        fontWeight: "lighter",
                        fontFamily: "Arial, sans-serif",
                        fontVariantEmoji: "emoji",
                        color: "#ddd",
                        position: "inherit",
                        background: "rgba(0, 0, 0, 0.35)",
                        borderRadius: "50px",
                        padding: "8px",
                        width: "10px",
                        height: "10px",
                      }}>
                        X
                    </p>
                    
                  </div>
                  <Placeholder>
                <div
                  style={{
                    marginTop: "-30px",
                    marginLeft:"-10px",
                    alignItems: "center",
                    position: "relative",
                    display: "grid",
                    gridTemplateColumns: "repeat(auto-fill, minmax(40px, 1fr))", // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞ —Å—ñ—Ç–∫–∞
                    gap: "20px", // –í—ñ–¥—Å—Ç—É–ø –º—ñ–∂ –∫–∞—Ä—Ç–∫–∞–º–∏
                    width: "100%",
                    animation: "fadeIn 1s ease forwards",
                  }}
                >
                  {WeaponItems.map((item) => (
                    <ItemCard
                      mode={"city"}
                      key={item.item_id}
                      item_id={Number(item.item_id)}
                      type={item.type}
                      rarity={item.rarity}
                      name={item.name}
                      image={item.image}
                      description={item.description}
                      damage={item.damage ? ` ${item.damage}` : "0"}
                        defense={item.defense ? ` ${item.defense}` : "0"}
                      price={item.price}
                      onBuyRequest={(item) => setSelectedItem(item)}
                    />
                  ))}
                </div>
            </Placeholder>
                </div>
              )}

              {selectedItem.mode === "sshield" && (
                <div
                  className={`item-image rarity-border-common rarity-shadow-common`}
                  onClick={(e) => e.stopPropagation()}
                  style={{
                    backgroundColor: "#1e1e1e",
                    padding: "20px",
                    borderRadius: "10px",
                    color: "#fff",
                    maxWidth: "300px",
                    width: "90%",
                    textAlign: "center",
                  }}
                >
                  <div 
                    style={{
                      position: "relative",
                      flexDirection: "row",
                      display: "flex",
                      justifyContent: "center",
                      alignItems: "center",
                      overflow: "visible",
                      marginBottom: "40px",
                      marginTop: "-20px",
                      width: "100%",
                      height: "100%",
                      gap: "70%",
                    }} >
                    <p
                      style={{  
                        position: "relative",
                        fontSize: "0.7rem",
                        fontWeight: "lighter",
                        fontFamily: "Arial, sans-serif",
                        fontVariantEmoji: "emoji",
                        color: "#ddd",
                        background: "rgba(0, 0, 0, 0.35)",
                        borderRadius: "50px",
                        padding: "8px",
                        width: "150px",
                        height: "10px",
                      }}>
                         –ë–†–û–ù–Ø
                    </p>
                    <p onClick={() => setSelectedItem(null)}
                      style={{  
                        fontSize: "0.8rem",
                        fontWeight: "lighter",
                        fontFamily: "Arial, sans-serif",
                        fontVariantEmoji: "emoji",
                        color: "#ddd",
                        position: "inherit",
                        background: "rgba(0, 0, 0, 0.35)",
                        borderRadius: "50px",
                        padding: "8px",
                        width: "10px",
                        height: "10px",
                      }}>
                        X
                    </p>
                    
                  </div>
                  <Placeholder>
                <div
                  style={{
                    marginTop: "-30px",
                    marginLeft:"-10px",
                    alignItems: "center",
                    position: "relative",
                    display: "grid",
                    gridTemplateColumns: "repeat(auto-fill, minmax(40px, 1fr))", // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞ —Å—ñ—Ç–∫–∞
                    gap: "20px", // –í—ñ–¥—Å—Ç—É–ø –º—ñ–∂ –∫–∞—Ä—Ç–∫–∞–º–∏
                    width: "100%",
                    animation: "fadeIn 1s ease forwards",
                  }}
                >
                  {ShieldItems.map((item) => (
                      <ItemCard
                        mode={"city"}
                        key={item.item_id}
                        item_id={Number(item.item_id)}
                        type={item.type}
                        rarity={item.rarity}
                        name={item.name}
                        image={item.image}
                        description={item.description}
                        damage={item.damage ? ` ${item.damage}` : "0"}
                        defense={item.defense ? `${item.defense}` : "0"}
                        price={item.price}
                        onBuyRequest={(item) => setSelectedItem(item)}
                      />
                    ))}
                </div>
            </Placeholder>
                </div>
              )}

              {selectedItem.mode === "sscroll" && (
                <div
                  className={`item-image rarity-border-common rarity-shadow-common`}
                  onClick={(e) => e.stopPropagation()}
                  style={{
                    backgroundColor: "#1e1e1e",
                    padding: "20px",
                    borderRadius: "10px",
                    color: "#fff",
                    maxWidth: "300px",
                    width: "90%",
                    textAlign: "center",
                  }}
                >
                  <div 
                    style={{
                      position: "relative",
                      flexDirection: "row",
                      display: "flex",
                      justifyContent: "center",
                      alignItems: "center",
                      overflow: "visible",
                      marginBottom: "40px",
                      marginTop: "-20px",
                      width: "100%",
                      height: "100%",
                      gap: "70%",
                    }} >
                    <p
                      style={{  
                        position: "relative",
                        fontSize: "0.7rem",
                        fontWeight: "lighter",
                        fontFamily: "Arial, sans-serif",
                        fontVariantEmoji: "emoji",
                        color: "#ddd",
                        background: "rgba(0, 0, 0, 0.35)",
                        borderRadius: "50px",
                        padding: "8px",
                        width: "150px",
                        height: "10px",
                      }}>
                         –°–£–í–û–á
                    </p>
                    <p onClick={() => setSelectedItem(null)}
                      style={{  
                        fontSize: "0.8rem",
                        fontWeight: "lighter",
                        fontFamily: "Arial, sans-serif",
                        fontVariantEmoji: "emoji",
                        color: "#ddd",
                        position: "inherit",
                        background: "rgba(0, 0, 0, 0.35)",
                        borderRadius: "50px",
                        padding: "8px",
                        width: "10px",
                        height: "10px",
                      }}>
                        X
                    </p>
                    
                  </div>
                  <Placeholder>
                <div
                  style={{
                    marginTop: "-30px",
                    marginLeft:"-10px",
                    alignItems: "center",
                    position: "relative",
                    display: "grid",
                    gridTemplateColumns: "repeat(auto-fill, minmax(40px, 1fr))", // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞ —Å—ñ—Ç–∫–∞
                    gap: "20px", // –í—ñ–¥—Å—Ç—É–ø –º—ñ–∂ –∫–∞—Ä—Ç–∫–∞–º–∏
                    width: "100%",
                    animation: "fadeIn 1s ease forwards",
                  }}
                >
                  {ScrollItems.map((item) => (
                      <ItemCard
                        mode={"city"}
                        key={item.item_id}
                        item_id={Number(item.item_id)}
                        type={item.type}
                        rarity={item.rarity}
                        name={item.name}
                        image={item.image}
                        description={item.description}
                        damage={item.damage ? ` ${item.damage}` : "0"}
                        defense={item.defense ? `${item.defense}` : "0"}
                        price={item.price}
                        onBuyRequest={(item) => setSelectedItem(item)}
                      />
                    ))}
                </div>
            </Placeholder>
                </div>
              )}
            </div>
        )}

        <BottomBar activeTab={activeTab} setActiveTab={setActiveTab} />
      </List>
      <Toaster position="top-center" reverseOrder={false} />
    </Page>
  );

}
