"use client";

import React, { useEffect, useState, useRef } from "react";
import { List, Placeholder } from "@telegram-apps/telegram-ui";
import { Page } from "@/components/Page";
import TopBar from "@/components/TopBar";
import BottomBar from "@/components/BottomBar";
import { useSignal, initData } from "@telegram-apps/sdk-react";
import { supabase } from "@/lib/supabaseClient";
import artilithLogo from "../_assets/Artilith_logo-no-bg.png";
import sword01a from "../_assets/item/sword01a.png";
import shield01a from "../_assets/item/shield01a.png";
import potion01f from "../_assets/item/potion01f.png";
import Image from "next/image";


export default function HomePage() {
  // –ö—ñ–ª—å–∫—ñ—Å—Ç—å —É–ª–∞–º–∫—ñ–≤ (points)
  const [points, setPoints] = useState(0);
  const [clickDelay, setClickDelay] = useState(1000);
  const [isClickable, setIsClickable] = useState(true);
  const [countdown, setCountdown] = useState(0);
  const [animationTime, setAnimationTime] = useState(1100);
  const [activeTab, setActiveTab] = useState("home");
  // –î–ª—è –º–∞–≥–∞–∑–∏–Ω—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è (–≤–∂–µ —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–æ)
  const [sortOption, setSortOption] = useState("price");
  // –ü–µ—Ä–µ–º–∏–∫–∞—á, —è–∫–∏–π –ø–æ–∫–∞–∑—É—î –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —Ä—ñ–≤–µ–Ω—å 2)
  const [locked, setLocked] = useState(true);

  const timerRef = useRef<NodeJS.Timeout | null>(null);
  const initDataState = useSignal(initData.state);
  const userId = initDataState?.user?.id;

    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ–∑ Supabase
    useEffect(() => {
      const fetchUserData = async () => {
        if (!userId) return;
        const { data, error } = await supabase
          .from("users")
          .select("points, click_delay")
          .eq("id", userId)
          .single();
  
        if (error) {
          console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:", error);
        } else if (data) {
          setPoints(data.points);
          setClickDelay(data.click_delay);
          setAnimationTime(data.click_delay + 100);
        }
      };
      fetchUserData();
    }, [userId]);

// –û–Ω–æ–≤–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–ª—ñ–≤
async function updateUserPoints(userId: string | undefined, newPoints: number) {
  if (!userId) {
    console.error('userId –Ω–µ –≤–∫–∞–∑–∞–Ω–∏–π –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –±–∞–ª—ñ–≤');
    return false;
  }

  const { error } = await supabase
    .from('users')
    .update({ points: newPoints })
    .eq('id', userId);

  if (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª—ñ–≤:', error);
    return false;
  }
  return true;
}

// –î–æ–¥–∞—î–º–æ –ø—Ä–µ–¥–º–µ—Ç —É —ñ–Ω–≤–µ–Ω—Ç–∞—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async function addInventoryItem(userId: string, itemId: number) {
  const { data, error } = await supabase
    .from('inventory')
    .insert([{ user_id: userId, item_id: itemId }]);
  
  if (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç–∞:', error.message, error.details);
    return false;
  } else {
    console.log('–ü—Ä–µ–¥–º–µ—Ç –¥–æ–¥–∞–Ω–æ –≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä:', data);
    return true;
  }
}


// –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–∫—É–ø–∫–∏
const handleBuyItem = async (
  item: { item_id: number; name: string; image: string; description: string; damage?: string; strength?: string; price: number }
) => {
  if (points < item.price) {
    alert("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —É–ª–∞–º–∫—ñ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏!");
    return;
  }

  if (!userId) {
    alert('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!');
    return;
  }

  const newPoints = points - item.price;
  await updateUserPoints(String(userId), newPoints); // –ø—Ä–∏–≤–µ–ª–∏ –¥–æ string
  setPoints(newPoints);

  const added = await addInventoryItem(String(userId), item.item_id); // –ø—Ä–∏–≤–µ–ª–∏ –¥–æ string
  if (added) {
    alert(`–í–∏ –ø—Ä–∏–¥–±–∞–ª–∏ ${item.name}!`);
  } else {
    alert("–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞!");
  }
};


async function getUserInventory(userId: string) {
  const { data, error } = await supabase
    .from('inventory')
    .select('id, item_id, items ( name, image, description, damage, defense, price )')
    .eq('user_id', userId);

  if (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è:', error);
    return [];
  }

  return data;
}


// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const saveUserData = async (newPoints: number, newClickDelay: number) => {
  if (!userId) return;

  const { error } = await supabase
    .from("users")
    .upsert([{ id: userId, points: newPoints, click_delay: newClickDelay }], {
      onConflict: "id",
    });

  if (error) console.error("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:", error);
};

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –∫–ª—ñ–∫—É
const updateCountdown = (endTime: number) => {
  if (timerRef.current) clearInterval(timerRef.current);

  const now = Date.now();
  let remaining = Math.ceil((endTime - now) / 1000);

  if (remaining <= 0) {
    setCountdown(0);
    setIsClickable(true);
    localStorage.removeItem("nextClickTime");
    return;
  }

  setCountdown(remaining);
  setIsClickable(false);

  timerRef.current = setInterval(() => {
    const now = Date.now();
    remaining = Math.ceil((endTime - now) / 1000);

    if (remaining <= 0) {
      clearInterval(timerRef.current!);
      setCountdown(0);
      setIsClickable(true);
      localStorage.removeItem("nextClickTime");
    } else {
      setCountdown(remaining);
    }
  }, 1000);
};

useEffect(() => {
  const savedNextClick = localStorage.getItem("nextClickTime");
  if (savedNextClick) {
    const endTime = parseInt(savedNextClick, 10);
    updateCountdown(endTime);
  }
}, []);

// –ö–ª—ñ–∫ –Ω–∞ "HOLD"
const handleClick = async () => {
  if (!isClickable) return;

  const nextAvailableClick = Date.now() + clickDelay;
  localStorage.setItem("nextClickTime", nextAvailableClick.toString());

  setIsClickable(false);
  updateCountdown(nextAvailableClick);

  const newPoints = points + 1;
  const newClickDelay = clickDelay + 1000;

  setPoints(newPoints);
  setClickDelay(newClickDelay);
  setAnimationTime(newClickDelay + 100);

  if (!userId) return;

  const { error } = await supabase
    .from("users")
    .upsert([{ id: userId, points: newPoints, click_delay: newClickDelay }], {
      onConflict: "id",
    });

  if (error) console.error("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:", error);

  const imgWrap = document.querySelector(".imgWrap");
  if (imgWrap) {
    imgWrap.classList.add("active");
    setTimeout(() => {
      imgWrap.classList.remove("active");
    }, 1000);
  }
};


  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç ItemCard: –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º (image)
  type ItemCardProps = {
    item_id: number;
    name: string;
    image: string;
    description: string;
    damage?: string;
    strength?: string;
    price: number;
  };
  const ItemCard: React.FC<ItemCardProps> = ({ item_id, name, image, description, damage, strength, price }) => (
      <div
      style={{
        borderRadius: "10px",
        padding: "20px",
        textAlign: "center",
        boxShadow: "0 2px 9px rgba(0, 0, 0, 0.3)",
        border: "1px solid rgba(255, 255, 255, 0.1)",
      }}
    >
      <img 
      src={image} 
      alt={name} 
      width={50} 
      height={50}
      style={{
        padding: "20px",
        borderRadius: "10px",
        marginBottom: "15px",
        boxShadow: "0 5px 15px rgba(255, 255, 255, 0.3)",
      }}
    />
      <h3 style={{ color: "#00ffcc", marginBottom: "10px" }}>{name}</h3>
      <p style={{ color: "#ddd", marginBottom: "15px" }}>{description}</p>
      {damage && <p style={{ color: "#ddd", marginBottom: "5px" }}>{damage}</p>}
      {strength && <p style={{ color: "#ddd", marginBottom: "15px" }}>{strength}</p>}
      <button
        style={{
          backgroundColor: "#00bcd4",
          border: "none",
          padding: "12px 24px",
          fontSize: "1rem",
          color: "#fff",
          borderRadius: "6px",
          cursor: "pointer",
          transition: "all 0.3s ease",
          marginTop: "10px",
        }}
        onClick={() => handleBuyItem({ item_id, name, image, description, damage, strength, price })}
      >
        –ö—É–ø–∏—Ç–∏ –∑–∞ {price} ü™®
      </button>
    </div>
  );
  
  
 // –§—É–Ω–∫—Ü—ñ—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–∞–π–º–µ—Ä–∞
 const formatTime = (totalSeconds: number) => {
  const hours = Math.floor(totalSeconds / 3600);
  const minutes = Math.floor((totalSeconds % 3600) / 60);
  const seconds = totalSeconds % 60;
  const pad = (num: number) => num.toString().padStart(2, "0");
  return `${pad(hours)}:${pad(minutes)}:${pad(seconds)}`;
};

 // –§—É–Ω–∫—Ü—ñ—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –≤–∫–ª–∞–¥–æ–∫
 const renderContent = () => {
  switch (activeTab) {
    case "shop":
      return (
        <Page back>
          <Placeholder>
            <div
              className="page"
              style={{
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                justifyContent: "center",
                marginTop: "-20px",
              }}
            >
              <h1
                style={{
                  fontSize: "2rem",
                  fontWeight: "bold",
                  marginBottom: "20px",
                  marginTop: "5px",
                  textAlign: "center",
                  lineHeight: "1",
                  color: "#fff",
                }}
              >
                –ú–ê–ì–ê–ó–ò–ù –ü–†–ï–î–ú–ï–¢–Ü–í
              </h1>
              <p
                style={{
                  fontSize: "1rem",
                  color: "#ddd",
                  textAlign: "center",
                  marginBottom: "30px",
                  maxWidth: "600px",
                }}
              >
                –¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–¥–±–∞—Ç–∏ –ø–æ—á–∞—Ç–∫–æ–≤–µ —Å–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è –¥–ª—è –ø—Ä–∏–≥–æ–¥: –∑–±—Ä–æ—é, –±—Ä–æ–Ω—é —Ç–∞ –∑—ñ–ª–ª—è.
              </p>
              <div
                style={{
                  display: "grid",
                  gridTemplateColumns: "repeat(1, 1fr)",
                  gap: "20px",
                  width: "100%",
                  maxWidth: "1200px",
                }}
              >
                <ItemCard
                  item_id={1}
                  name="–î–µ—Ä–µ–≤—è–Ω–∏–π –º–µ—á"
                  image={sword01a.src}
                  description="–ü–æ—á–∞—Ç–∫–æ–≤–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –¥–ª—è –≤–æ—ó–Ω—ñ–≤."
                  damage="–®–∫–æ–¥–∞: 1"
                  strength="–ú—ñ—Ü–Ω—ñ—Å—Ç—å: 5"
                  price={30}
                />

                <ItemCard
                  item_id={2}
                  name="–ú–∞–ª–µ–Ω—å–∫–µ –∑—ñ–ª–ª—è"
                  image={potion01f.src}
                  description="–í—ñ–¥–Ω–æ–≤–ª—é—î –µ–Ω–µ—Ä–≥—ñ—é. –û–¥–∏–Ω –∫–æ–≤—Ç–æ–∫ ‚Äî —ñ –≤–∏ –∑–Ω–æ–≤—É –≤ —Å—Ç—Ä–æ—é."
                  price={50}
                />

                <ItemCard
                  item_id={3}
                  name="–ú–∞–ª–∏–π —â–∏—Ç"
                  image={shield01a.src}
                  description="–ü—Ä–æ—Å—Ç–∏–π —â–∏—Ç –¥–ª—è –ø–æ—á–∞—Ç–∫—ñ–≤—Ü—ñ–≤."
                  damage=""
                  strength="–ú—ñ—Ü–Ω—ñ—Å—Ç—å: 15"
                  price={65}
                />
              </div>
            </div>
          </Placeholder>
          <Placeholder>
            <div
              className="page"
              style={{
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                justifyContent: "center",
                marginTop: "-20px",
              }}
            >
              <h1
                style={{
                  fontSize: "2rem",
                  fontWeight: "bold",
                  marginBottom: "20px",
                  marginTop: "5px",
                  textAlign: "center",
                  lineHeight: "1",
                  color: "#fff",
                }}
              >
                –†—ñ–≤–µ–Ω—å 2
              </h1>
              <p
                style={{
                  fontSize: "1rem",
                  color: "#ddd",
                  textAlign: "center",
                  marginBottom: "30px",
                  maxWidth: "600px",
                }}
              >
                –í–∏ —â–µ –Ω–µ –¥–æ—Å–∏—Ç—å —Å–∏–ª—å–Ω—ñ, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ —Ü—å–æ–≥–æ —Ä—ñ–≤–Ω—è. –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –≥—Ä–∞—Ç–∏, —â–æ–± —Ä–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –Ω–æ–≤—ñ –ø—Ä–µ–¥–º–µ—Ç–∏!
              </p>
              <div style={{ position: "relative", marginTop: "20px" }}>
                <div
                  className="blur-target"
                  style={{
                    display: "grid",
                    gridTemplateColumns: "repeat(1, 1fr)",
                    gap: "20px",
                    width: "100%",
                    maxWidth: "1200px",
                    margin: "0 auto",
                    filter: locked ? "blur(15px)" : "none",
                    transition: "filter 0.3s ease",
                    pointerEvents: locked ? "none" : "auto",
                    opacity: locked ? 0.5 : 1,
                    cursor: locked ? "block" : "auto",
                  }}
                >
                  <ItemCard
                    item_id={0}
                    name="–•–∏—Ç—Ä—É–Ω"
                    image={sword01a.src}
                    description="–•–∏—Ç—Ä—É–Ω"
                    damage="–®–∫–æ–¥–∞: –•–∏—Ç—Ä—É–Ω"
                    strength="–ú—ñ—Ü–Ω—ñ—Å—Ç—å: –•–∏—Ç—Ä—É–Ω"
                    price={999999}
                  />
                </div>
              </div>
            </div>
          </Placeholder>
        </Page>
      );
    case "home":
      return (
        <div
          className="HIJtihMA8FHczS02iWF5"
          style={{ overflow: "visible" }}
          onClick={handleClick}
        >
          <Placeholder>
            <div
              className="page"
              style={{
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                justifyContent: "center",
                marginTop: "-20px",
              }}
            >
              <h1
                style={{
                  fontSize: "2rem",
                  fontWeight: "bold",
                  marginBottom: "20px",
                  marginTop: "5px",
                  textAlign: "center",
                  lineHeight: "1",
                  color: "#fff",
                }}
              >
                HOLD
              </h1>
              <div
                className="imgWrap"
                style={{
                  position: "relative",
                  display: "flex",
                  justifyContent: "center",
                  alignItems: "center",
                  overflow: "visible",
                  marginTop: "0px",
                  marginBottom: "0px",
                  width: "90%",
                  height: "90%",
                }}
              >
                <Image
                  className="blue"
                  alt="Artilith Logo Blue"
                  src={artilithLogo}
                  width={400}
                  height={400}
                  style={{
                    position: "absolute",
                    width: "100%",
                    height: "auto",
                    maxWidth: "250px",
                  }}
                />
              </div>
              <p
                style={{
                  fontSize: "0.9rem",
                  fontWeight: "lighter",
                  color: "#ccc",
                  textAlign: "center",
                  lineHeight: "1",
                  fontFamily: "Arial, sans-serif",
                  marginTop: "0px",
                }}
              >
                <span>
                  {countdown > 0 ? `${formatTime(countdown)}` : "–¢–∏—Å–Ω–∏, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —É–ª–∞–º–æ–∫!"}
                </span>
              </p>
              <h2
                style={{
                  fontSize: "1rem",
                  fontWeight: "lighter",
                  color: "#ccc",
                  textAlign: "center",
                  marginTop: "10px",
                  lineHeight: "1.4",
                  fontFamily: "Arial, sans-serif",
                }}
              >
                –ó–±–∏—Ä–∞–π—Ç–µ —É–ª–∞–º–∫–∏, —â–æ–± –ø—Ä–æ–∫–∞—á–∞—Ç–∏ —Å–≤–æ–≥–æ –≥–µ—Ä–æ—è —Ç–∞ –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –π–æ–≥–æ –¥–æ –ø—Ä–∏–≥–æ–¥.
              </h2>
            </div>
          </Placeholder>
        </div>
      );
    case "hiro":
      // –£—è–≤–Ω–∏–π —ñ–Ω–≤–µ–Ω—Ç–∞—Ä –≥—Ä–∞–≤—Ü—è
      const inventory = [
        { id: 1, name: "–î–µ—Ä–µ–≤—è–Ω–∞ –ø–∞–ª–∏—Ü—è", equipped: false },
        { id: 2, name: "–ú–∞–ª–µ–Ω—å–∫–∏–π —â–∏—Ç", equipped: true },
        null,
        null,
      ];
      return (
        <Page back>
          <Placeholder>
            <div
              className="page"
              style={{
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                marginTop: "-20px",
              }}
            >
              <h1
                style={{
                  fontSize: "2rem",
                  fontWeight: "bold",
                  marginBottom: "10px",
                  textAlign: "center",
                  color: "#fff",
                  lineHeight: "1",
                }}
              >
                –ì–ï–†–û–ô
              </h1>
              <h2
                style={{
                  fontSize: "1.1rem",
                  fontWeight: "lighter",
                  color: "#ccc",
                  textAlign: "center",
                  marginBottom: "20px",
                  lineHeight: "1.4",
                  fontFamily: "Arial, sans-serif",
                  maxWidth: "90%",
                }}
              >
                –¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Å–≤–æ–≥–æ –≥–µ—Ä–æ—è, –ø—Ä–æ–∫–∞—á–∞—Ç–∏ –π–æ–≥–æ —Ç–∞ –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –¥–æ –ø—Ä–∏–≥–æ–¥.
              </h2>
              {/* –ë–ª–æ–∫ –≥–µ—Ä–æ—è */}
              <div
                style={{
                  display: "flex",
                  flexDirection: "column",
                  alignItems: "center",
                  backgroundColor: "rgba(255, 255, 255, 0.05)",
                  borderRadius: "15px",
                  padding: "20px",
                  width: "100%",
                  maxWidth: "400px",
                  boxShadow: "0 0 10px rgba(0,0,0,0.3)",
                  position: "relative",
                  overflow: "hidden",
                  marginBottom: "40px",
                }}
              >
                {/* –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≥–µ—Ä–æ—è */}
                <div
                  style={{
                    width: "120px",
                    height: "120px",
                    borderRadius: "50%",
                    overflow: "hidden",
                    background: "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)",
                    marginBottom: "15px",
                    display: "flex",
                    alignItems: "center",
                    justifyContent: "center",
                  }}
                >
                  <span style={{ fontSize: "60px", color: "#fff" }}>üõ°Ô∏è</span>
                </div>
                {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ—Ä–æ—è */}
                <div
                  style={{
                    width: "100%",
                    color: "#fff",
                    fontSize: "1rem",
                    textAlign: "left",
                  }}
                >
                  <div style={{ marginBottom: "10px" }}>
                    <strong>–†—ñ–≤–µ–Ω—å:</strong> 0
                  </div>
                  {/* –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –ó–¥–æ—Ä–æ–≤—è */}
                  <div style={{ marginBottom: "10px" }}>
                    <strong>–ó–¥–æ—Ä–æ–≤&apos;—è:</strong>
                    <div
                      style={{
                        width: "100%",
                        height: "12px",
                        backgroundColor: "#444",
                        borderRadius: "6px",
                        overflow: "hidden",
                        marginTop: "5px",
                      }}
                    >
                      <div
                        style={{
                          width: "100%",
                          height: "100%",
                          background: "linear-gradient(to right, #4caf50, #8bc34a)",
                          transition: "width 0.5s ease",
                        }}
                      />
                    </div>
                  </div>
                  <div style={{ marginBottom: "10px" }}>
                    <strong>–ó–∞—Ö–∏—Å—Ç:</strong> 0
                  </div>
                  <div style={{ marginBottom: "10px" }}>
                    <strong>–®–∫–æ–¥–∞:</strong> 0
                  </div>
                </div>
              </div>
              {/* –Ü–Ω–≤–µ–Ω—Ç–∞—Ä */}
              <h2
                style={{
                  fontSize: "1.4rem",
                  fontWeight: "bold",
                  marginTop: "30px",
                  marginBottom: "10px",
                  textAlign: "center",
                  color: "#fff",
                }}
              >
                –Ü–Ω–≤–µ–Ω—Ç–∞—Ä
              </h2>
              <div
                style={{
                  display: "grid",
                  gridTemplateColumns: "repeat(2, 1fr)",
                  gap: "15px",
                  width: "100%",
                  maxWidth: "400px",
                }}
              >
                {inventory.map((item, index) => (
                  <div
                    key={index}
                    style={{
                      display: "flex",
                      flexDirection: "column",
                      alignItems: "center",
                      backgroundColor: "rgba(255, 255, 255, 0.05)",
                      borderRadius: "10px",
                      padding: "10px",
                      position: "relative",
                      animation: "fadeIn 0.5s ease forwards",
                      animationDelay: `${index * 0.1}s`,
                      opacity: 0,
                    }}
                  >
                    <div
                      style={{
                        width: "100%",
                        aspectRatio: "1 / 1",
                        backgroundColor: item
                          ? "rgba(255, 255, 255, 0.08)"
                          : "rgba(255, 255, 255, 0.02)",
                        border: item
                          ? "2px solid rgba(255, 255, 255, 0.3)"
                          : "2px dashed rgba(255, 255, 255, 0.1)",
                        borderRadius: "8px",
                        display: "flex",
                        alignItems: "center",
                        justifyContent: "center",
                        fontSize: "2rem",
                        color: item ? "#fff" : "#777",
                        marginBottom: "10px",
                      }}
                    >
                      {item ? item.name : "–ü–æ—Ä–æ–∂–Ω—å–æ"}
                    </div>
                    {item && (
                      <button
                        style={{
                          backgroundColor: item.equipped ? "#f44336" : "#4caf50",
                          color: "#fff",
                          border: "none",
                          borderRadius: "5px",
                          padding: "5px 10px",
                          fontSize: "0.9rem",
                          cursor: "pointer",
                          transition: "background-color 0.3s",
                          width: "100%",
                        }}
                        onClick={() =>
                          alert(
                            item.equipped ? `–°–∫–∏–Ω—É—Ç–∏ ${item.name}` : `–ï–∫—ñ–ø—ñ—Ä—É–≤–∞—Ç–∏ ${item.name}`
                          )
                        }
                      >
                        {item.equipped ? "–°–∫–∏–Ω—É—Ç–∏" : "–ï–∫—ñ–ø—ñ—Ä—É–≤–∞—Ç–∏"}
                      </button>
                    )}
                  </div>
                ))}
              </div>
            </div>
          </Placeholder>

          <style jsx>{`
            @keyframes fadeIn {
              from {
                opacity: 0;
                transform: scale(0.8);
              }
              to {
                opacity: 1;
                transform: scale(1);
              }
            }
          `}</style>
        </Page>
      );
    default:
      return null;
  }
};

return (
  <Page back={false}>
    <List>
      <TopBar points={points} />
      <div style={{ paddingBottom: 100 }}>{renderContent()}</div>
      <BottomBar activeTab={activeTab} setActiveTab={setActiveTab} />
    </List>
  </Page>
);
}
