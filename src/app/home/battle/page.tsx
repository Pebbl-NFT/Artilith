"use client";

import { useEffect, useState, useRef, useCallback} from "react";
import { Button, Link, Card, Placeholder } from '@telegram-apps/telegram-ui';
import { Page } from "@/components/Page";
import { useSignal, initData } from "@telegram-apps/sdk-react";
import { supabase } from "@/lib/supabaseClient";
import { AllItems } from "@/components/Item/Items";
import { getPlayerStats } from "@/utils/getPlayerStats";
import { reduceEnergy } from "@/utils/reduceEnergy";
import { Toaster, toast } from "react-hot-toast";
import { generateSequentialEnemy, Enemy} from '@/lib/generateEnemy';
import { baseEnemies, EnemyBase } from '@/lib/generateEnemy';

export default function BattlePage() {
  const initDataState = useSignal(initData.state);
  const userId = initDataState?.user?.id;

  const [playerStats, setPlayerStats] = useState({ health: 10, attack: 0, defense: 0 });
  const [playerHP, setPlayerHP] = useState(10);
  const [playerDEF, setPlayerDEF] = useState(0);
  const [isLoading, setIsLoading] = useState(true);

  const [inventory, setInventory] = useState<any[]>([]);
  const [energy, setEnergy] = useState(0);
  const hasShownToast = useRef(false);

  const [points, setPoints] = useState(0);
  const [playerLevel, setPlayerLevel] = useState(1); // –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —Ä—ñ–≤–µ–Ω—å 1
  const [experience, setExperience] = useState(0);

  const [enemyStats, setEnemyStats] = useState<Enemy | null>(null);
  const [enemyHP, setEnemyHP] = useState(0);
  const [enemyImage, setEnemyImage] = useState("");
  const [enemyDEF, setEnemyDEF] = useState(0);

  const [encounterNumber, setEncounterNumber] = useState(1); // –ë—É–¥–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ –ë–î
  // –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Å—Ç–∞–Ω–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–±—É–¥—É—Ç—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω—ñ)
  const [maxEncounterNumber, setMaxEncounterNumber] = useState(0);
  const [totalWins, setTotalWins] = useState(0);
  const [totalLosses, setTotalLosses] = useState(0);
  const [minibossKills, setMinibossKills] = useState(0);
  const [bossKills, setBossKills] = useState(0);
  // const [currentBiome, setCurrentBiome] = useState('forest'); // –î–ª—è –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ

  const [isHit, setIsHit] = useState(false);
  const [canAttack, setCanAttack] = useState(true);
  const canAttackRef = useRef(true);
  const [log, setLog] = useState<string[]>([]);
  const [turnTimer, setTurnTimer] = useState(30);
  const timerRef = useRef<NodeJS.Timeout | null>(null);

  const [battleResult, setBattleResult] = useState<"win" | "lose" | null>(null);
  const [showLog, setShowLog] = useState(false);

  const [showPreBattle, setShowPreBattle] = useState(true);

  const [hitText, setHitText] = useState<null | { value: number, id: number }>(null);
  const hitIdRef = useRef(0);
  const [isEnemyHit, setIsEnemyHit] = useState(false);

  const hasMissedTurnRef = useRef(false);
  const hasProcessedOutcome = useRef(false);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ–∑ Supabase
  const fetchUserData = async () => {
    if (!userId) return;
    setIsLoading(true); // –ü–æ—á–∏–Ω–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    const { data, error } = await supabase
      .from("users")
      .select("points, click_delay, energy, experience, level, current_encounter_number, max_encounter_number, total_wins, total_losses, miniboss_kills, boss_kills") // <--- –ù–û–í–Ü –ü–û–õ–Ø
      .eq("id", userId)
      .single();

      if (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", error);
      toast.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.");
      // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–æ–≤–∏–π –∞–±–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞
      setEncounterNumber(1);
      // setIsLoading(false); // –ó–∞–≤–µ—Ä—à—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç—É—Ç —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
    } else if (data) {
      setPoints(data.points || 0);
      setEnergy(data.energy || 0);
      setPlayerLevel(data.level || 1);
      setExperience(data.experience || 0);
      setEncounterNumber(data.current_encounter_number || 1); // <--- –ó–ê–í–ê–ù–¢–ê–ñ–£–Ñ–ú–û
      setMaxEncounterNumber(data.max_encounter_number || 0);
      setTotalWins(data.total_wins || 0);
      setTotalLosses(data.total_losses || 0);
      setMinibossKills(data.miniboss_kills || 0);
      setBossKills(data.boss_kills || 0);
      if (data.energy <= 0 && !hasShownToast.current) {
        toast.error("–£ –≤–∞—Å –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è –µ–Ω–µ—Ä–≥—ñ—è ‚ö°");
        hasShownToast.current = true;
      }
    }
    // setIsLoading(false); // –ó–∞–≤–µ—Ä—à—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∞–±–æ –ø–æ–º–∏–ª–∫–∏
    // fetchInventory –±—É–¥–µ –≤–∏–∫–ª–∏–∫–∞–Ω–∏–π –≤ —Å–≤–æ—î–º—É useEffect, —è–∫–∏–π –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ userId
    // setIsLoading –±—É–¥–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ false –≤ useEffect, —â–æ –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ inventory
  };

  const appendToLog = (newEntries: string[]) => {
    setLog(prev => {
      if (prev.some(line => line.includes("–ü–µ—Ä–µ–º–æ–≥–∞") || line.includes("–ü–æ—Ä–∞–∑–∫–∞"))) {
        return prev; // –ª–æ–≥ –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π
      }
      return [...newEntries, ...prev];
    });
  };

  useEffect(() => {
    if (inventory && inventory.length > 0) {
      // –û–Ω–æ–≤–ª—é—î–º–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≥—Ä–∞–≤—Ü—è
      const stats = getPlayerStats(inventory);
      setPlayerStats(stats);

      // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ HP —Ç–∞ –∑–∞—Ö–∏—Å—Ç
      setPlayerHP(stats.health);
      setPlayerDEF(stats.defense);

      // –û–Ω–æ–≤–ª—é—î–º–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤–æ—Ä–æ–≥–∞, —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω—ñ
      if (enemyStats) {
        setEnemyHP(enemyStats.currentHealth);
        setEnemyDEF(enemyStats.defense);
      }

      // –ó–Ω—ñ–º–∞—î–º–æ —Å—Ç–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
      setIsLoading(false);
      setCanAttack(true);
    }
  }, [inventory, enemyStats]); // –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ: inventory —ñ enemyStats
  
  const fetchInventory = async () => {
    if (!userId) return;
    // –í–∏–±–∏—Ä–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç—ñ –ø–æ–ª—è, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–ª—è —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —Ç–∞ —Å—Ç–∞—Ç—É—Å—É –∑ —Ç–∞–±–ª–∏—Ü—ñ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—é
    const { data, error } = await supabase
      .from("inventory")
      .select("item_id, equipped, id, upgrade_level") // damage/defense —Ç—É—Ç –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω—ñ, —è–∫—â–æ –≤–æ–Ω–∏ –±–∞–∑–æ–≤—ñ —ñ —î –≤ AllItems
      .eq("user_id", userId);

    if (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è:", error.message);
      setInventory([]);
      return;
    }
    if (!data) {
        setInventory([]);
        return;
    }

    const formatted = data.map((entry) => {
      const itemDetails = AllItems.find((i) => i.item_id === entry.item_id);

      if (!itemDetails) {
        console.warn(`–î–µ—Ç–∞–ª—ñ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ –∑ item_id ${entry.item_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ AllItems.`);
        return null;
      }

      // itemDetails –≤–∂–µ –º–∞—î –±–∞–∑–æ–≤—ñ damage —Ç–∞ defense
      return {
        ...itemDetails, // –†–æ–∑–ø–æ–≤—Å—é–¥–∂—É—î–º–æ –≤—Å—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –∑ AllItems, –≤–∫–ª—é—á–∞—é—á–∏ –±–∞–∑–æ–≤—ñ damage/defense
        id: entry.id, // ID –∑–∞–ø–∏—Å—É –≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ
        equipped: entry.equipped, // –°—Ç–∞—Ç—É—Å –µ–∫—ñ–ø—ñ—Ä—É–≤–∞–Ω–Ω—è
        upgrade_level: entry.upgrade_level ?? 0, // –†—ñ–≤–µ–Ω—å –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è
      };
    }).filter(item => item !== null);

    console.log("FETCHED AND FORMATTED INVENTORY:", JSON.stringify(formatted, null, 2));
    setInventory(formatted);
  };

  useEffect(() => {
      fetchUserData(); // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é
      fetchInventory();
  }, [userId]);

  function calculateDamage(attack: number, defense: number): { defenseLoss: number; healthLoss: number } {
    const rawDamage = Math.max(attack, 0);
    if (defense >= rawDamage) {
      return { defenseLoss: rawDamage, healthLoss: 0 };
    } else {
      return { defenseLoss: defense, healthLoss: rawDamage - defense };
    }
  }

  const startTurnTimer = () => {
  ¬† if (battleResult) return; // –ù–µ –∑–∞–ø—É—Å–∫–∞—î–º–æ —Ç–∞–π–º–µ—Ä, —è–∫—â–æ –±—ñ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ

  ¬† setTurnTimer(15);
  ¬† hasMissedTurnRef.current = false;

  ¬† if (timerRef.current) clearInterval(timerRef.current);

  ¬† timerRef.current = setInterval(() => {
  ¬† ¬† setTurnTimer(prev => {
  ¬† ¬† ¬† if (prev <= 1) {
  ¬† ¬† ¬† ¬† clearInterval(timerRef.current!); // –ó—É–ø–∏–Ω–∫–∞ —Ç–∞–π–º–µ—Ä–∞

  ¬† ¬† ¬† ¬† // –í–∏–∫–ª–∏–∫–∞—î–º–æ handleMissedTurn
  ¬† ¬† ¬† ¬† handleMissedTurn();

  ¬† ¬† ¬† ¬† return 0; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ 0, –≤–∏—á–µ—Ä–ø–∞–≤—à–∏ —Ç–∞–π–º–µ—Ä
  ¬† ¬† ¬† }
  ¬† ¬† ¬† return prev - 1; // –ó–Ω–∏–∂–µ–Ω–Ω—è —Ç–∞–π–º–µ—Ä–∞
  ¬† ¬† });
  ¬† }, 1000); // –ó–º–µ–Ω—à–µ–Ω–Ω—è —Ç–∞–π–º–µ—Ä–∞ –∫–æ–∂–Ω—É —Å–µ–∫—É–Ω–¥—É
  };

  const handleMissedTurn = () => {
  ¬† if (!enemyStats) return; // –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–æ—Ä–æ–≥ —ñ—Å–Ω—É—î

  ¬† toast.error("–í–∏ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —Å–≤—ñ–π —Ö—ñ–¥!"); // –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø—Ä–æ–ø—É—â–µ–Ω–∏–π —Ö—ñ–¥

  ¬† // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —à–∫–æ–¥–∏ –≤—ñ–¥ –≤–æ—Ä–æ–≥–∞
  ¬† const enemyHit = calculateDamage(enemyStats.damage, playerDEF);
  ¬† const newDEF = Math.max(playerDEF - enemyHit.defenseLoss, 0);
  ¬† const newHP = Math.max(playerHP - enemyHit.healthLoss, 0);

  ¬† // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–æ–≥—ñ–≤
  ¬† const newLog = [
  ¬† ¬† `‚è±Ô∏è –í–∏ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —Ö—ñ–¥!`,
  ¬† ¬† `üëæ –í–æ—Ä–æ–≥ –∑–∞–≤–¥–∞—î ${enemyHit.defenseLoss + enemyHit.healthLoss} —à–∫–æ–¥–∏.`,
  ¬† ¬† ...(newHP <= 0 ? ["üíÄ –ü–æ—Ä–∞–∑–∫–∞!"] : []),
  ¬† ];

  ¬† // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—ñ–≤
  ¬† setPlayerDEF(newDEF);
  ¬† setPlayerHP(newHP);
  ¬† setLog(prev => [...newLog, ...prev]);

  ¬† // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ—Ä–∞–∑–∫—É
  ¬† if (newHP <= 0) {
  ¬† ¬† setBattleResult("lose"); // –Ø–∫—â–æ –≥—Ä–∞–≤–µ—Ü—å –ø—Ä–æ–≥—Ä–∞–≤
  ¬† ¬† clearInterval(timerRef.current!); // –ó—É–ø–∏–Ω–∫–∞ —Ç–∞–π–º–µ—Ä–∞
  ¬† } else {
  ¬† ¬† setCanAttack(true); // –î–æ–∑–≤–æ–ª–∏—Ç–∏ –≥—Ä–∞–≤—Ü–µ–≤—ñ –∞—Ç–∞–∫—É–≤–∞—Ç–∏
  ¬† ¬† startTurnTimer(); // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–∞–π–º–µ—Ä –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ö—ñ–¥
  ¬† }
  };

  // –§—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–≥–æ—Ä–æ–¥
  async function updateRewardInSupabase(rewardPoints: number, rewardExp: number) {
      console.log(`–û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–≥–æ—Ä–æ–¥–∏: ${rewardPoints} –æ—á–æ–∫, ${rewardExp} –¥–æ—Å–≤—ñ–¥—É`);

      const { data: userData, error: fetchError } = await supabase
          .from("users")
          .select("points, experience, level")
          .eq("id", userId) // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ userId –∑ state, –∞ –Ω–µ –∑–∞–ø–∏—Ç—É—î–º–æ getUser()
          .single();

      if (fetchError) {
          console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:", fetchError.message);
          return;
      }

      const currentPoints = (userData?.points || 0);
      const currentExperience = (userData?.experience || 0);
      const currentLevel = (userData?.level || 1);

      const newPoints = currentPoints + rewardPoints;
      let newExperience = currentExperience + rewardExp;
      let newLevel = currentLevel;

      // –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –Ω–æ–≤–æ–≥–æ —Ä—ñ–≤–Ω—è
      while (newExperience >= getRequiredExp(newLevel)) {
          newExperience -= getRequiredExp(newLevel);
          newLevel++;
          console.log(`–ü–µ—Ä–µ–π—à–ª–∏ –Ω–∞ –Ω–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å! –¢–µ–ø–µ—Ä –≤–∏ —Ä—ñ–≤–µ–Ω—å ${newLevel}`);
      }

      // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
      const { error } = await supabase
          .from("users")
          .upsert({
              id: userId, // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ userId –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
              points: newPoints,
              experience: newExperience,
              level: newLevel,
          }, { onConflict: "id" });

      if (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:", error.message);
      } else {
        console.log(`–ù–∞–≥–æ—Ä–æ–¥–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞: ${rewardPoints} –æ—á–æ–∫ —ñ ${rewardExp} –¥–æ—Å–≤—ñ–¥—É —É—Å–ø—ñ—à–Ω–æ.`);
        setPoints(newPoints);
        setExperience(newExperience); 
      }
  }

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –¥–æ—Å–≤—ñ–¥—É
  const getRequiredExp = (level: number): number => {
      return 100 * Math.pow(2, level - 1); // 1 —Ä—ñ–≤–µ–Ω—å = 100 XP, 2 —Ä—ñ–≤–µ–Ω—å = 200, 3 —Ä—ñ–≤–µ–Ω—å = 400 —ñ —Ç.–¥.
  };

  const handleAttack = () => {
    if (!enemyStats) return;
    if (!canAttack || playerHP <= 0 || enemyHP <= 0 || battleResult) return;
    setCanAttack(false);

    // –†–∞—Ö—É—î–º–æ —ñ –æ–¥—Ä–∞–∑—É –∑–∞–¥–∞—î–º–æ –Ω–æ–≤—ñ —Å—Ç–∞–Ω–∏
    const playerHit = calculateDamage(playerStats.attack, enemyDEF);
    const afterEnemyDEF = Math.max(enemyDEF - playerHit.defenseLoss, 0);
    const afterEnemyHP = Math.max(enemyHP - playerHit.healthLoss, 0);

    setEnemyDEF(afterEnemyDEF);
    setEnemyHP(afterEnemyHP);

    setHitText({ value: playerHit.defenseLoss + playerHit.healthLoss, id: Date.now() });
    appendToLog([`üßç –ì—Ä–∞–≤–µ—Ü—å –∑–∞–≤–¥–∞—î ${playerHit.defenseLoss + playerHit.healthLoss} —à–∫–æ–¥–∏.`]);

    if (afterEnemyHP <= 0) {
      appendToLog(["üéâ –ü–µ—Ä–µ–º–æ–≥–∞!"]);
      setBattleResult("win");
      return;
    }

    // ==== –í–æ—Ä–æ–≥ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î ====
    setTimeout(() => {
      if (!enemyStats) return;

      const enemyHit = calculateDamage(enemyStats.damage, playerDEF);
      const afterPlayerDEF = Math.max(playerDEF - enemyHit.defenseLoss, 0);
      const afterPlayerHP = Math.max(playerHP - enemyHit.healthLoss, 0);

      setPlayerDEF(afterPlayerDEF);
      setPlayerHP(afterPlayerHP);
      appendToLog([`üëæ –í–æ—Ä–æ–≥ –∑–∞–≤–¥–∞—î ${enemyHit.defenseLoss + enemyHit.healthLoss} —à–∫–æ–¥–∏.`]);

      if (afterPlayerHP <= 0) {
        appendToLog(["üíÄ –ü–æ—Ä–∞–∑–∫–∞!"]);
        setBattleResult("lose");
        return;
      }
      setCanAttack(true);
    }, 500);
  };

useEffect(() => {
  if (showPreBattle && playerLevel && encounterNumber > 0 && userId) {
            console.log(`Generating enemy for encounter: ${encounterNumber}, player level: ${playerLevel}`);
            const generated = generateSequentialEnemy(encounterNumber, playerLevel);
            setEnemyStats(generated);
            setEnemyImage(generated.image);
            setEnemyHP(generated.maxHealth);
            setEnemyDEF(generated.defense);
            setTurnTimer(15);
            setIsHit(false);
            // *** –í–ê–ñ–õ–ò–í–û: —Å–∫–∏–¥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–æ—é –ø—Ä–∏ –ø—ñ–¥–≥–æ—Ç–æ–≤—Ü—ñ –¥–æ –Ω–æ–≤–æ–≥–æ ***
            setBattleResult(null); 
            // –°–∫–∏–¥–∞—î–º–æ –ø—Ä–∞–ø–æ—Ä –æ–±—Ä–æ–±–∫–∏, –≥–æ—Ç—É—é—á–∏—Å—å –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –±–æ—é
            hasProcessedOutcome.current = false;
            setLog([]);
        }
    }, [showPreBattle, playerLevel, encounterNumber, userId]);
    useEffect(() => { return () => { if (timerRef.current) clearInterval(timerRef.current); }; }, []);

    // useEffect –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—ñ–≤ –≥—Ä–∞–≤—Ü—è —Ç–∞ –≤–æ—Ä–æ–≥–∞
  // –¶–µ–π useEffect –º–∞—î —Ä–µ–∞–≥—É–≤–∞—Ç–∏ –Ω–∞ –∑–º—ñ–Ω–∏ inventory (–¥–ª—è —Å—Ç–∞—Ç—ñ–≤ –≥—Ä–∞–≤—Ü—è)
  // —Ç–∞ enemyStats (–¥–ª—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è HP/DEF –≤–æ—Ä–æ–≥–∞)
  useEffect(() => {
    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—ñ–≤ –≥—Ä–∞–≤—Ü—è
    if (inventory.length > 0) { // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π
      const stats = getPlayerStats(inventory);
      setPlayerStats(stats);
      setPlayerHP(stats.health); // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ HP –≥—Ä–∞–≤—Ü—è –Ω–∞ –º–∞–∫—Å–∏–º—É–º –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —Å—Ç–∞—Ç—ñ–≤
      setPlayerDEF(stats.defense);
    } else {
      // –Ø–∫—â–æ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä –ø–æ—Ä–æ–∂–Ω—ñ–π, –º–æ–∂–Ω–∞ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –±–∞–∑–æ–≤—ñ —Å—Ç–∞—Ç–∏ –≥—Ä–∞–≤—Ü—è
      setPlayerStats({ health: 20, attack: 1, defense: 0 }); // –ê–±–æ —ñ–Ω—à—ñ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
      setPlayerHP(20);
      setPlayerDEF(0);
    }
    // –ü–æ—á–∞—Ç–∫–æ–≤–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è HP/DEF –≤–æ—Ä–æ–≥–∞, –∫–æ–ª–∏ enemyStats –∑–º—ñ–Ω—é—î—Ç—å—Å—è (–Ω–æ–≤–∏–π –≤–æ—Ä–æ–≥ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π)
    // –¶–µ –≤–∂–µ —Ä–æ–±–∏—Ç—å—Å—è –≤ useEffect, —â–æ –≥–µ–Ω–µ—Ä—É—î –≤–æ—Ä–æ–≥–∞, —Ç–æ–º—É —Ç—É—Ç —Ü–µ –º–æ–∂–µ –±—É—Ç–∏ –∑–∞–π–≤–∏–º –∞–±–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–∏.
    // –Ø–∫—â–æ enemyStats?.currentHealth –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ generateSequentialEnemy, —Ç–æ —Ç—É—Ç –Ω–µ —Ç—Ä–µ–±–∞.
    // if (enemyStats) {
    //   setEnemyHP(enemyStats.maxHealth); // –ó–∞–≤–∂–¥–∏ –ø–æ—á–∏–Ω–∞—î–º–æ –∑ –ø–æ–≤–Ω–∏–º –∑–¥–æ—Ä–æ–≤'—è–º –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ—Ä–æ–≥–∞
    //   setEnemyDEF(enemyStats.defense);
    // }
    // –Ø–∫—â–æ –≤—Å—ñ –¥–∞–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ (–≥—Ä–∞–≤–µ—Ü—å, —ñ–Ω–≤–µ–Ω—Ç–∞—Ä, –≤–æ—Ä–æ–≥), —Ç–æ –∑–Ω—ñ–º–∞—î–º–æ isLoading
    if (userId && inventory.length > 0 && enemyStats) {
         setIsLoading(false);
    } else if (userId && !enemyStats && showPreBattle) { // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î, –∞–ª–µ –≤–æ—Ä–æ–≥ —â–µ –Ω–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π –Ω–∞ preBattle
        setIsLoading(false); // –ú–æ–∂–Ω–∞ —Ç–µ–∂ –∑–Ω—è—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è, —â–æ–± –ø–æ–∫–∞–∑–∞—Ç–∏ –∫–Ω–æ–ø–∫—É "–ü–æ—á–∞—Ç–∏ –±—ñ–π"
    }
    // setCanAttack(true); // –¶–µ –º–∞—î –∫–æ–Ω—Ç—Ä–æ–ª—é–≤–∞—Ç–∏—Å—è –∫–Ω–æ–ø–∫–æ—é "–ü–æ—á–∞—Ç–∏ –±—ñ–π" —Ç–∞ —Å—Ç–∞–Ω–æ–º –±–æ—é
  }, [inventory, userId]); // –ó–∞–ª–µ–∂–Ω—ñ—Å—Ç—å –≤—ñ–¥ inventory. enemyStats –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –≤ —ñ–Ω—à–æ–º—É –º—ñ—Å—Ü—ñ.

  useEffect(() => {
    return () => {
      if (timerRef.current) clearInterval(timerRef.current);
    };
  }, []);

   // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –±–æ—é (–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è, –Ω–∞–≥–æ—Ä–æ–¥–∏)
  const processBattleOutcome = async (isWin: boolean) => {
        if (!enemyStats || !userId) return;
        const { rewardPoints, rewardExp, droppedItems } = isWin ? calculateReward(enemyStats, playerLevel) : { rewardPoints: 0, rewardExp: 0, droppedItems: [] };
        
        await updateUserDataAfterBattle(rewardPoints, rewardExp, isWin, enemyStats.type);

        if (isWin) {
            toast.success(`–ü–µ—Ä–µ–º–æ–≥–∞! +${rewardPoints} ü™®, +${rewardExp} üî∑`);
            if (droppedItems.length > 0) {
                droppedItems.forEach(item => {
                    toast.success(`–ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç: ${item.name}!`);
                });
            }
        } else {
            toast.error("–ü–æ—Ä–∞–∑–∫–∞...");
        }
        clearInterval(timerRef.current!);
        // –ë—ñ–ª—å—à–µ –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ. UI —Ç–µ–ø–µ—Ä –±—É–¥–µ –∫–æ–Ω—Ç—Ä–æ–ª—é–≤–∞—Ç–∏—Å—è `battleResult`
    };

  // useEffect –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –±–æ—é (–≤–∏–∫–ª–∏–∫–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è)
  useEffect(() => {
    if (battleResult === "win") {
      processBattleOutcome(true);
    } else if (battleResult === "lose") {
      processBattleOutcome(false);
    }
    // –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ: battleResult —Ç–∞ –≤—Å—ñ —Å—Ç–∞–Ω–∏, —è–∫—ñ —á–∏—Ç–∞—î updateUserDataAfterBattle –Ω–µ—è–≤–Ω–æ,
    // –∞–±–æ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —ó—Ö —è–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤ updateUserDataAfterBattle –¥–ª—è —á–∏—Å—Ç–æ—Ç–∏.
    // –ü–æ—Ç–æ—á–Ω–∏–π updateUserDataAfterBattle —á–∏—Ç–∞—î –±–∞–≥–∞—Ç–æ —Å—Ç–∞–Ω—ñ–≤, —Ç–æ–º—É —Å–ø–∏—Å–æ–∫ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π –≤–µ–ª–∏–∫–∏–π:
  }, [battleResult]);

  async function updateUserDataAfterBattle(
      rewardPoints: number,
      rewardExp: number,
      isWin: boolean,
      defeatedEnemyType: 'normal' | 'miniBoss' | 'boss'
  ) {
      if (!userId) return;
      const encounterJustFinished = encounterNumber;
      const newEncounterNumber = isWin ? encounterJustFinished + 1 : 1; // –ü—Ä–∏ –ø–æ—Ä–∞–∑—Ü—ñ –∑–∞–≤–∂–¥–∏ —Å–∫–∏–¥–∞—î–º–æ –Ω–∞ 1
    // –ü–æ—Ç–æ—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ state (–≤–æ–Ω–∏ –≤–∂–µ –º–∞—é—Ç—å –±—É—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω–∏–º–∏ –ø—ñ—Å–ª—è fetchUserData)
    const currentPoints = points;
    const currentExperience = experience;
    const currentLevel = playerLevel;
    // encounterNumber –∑ state - —Ü–µ –Ω–æ–º–µ—Ä –±–æ—é, —â–æ–π–Ω–æ –∑–∞–≤–µ—Ä—à–∏–≤—Å—è
    let newPoints = currentPoints + rewardPoints;
    let newExperience = currentExperience + rewardExp;
    let newLevel = currentLevel;
    while (newExperience >= getRequiredExp(newLevel)) {
      newExperience -= getRequiredExp(newLevel);
      newLevel++;
      toast.success(`–ù–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å: ${newLevel}!`);
    }
    const updatedStats = {
      points: newPoints,
      experience: newExperience,
      level: newLevel,
      total_wins: totalWins + (isWin ? 1 : 0),
      total_losses: totalLosses + (!isWin ? 1 : 0),
      miniboss_kills: minibossKills + (isWin && defeatedEnemyType === 'miniBoss' ? 1 : 0),
      boss_kills: bossKills + (isWin && defeatedEnemyType === 'boss' ? 1 : 0),
      current_encounter_number: newEncounterNumber,
      max_encounter_number: Math.max(maxEncounterNumber, isWin ? encounterJustFinished : 0),
    };

    const { error } = await supabase.from("users").update(updatedStats).eq("id", userId);

    if (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:", error.message);
        toast.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å.");
    } else {
        console.log("–î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.");
        // –û–Ω–æ–≤–ª—é—î–º–æ –í–ï–°–¨ –ª–æ–∫–∞–ª—å–Ω–∏–π state
        setPoints(updatedStats.points);
        setExperience(updatedStats.experience);
        setPlayerLevel(updatedStats.level);
        setTotalWins(updatedStats.total_wins);
        setTotalLosses(updatedStats.total_losses);
        setMinibossKills(updatedStats.miniboss_kills);
        setBossKills(updatedStats.boss_kills);
        // *** –û–Ω–æ–≤–ª—é—î–º–æ encounterNumber –≤ state –¢–£–¢, –∞ –Ω–µ –≤ –∫–Ω–æ–ø—Ü—ñ ***
        setEncounterNumber(updatedStats.current_encounter_number);
        setMaxEncounterNumber(updatedStats.max_encounter_number);
      }
    }

  // handleStartBattle: –∫–æ–ª–∏ –≥—Ä–∞–≤–µ—Ü—å –Ω–∞—Ç–∏—Å–∫–∞—î –∫–Ω–æ–ø–∫—É "–ü–æ—á–∞—Ç–∏ –±—ñ–π"
  const handleStartBattle = async () => {
    if (!userId) {
      toast.error("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π");
      return;
    }
    if (energy < 1) { // –í–∞—Ä—Ç—ñ—Å—Ç—å –±–æ—é, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 1 –µ–Ω–µ—Ä–≥—ñ—è
      toast.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –µ–Ω–µ—Ä–≥—ñ—ó ‚ö°");
      return;
    }
    const energyCost = 1; // –í–∞—Ä—Ç—ñ—Å—Ç—å –±–æ—é
    const success = await reduceEnergy(userId, energyCost); // reduceEnergy –º–∞—î –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ true/false
    if (success) {
      setEnergy(prev => prev - energyCost);
      // toast.success(`–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ ${energyCost}‚ö°`); // –ú–æ–∂–Ω–∞ –ø—Ä–∏–±—Ä–∞—Ç–∏, —è–∫—â–æ reduceEnergy –≤–∂–µ –ø–æ–∫–∞–∑—É—î
      setShowPreBattle(false); // –•–æ–≤–∞—î–º–æ –µ–∫—Ä–∞–Ω –ø–µ—Ä–µ–¥ –±–æ—î–º, –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è —Å–∞–º –±—ñ–π
      setCanAttack(true);      // –î–æ–∑–≤–æ–ª—è—î–º–æ –∞—Ç–∞–∫—É
      setLog([`–ë—ñ–π —Ä–æ–∑–ø–æ—á–∞—Ç–æ! –ï—Ç–∞–ø: ${encounterNumber}`]); // –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –∑–∞–ø–∏—Å –≤ –ª–æ–≥
      startTurnTimer();      // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–∞–π–º–µ—Ä —Ö–æ–¥—É –≥—Ä–∞–≤—Ü—è
    } else {
      toast.error("–ü–æ–º–∏–ª–∫–∞ —Å–ø–∏—Å–∞–Ω–Ω—è –µ–Ω–µ—Ä–≥—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
    }
  };

   // –û–Ω–æ–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è calculateReward
  // –ü—Ä–µ–¥–º–µ—Ç–∏ –ø–æ–∫–∏ —â–æ –ø—Ä–æ—Å—Ç–æ —è–∫ —ñ–º–µ–Ω–∞ –¥–ª—è –ø—Ä–∏–∫–ª–∞–¥—É
  const itemPlaceholders = {
    common: [{name: "–°—Ç–∞—Ä–∏–π —Å—É–≤—ñ–π", id: "scroll"}],
    miniBoss: [{ name: "–ï—Å–µ–Ω—Ü—ñ—è –º—ñ–Ω—ñ–±–æ—Å–∞", id: "essence_miniboss" }, { name: "–†—ñ–¥–∫—ñ—Å–Ω–∏–π –∫—Ä–∏—Å—Ç–∞–ª", id: "crystal_rare"}],
    boss: [{ name: "–°–µ—Ä—Ü–µ –ë–æ—Å–∞", id: "heart_boss" }, {name: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç", id: "artifact_legendary"}],
  };

  function calculateReward(enemy: Enemy, pLevel: number): { rewardPoints: number; rewardExp: number; droppedItems: {name: string, id: string}[] } {
    if (!enemy) return { rewardPoints: 0, rewardExp: 0, droppedItems: [] };
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –±–∞–∑–æ–≤–æ–≥–æ –≤–æ—Ä–æ–≥–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–∑–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    // –ê–ª–µ –æ—Å–∫—ñ–ª—å–∫–∏ enemy –≤–∂–µ –º–∞—î —Ç–∏–ø, –º–æ–∂–Ω–∞ –ø—Ä–æ—Å—Ç–æ –±–∞–∑—É–≤–∞—Ç–∏ –Ω–∞–≥–æ—Ä–æ–¥–∏ –Ω–∞ –π–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö —ñ —Ç–∏–ø—ñ
    const baseValue = enemy.maxHealth + enemy.damage * 5 + enemy.defense * 3; // –ü—Ä–∏–∫–ª–∞–¥ —Ñ–æ—Ä–º—É–ª–∏ –±–∞–∑–æ–≤–æ—ó —Ü—ñ–Ω–Ω–æ—Å—Ç—ñ
    let rewardPoints = Math.floor(baseValue * 0.1);
    let rewardExp = Math.floor(baseValue * 0.05);
    // –ë–æ–Ω—É—Å –∑–∞ —Ä—ñ–≤–µ–Ω—å –≥—Ä–∞–≤—Ü—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, +2% –¥–æ –Ω–∞–≥–æ—Ä–æ–¥ –∑–∞ –∫–æ–∂–µ–Ω —Ä—ñ–≤–µ–Ω—å –≥—Ä–∞–≤—Ü—è)
    const playerLevelBonus = 1 + (pLevel - 1) * 0.02;
    rewardPoints = Math.floor(rewardPoints * playerLevelBonus);
    rewardExp = Math.floor(rewardExp * playerLevelBonus);
    let droppedItems: {name: string, id: string}[] = [];
    const randomChance = Math.random(); // 0.0 to < 1.0
    switch (enemy.type) {
      case 'miniBoss':
        rewardPoints = Math.floor(rewardPoints * 1.8); // –ë—ñ–ª—å—à–µ –æ—á–æ–∫ –∑–∞ –º—ñ–Ω—ñ–±–æ—Å–∞
        rewardExp = Math.floor(rewardExp * 1.8);
        if (randomChance < 0.3) { // 30% —à–∞–Ω—Å –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –º—ñ–Ω—ñ–±–æ—Å–∞
          droppedItems.push(itemPlaceholders.miniBoss[Math.floor(Math.random() * itemPlaceholders.miniBoss.length)]);
        }
        break;
      case 'boss':
        rewardPoints = Math.floor(rewardPoints * 3.5); // –ó–Ω–∞—á–Ω–æ –±—ñ–ª—å—à–µ –∑–∞ –±–æ—Å–∞
        rewardExp = Math.floor(rewardExp * 3.5);
        if (randomChance < 0.75) { // 75% —à–∞–Ω—Å –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –±–æ—Å–∞
           droppedItems.push(itemPlaceholders.boss[Math.floor(Math.random() * itemPlaceholders.boss.length)]);
        }
        // –ú–æ–∂–Ω–∞ –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –¥–∞–≤–∞—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç –∑–∞ –ø–µ—Ä—à—É –ø–µ—Ä–µ–º–æ–≥—É –Ω–∞–¥ –±–æ—Å–æ–º (–ø–æ—Ç—Ä–µ–±—É—î –¥–æ–¥. –ª–æ–≥—ñ–∫–∏/–ø–æ–ª—è –≤ –ë–î)
        break;
      case 'normal':
      default:
        if (randomChance < 0.08) { // 8% —à–∞–Ω—Å –Ω–∞ –∑–≤–∏—á–∞–π–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç
          droppedItems.push(itemPlaceholders.common[Math.floor(Math.random() * itemPlaceholders.common.length)]);
        }
        break;
    }
    return { rewardPoints, rewardExp, droppedItems };
  }

  // --- –§–£–ù–ö–¶–Ü–á –í–Ü–î–û–ë–†–ê–ñ–ï–ù–ù–Ø UI ---
  // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –µ—Ç–∞–ø—É (—ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–æ)
  const renderStageInfo = () => {
    if (!enemyStats && !isLoading) return null; // –ù–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏, —è–∫—â–æ –Ω–µ–º–∞—î –≤–æ—Ä–æ–≥–∞ —ñ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è
    if (isLoading && showPreBattle) return null; // –ù–µ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –ø—ñ–¥ —á–∞—Å –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –±–æ—î–º, —è–∫—â–æ –±–∞–∂–∞—î—Ç–µ
    let stageText = `–ï—Ç–∞–ø: ${encounterNumber}`;
    if (enemyStats?.type === 'miniBoss') {
      stageText += " (–ú—ñ–Ω—ñ–±–æ—Å)";
    } else if (enemyStats?.type === 'boss') {
      stageText += " (–ë–û–°)";
    }
    // –î–æ–¥–∞–Ω–æ –∫–æ–ª—ñ—Ä —Ç–∞ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–æ –≤–∏–¥–∏–º—ñ—Å—Ç—å, –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ —Å—Ç–∏–ª—å –∑–∞ –ø–æ—Ç—Ä–µ–±–∏
    return <div style={{ textAlign: 'center', margin: '10px auto 15px auto', fontWeight: 'bold', color: '#fff', fontSize:'0.9em', textShadow: '1px 1px 2px black' }}>{stageText}</div>;
  };

  // --- –û–ë–†–û–ë–ù–ò–ö–ò –ö–ù–û–ü–û–ö –î–õ–Ø –ú–û–î–ê–õ–¨–ù–û–ì–û –í–Ü–ö–ù–ê ---
  const handleWinNext = () => {
      // `encounterNumber` –≤–∂–µ –æ–Ω–æ–≤–ª–µ–Ω–æ –≤ `updateUserDataAfterBattle`.
      // –ù–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –ª–∏—à–µ –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –≥—Ä–∞–≤—Ü—è —ñ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –µ–∫—Ä–∞–Ω—É –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏.
      setPlayerHP(playerStats.health);
      setPlayerDEF(playerStats.defense);
      setShowPreBattle(true); // –¶–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å `useEffect` –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –Ω–æ–≤–æ–≥–æ –≤–æ—Ä–æ–≥–∞
  };
  
  const handleLossRetry = () => {
      // `encounterNumber` –≤–∂–µ —Å–∫–∏–Ω—É—Ç–æ –Ω–∞ 1 –≤ `updateUserDataAfterBattle`.
      setPlayerHP(playerStats.health);
      setPlayerDEF(playerStats.defense);
      setShowPreBattle(true); // –¶–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å `useEffect` –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤–æ—Ä–æ–≥–∞ 1-–≥–æ –µ—Ç–∞–ø—É
  };

  if (isLoading) { // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±—ñ–ª—å—à –ø—Ä–æ—Å—Ç–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      return (
          <Page>
              <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', color: '#fff' }}>
                  –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...
              </div>
          </Page>
      );
  }

  if (showPreBattle) {
    if (!enemyStats) {
          return (
              <Page>
                  <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', color: '#fff' }}>
                      –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–æ—Ä–æ–≥–∞...
                  </div>
              </Page>
          );
    }
    return (
      <Page>
        <Toaster position="top-center" toastOptions={{ duration: 2000 }} />
          <Card // –ü—Ä–∏–ø—É—Å–∫–∞—é—á–∏, —â–æ Card —Ç—É—Ç —î –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º –Ω–∞ –≤—Å—é —Å—Ç–æ—Ä—ñ–Ω–∫—É
            className="page" // –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–∞—à CSS –¥–ª—è .page –æ–±—Ä–æ–±–ª—è—î —Ü–µ–π –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–∏–π –≤–∏–≥–ª—è–¥
            style={{
              position: "fixed", // –ê–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ flex-—Ü–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è –Ω–∞ Page, —è–∫—â–æ –±–∞–∂–∞—î—Ç–µ
              top: 0,
              left: 0,
              width: "100vw",
              height: "100vh",
              display: "flex",
              justifyContent: "center",
              alignItems: "center",
              flexDirection: "column",
              backgroundColor: "rgba(0,0,0,0.85)", // –¢–µ–º–Ω—ñ—à–∏–π —Ñ–æ–Ω
              color: "#fff",
              padding: "16px",
              boxSizing: "border-box",
              borderRadius: 0,
              overflowY: "auto", // –ù–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ –≤–º—ñ—Å—Ç –ø–µ—Ä–µ–ø–æ–≤–Ω—é—î—Ç—å—Å—è
              backgroundImage: "url('/bg/bgforestnght.jpg')", // –ü–µ—Ä–µ–º—ñ—â–µ–Ω–æ —É –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π div
              backgroundRepeat: "no-repeat",
              backgroundSize: "cover",
              backgroundPosition: "center",
            }}
          >
            {renderStageInfo()} {/* –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –µ—Ç–∞–ø —Ç–∞–∫–æ–∂ –Ω–∞ –µ–∫—Ä–∞–Ω—ñ –ø–µ—Ä–µ–¥ –±–æ—î–º */}
            <h2
              style={{
                display: "flex",
                flexDirection: "row",
                justifyContent: "center",
                alignItems: "center",
                color: "#fff",
                animation: "fadeIn 0.6s ease forwards", // –í–∏–∑–Ω–∞—á—Ç–µ fadeIn, —è–∫—â–æ –Ω–µ –≥–ª–æ–±–∞–ª—å–Ω–æ
                marginTop: 5, // –°–∫–æ—Ä–∏–≥–æ–≤–∞–Ω–∏–π –≤—ñ–¥—Å—Ç—É–ø
                marginBottom: 15,
                fontSize: "1.2em"
              }}
            >
              ‚öîÔ∏è –í–∏ –Ω–∞—Ç—Ä–∞–ø–∏–ª–∏ –Ω–∞ –≤–æ—Ä–æ–≥–∞ ! ‚öîÔ∏è</h2>
            <h1 style={{ animation: "fadeIn 1s ease forwards", marginBottom:20, fontSize: "2.2em", textAlign:"center" }}>{enemyStats?.name}</h1>
            <div
              style={{
                display: "flex",
                flexDirection: "row",
                justifyContent: "center",
                alignItems: "center",
                gap: "30px", // –ó–º–µ–Ω—à–µ–Ω–∏–π –ø—Ä–æ–º—ñ–∂–æ–∫
                color: "#fff",
                animation: "fadeIn 1.5s ease forwards",
                marginBottom: "20px", // –°–∫–æ—Ä–∏–≥–æ–≤–∞–Ω–∏–π –≤—ñ–¥—Å—Ç—É–ø
                fontSize: "1.1em"
              }}
              >
                <div style={{ textAlign: "center" }}> ‚ù§Ô∏è {enemyHP}</div>
                <div style={{ textAlign: "center" }}> üó°Ô∏è {enemyStats?.damage}</div>
                <div style={{ textAlign: "center" }}> üõ°Ô∏è {enemyStats?.defense}</div> {/* –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –∑ enemyDEF */}
            </div>
            <img
              src={enemyImage}
              alt={enemyStats?.name}
              style={{
                marginTop: "10px", // –°–∫–æ—Ä–∏–≥–æ–≤–∞–Ω–∏–π –≤—ñ–¥—Å—Ç—É–ø
                marginBottom: "20px", // –°–∫–æ—Ä–∏–≥–æ–≤–∞–Ω–∏–π –≤—ñ–¥—Å—Ç—É–ø
                width: "120px", // –°–∫–æ—Ä–∏–≥–æ–≤–∞–Ω–∏–π —Ä–æ–∑–º—ñ—Ä
                height: "120px",
                objectFit: "contain",
                display: "block", // –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Ü–µ –±–ª–æ–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö –≤—ñ–¥—Å—Ç—É–ø—ñ–≤, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
                animation: "fadeIn 0.6s ease forwards",
                borderRadius: "8px"
              }}
            />
            <h2
              style={{
                display: "flex",
                flexDirection: "row",
                justifyContent: "center",
                alignItems: "center",
                gap: "40px", // –¶–µ –º–æ–∂–µ –±—É—Ç–∏ –∑–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ, —è–∫—â–æ —Ü–µ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
                color: "#fff",
                animation: "fadeIn 2s ease forwards",
                marginBottom: "10px", // –°–∫–æ—Ä–∏–≥–æ–≤–∞–Ω–æ
                fontSize: "1.2em"
              }}
            >
              –í–∞—à—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ :</h2>
            <div
              style={{
                display: "flex",
                flexDirection: "row",
                justifyContent: "center", // –ë—É–ª–æ "space-around"
                alignItems: "center",
                gap: "25px", // –ó–º–µ–Ω—à–µ–Ω–∏–π –ø—Ä–æ–º—ñ–∂–æ–∫
                marginBottom: "30px",
                color: "#fff",
                animation: "fadeIn 2.5s ease forwards",
                fontSize: "1.1em",
                width: "100%", // –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –∑–∞–π–º–∞—î —à–∏—Ä–∏–Ω—É –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
                maxWidth: "350px" // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —à–∏—Ä–∏–Ω–∞ –¥–ª—è —Ä—è–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
              }}
            >
              <div style={{ textAlign: "center" }}> ‚ù§Ô∏è {playerHP}</div>
              <div style={{ textAlign: "center" }}> üó°Ô∏è {playerStats.attack}</div>
              <div style={{ textAlign: "center" }}> üõ°Ô∏è {playerDEF}</div>
              <div style={{ textAlign: "center" }}> ‚ö° {energy}</div>
            </div>
            <div style={{
                position:"absolute", // –ó–∞–ª–∏—à–µ–Ω–æ –∑–≥—ñ–¥–Ω–æ –∑ –≤–∞—à–∏–º –º–∞–∫–µ—Ç–æ–º
                display: "flex",
                justifyContent: "center",
                alignItems: "center",
                animation: "fadeIn 3s ease forwards",
                bottom: "25px",
                left: 0, // –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –æ—Ö–æ–ø–ª—é—î —à–∏—Ä–∏–Ω—É –¥–ª—è —Ü–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è
                right: 0, // –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –æ—Ö–æ–ø–ª—é—î —à–∏—Ä–∏–Ω—É –¥–ª—è —Ü–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è
                gap:"20px",
                width: "100%", // –Ø–≤–Ω–∞ —à–∏—Ä–∏–Ω–∞
                padding: "0 20px", // –í—ñ–¥—Å—Ç—É–ø –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞ –º–∞–ª–µ–Ω—å–∫–∏—Ö –µ–∫—Ä–∞–Ω–∞—Ö
                boxSizing: "border-box"
            }}>
              <Link href="/home" style={{flex: 1, maxWidth: '150px'}}> {/* Flex –¥–ª—è —Ä–æ–∑–º—ñ—Ä—É –∫–Ω–æ–ø–æ–∫ */}
                <Button stretched size="l" style={{ animation: "fadeIn 0.6s ease forwards" /* backgroundColor:"#f44336" - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ mode */ }}>
                  –í—Ç–µ–∫—Ç–∏
                </Button>
              </Link>
              <Button
                  stretched
                  size="l"
                  style={{ animation: "fadeIn 0.6s ease forwards", flex: 1, maxWidth: '200px' /* backgroundColor:"#4caf50" - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ mode */ }}
                  onClick={handleStartBattle}
                  disabled={isLoading || energy < 1} // –í–∏–º–∫–Ω—É—Ç–∏, —è–∫—â–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–±–æ –Ω–µ–º–∞—î –µ–Ω–µ—Ä–≥—ñ—ó
              >
              ‚öîÔ∏è –ü–æ—á–∞—Ç–∏ –±—ñ–π {energy < 1 ? "" : "(1‚ö°)"} ‚öîÔ∏è
              </Button>
            </div>
          </Card>
      </Page>
    );
  }
  
  // --- –ï–∫—Ä–∞–Ω –±–æ—é ---
  return (
    <Page>
        <Toaster position="top-center" toastOptions={{ duration: 2000 }} />
      <div 
        style={{
          position: "fixed", top: 0, left: 0, width: "100%", height: "100%",
          display: "flex",
          flexDirection: "column",
          alignItems: "center",
          animation: "fadeIn 1s ease forwards", // –í–∏–∑–Ω–∞—á—Ç–µ fadeIn, —è–∫—â–æ –Ω–µ –≥–ª–æ–±–∞–ª—å–Ω–æ
          color: "#fff", // –ö–æ–ª—ñ—Ä —Ç–µ–∫—Å—Ç—É –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –¥–ª—è —Ü—å–æ–≥–æ –≤–∏–≥–ª—è–¥—É
          // justifyContent: "center", // –í–º—ñ—Å—Ç –ø–æ–∑–∏—Ü—ñ–æ–Ω—É—î—Ç—å—Å—è –∞–±—Å–æ–ª—é—Ç–Ω–æ/flex –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ
          // backgroundImage: "url('/bg/bgforestnght1.jpg')", // –ü–µ—Ä–µ–º—ñ—â–µ–Ω–æ —É –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π div
          // backgroundRepeat: "no-repeat",
          // backgroundSize: "cover",
          // backgroundPosition: "center",
        }}
      >
        {/* –®–∞—Ä —Ñ–æ–Ω–æ–≤–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è */}
        <div style={{
            position: "absolute",
            width: "100%",
            height: "100%", // –û—Ö–æ–ø–ª—é—î –≤–µ—Å—å –µ–∫—Ä–∞–Ω
            backgroundImage: "url('/bg/bgforestnght1.jpg')", // –í–∞—à —Ñ–æ–Ω
            backgroundRepeat: "no-repeat",
            backgroundSize: "cover",
            backgroundPosition: "center",
            zIndex: -1 // –ó–∞ —ñ–Ω—à–∏–º –≤–º—ñ—Å—Ç–æ–º
        }}></div>
        {/* –í–µ—Ä—Ö–Ω—è —Å–µ–∫—Ü—ñ—è: –¢–∞–π–º–µ—Ä —Ö–æ–¥—É + –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –µ—Ç–∞–ø */}
        <div style={{
            position: "absolute",
            width: "calc(100% - 40px)", // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞ —à–∏—Ä–∏–Ω–∞
            maxWidth: "600px", // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —à–∏—Ä–∏–Ω–∞ –¥–ª—è —Å–º—É–≥–∏ —Ç–∞–π–º–µ—Ä–∞
            top: "10px",
            left: "50%",
            transform: "translateX(-50%)",
            zIndex: 10, // –ù–∞–¥ —Ñ–æ–Ω–æ–º
        }}>
            {/* ProgressBar —Ç–∞–π–º–µ—Ä–∞ —Ö–æ–¥—É - –ø—Ä–∏–ø—É—Å–∫–∞—é—á–∏, —â–æ —Ü–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, —è–∫–∏–π —É –≤–∞—Å —î */}
            {/* <ProgressBar value={turnTimer} max={15} color="#fbbf24" /> */}
            {/* –ó–∞–º—ñ–Ω–∞ –ø—Ä–æ—Å—Ç–∏–º div, —è–∫—â–æ ProgressBar –Ω–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π */}
             <div style={{ backgroundColor: '#555', borderRadius: '4px', overflow: 'hidden', border: '1px solid #777' }}>
                <div style={{ width: `${(turnTimer / 15) * 100}%`, backgroundColor: '#fbbf24', height: '10px', transition: 'width 0.5s ease' }}></div>
            </div>
            {renderStageInfo()} {/* –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –µ—Ç–∞–ø –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è —Ç—É—Ç */}
        </div>
        {/* –ó–æ–Ω–∞ –≤–æ—Ä–æ–≥–∞ */}
        <div style={{
            position: "absolute", // –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –ø–æ—Ç—Ä–µ–± –≤–∞—à–æ–≥–æ –º–∞–∫–µ—Ç–∞
            top: "50%", // –ó–∞–ª–∏—à—Ç–µ –º—ñ—Å—Ü–µ –¥–ª—è —Ç–∞–π–º–µ—Ä–∞ —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –µ—Ç–∞–ø
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            zIndex: 5,
        }}>
            {enemyStats && (
                <>
                    <div style={{marginBottom: '5px', fontSize: '1.2em', fontWeight: 'bold', textShadow: '1px 1px 2px black'}}>{enemyStats.name}</div>
                    {/* –°–º—É–≥–∞ HP –≤–æ—Ä–æ–≥–∞ - –ø—Ä–∏–ø—É—Å–∫–∞—é—á–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç ProgressBar */}
                    {/* <ProgressBar value={enemyHP} max={enemyStats.maxHealth} color="#f44336" /> */}
                    <div style={{ width: '150px', backgroundColor: '#555', borderRadius: '4px', overflow: 'hidden', border: '1px solid #777', marginBottom: '5px' }}>
                        <div style={{ width: `${(enemyHP / enemyStats.maxHealth) * 100}%`, backgroundColor: '#f44336', height: '12px', transition: 'width 0.5s ease', textAlign:'center', fontSize:'10px', lineHeight:'12px' }}>
                            {enemyHP}/{enemyStats.maxHealth}
                        </div>
                    </div>
                    <img
                      src={enemyImage}
                      alt={enemyStats?.name}
                      style={{
                        // marginLeft: 0, // –¶–µ–Ω—Ç—Ä–æ–≤–∞–Ω–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–º –µ–ª–µ–º–µ–Ω—Ç–æ–º
                        // marginTop: 10, // –û–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–º –ø—Ä–æ–º—ñ–∂–∫–æ–º/–≤—ñ–¥—Å—Ç—É–ø–æ–º
                        marginBottom: 5,
                        width: "140px",
                        height: "140px",
                        objectFit: "contain",
                        animation: isHit ? "hitFlash 0.3s ease" : undefined, // –í–∏–∑–Ω–∞—á—Ç–µ –∞–Ω—ñ–º–∞—Ü—ñ—é hitFlash
                        cursor: canAttack && !battleResult && playerHP > 0 ? "pointer" : "default",
                        transition: "transform 0.2s ease",
                        filter: playerHP <= 0 ? 'grayscale(100%)' : 'none' // –ó—Ä–æ–±–∏—Ç–∏ —Å—ñ—Ä–∏–º, —è–∫—â–æ –≥—Ä–∞–≤–µ—Ü—å –ø–µ—Ä–µ–º–æ–∂–µ–Ω–∏–π
                      }}
                      onClick={() => {
                        if (canAttack && !battleResult && playerHP > 0 && enemyHP > 0) {
                          setIsHit(true); // –í—ñ–∑—É–∞–ª—å–Ω–∏–π –≤—ñ–¥–≥—É–∫ –Ω–∞ –≤–æ—Ä–æ–≥–∞
                          handleAttack();
                          // setIsEnemyHit(true); // –Ø–∫—â–æ —É –≤–∞—Å —î –æ–∫—Ä–µ–º–∞ –∞–Ω—ñ–º–∞—Ü—ñ—è –¥–ª—è —É–¥–∞—Ä—É –ø–æ –≤–æ—Ä–æ–≥—É
                          // setTimeout(() => setIsEnemyHit(false), 200);
                          setTimeout(() => setIsHit(false), 300); // –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å hitFlash
                        }
                      }}
                    />
                    {hitText && ( // –ê–Ω—ñ–º–∞—Ü—ñ—è —Ç–µ–∫—Å—Ç—É —à–∫–æ–¥–∏
                      <div
                        key={hitText.id} // –ö–ª—é—á React –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
                        style={{
                          position: "absolute", // –í—ñ–¥–Ω–æ—Å–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–æ—Ä–æ–≥–∞ –∞–±–æ —Ü—å–æ–≥–æ div
                          top: "40%", // –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –¥–ª—è –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è
                          left: "50%",
                          transform: "translateX(-50%)",
                          fontSize: "24px",
                          color: "#ff4747",
                          fontWeight: "bold",
                          animation: "hit-float 1s ease-out forwards", // –í–∏–∑–Ω–∞—á—Ç–µ –∞–Ω—ñ–º–∞—Ü—ñ—é hit-float
                          pointerEvents: "none",
                          textShadow: '1px 1px 1px black'
                        }}
                      >
                        - {hitText.value}
                      </div>
                    )}
                    {/* –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ—Ä–æ–≥–∞ –ø—ñ–¥ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º */}
                    <div style={{ display: 'flex', gap: '15px', marginTop: '5px', fontSize: '0.9em', backgroundColor: 'rgba(0,0,0,0.5)', padding: '5px 10px', borderRadius: '5px' }}>
                        <span>‚ù§Ô∏è {enemyHP} / {enemyStats.maxHealth}</span>
                        <span>üó°Ô∏è {enemyStats.damage}</span>
                        <span>üõ°Ô∏è {enemyDEF}</span>
                    </div>
                </>
            )}
        </div>
        {/* –ó–æ–Ω–∞ –≥—Ä–∞–≤—Ü—è —Ç–∞ –µ–ª–µ–º–µ–Ω—Ç–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è - –≤–Ω–∏–∑—É */}
        <div
          style={{
            position: "absolute",
            width: "100%",
            bottom: 0,
            display: "flex",
            flexDirection: "column",
            alignItems: "center",
            backgroundColor: "rgba(0, 0, 0, 0.6)", // –ù–∞–ø—ñ–≤–ø—Ä–æ–∑–æ—Ä–∏–π —Ñ–æ–Ω –¥–ª—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≥—Ä–∞–≤—Ü—è
            paddingTop: "5px", // –ü—Ä–æ—Å—Ç—ñ—Ä –¥–ª—è —Å–º—É–≥–∏ HP
            zIndex: 10,
          }}>
            {/* –°–º—É–≥–∞ HP –≥—Ä–∞–≤—Ü—è —É —Å–∞–º–æ–º—É –≤–µ—Ä—Ö—É —Ü—ñ—î—ó –Ω–∏–∂–Ω—å–æ—ó —Å–µ–∫—Ü—ñ—ó */}
            {playerStats && (
                 <div style={{ width: '80%', maxWidth:'400px', backgroundColor: '#555', borderRadius: '4px', overflow: 'hidden', border: '1px solid #777', marginBottom: '5px' }}>
                    <div style={{ width: `${(playerHP / playerStats.health) * 100}%`, backgroundColor: 'rgba(60, 255, 0, 0.73)', height: '12px', transition: 'width 0.5s ease', textAlign:'center', fontSize:'10px', lineHeight:'12px'  }}>
                        {playerHP}/{playerStats.health}
                    </div>
                </div>
            )}
            <div
            style={{
              display: "flex",
              flexDirection: "column", // –†–æ–∑–º—ñ—Å—Ç–∏—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç–æ–≤–ø—Ü–µ–º
              justifyContent: "center",
              alignItems: "center",
              gap: "5px", // –ó–º–µ–Ω—à–µ–Ω–∏–π –ø—Ä–æ–º—ñ–∂–æ–∫
              // marginTop: "0px", // –í–∏–¥–∞–ª–µ–Ω–æ
              marginBottom:10,
              color: "#fff",
              animation: "fadeIn 0.6s ease forwards", // –í–∏–∑–Ω–∞—á—Ç–µ fadeIn
            }}
            >
              <h2 style={{
                  marginTop: 5, // –ó–º–µ–Ω—à–µ–Ω–∏–π –≤—ñ–¥—Å—Ç—É–ø
                  marginBottom:5,
                  fontSize: "1.2em", // –°–∫–æ—Ä–∏–≥–æ–≤–∞–Ω–∏–π —Ä–æ–∑–º—ñ—Ä
                  // animation: "fadeIn 0.6s ease forwards", // –í–∂–µ –Ω–∞ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–º—É –µ–ª–µ–º–µ–Ω—Ç—ñ
              }}> –í–∞—à—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ :</h2>
              <div
                  style={{
                  display: "flex",
                  flexDirection: "row",
                  justifyContent: "center",
                  alignItems: "center",
                  gap: "20px", // –ó–º–µ–Ω—à–µ–Ω–∏–π –ø—Ä–æ–º—ñ–∂–æ–∫
                  // marginTop: "0px", // –í–∏–¥–∞–ª–µ–Ω–æ
                  // marginBottom:0, // –í–∏–¥–∞–ª–µ–Ω–æ
                  // animation: "fadeIn 0.6s ease forwards", // –í–∂–µ –Ω–∞ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–º—É –µ–ª–µ–º–µ–Ω—Ç—ñ
                  fontSize: "1em" // –°–∫–æ—Ä–∏–≥–æ–≤–∞–Ω–∏–π —Ä–æ–∑–º—ñ—Ä
                }}
                >
                {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä–∞–≤—Ü—è */}
                <span>‚ù§Ô∏è {playerHP}</span>
                <span>üó°Ô∏è {playerStats.attack}</span>
                <span>üõ°Ô∏è {playerDEF}</span>
              </div>
            </div>
             {/* –ö–Ω–æ–ø–∫–∞ –ü–æ–∫–∞–∑–∞—Ç–∏/–°—Ö–æ–≤–∞—Ç–∏ –ª–æ–≥ - —Ä–æ–∑–º—ñ—â–µ–Ω–∞ —Ç—É—Ç –¥–ª—è –∫—Ä–∞—â–æ–≥–æ UX –ø—ñ–¥ —á–∞—Å –±–æ—é */}
            <Button
                size="s"
                mode="outline" // –ê–±–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Ä–µ–∂–∏–º
                style={{marginTop: '5px', marginBottom: '10px', borderColor: '#888', color: '#ccc'}}
                onClick={() => setShowLog(!showLog)}
                disabled={battleResult !== null} // –í–∏–º–∫–Ω—É—Ç–∏, —è–∫—â–æ –±—ñ–π –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è
            >
                {showLog ? "–°—Ö–æ–≤–∞—Ç–∏ –ª–æ–≥" : "–ü–æ–∫–∞–∑–∞—Ç–∏ –ª–æ–≥"}
            </Button>
        </div>
        {/* –õ–æ–≥ –±–æ—é - –∑'—è–≤–ª—è—î—Ç—å—Å—è –Ω–∞–¥ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –≥—Ä–∞–≤—Ü—è, –∫–æ–ª–∏ –∞–∫—Ç–∏–≤–Ω–∏–π */}
        {showLog && !battleResult && ( // –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ –ª–æ–≥ –ø—ñ–¥ —á–∞—Å –±–æ—é, –ª–∏—à–µ —è–∫—â–æ –Ω–µ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
            <Card style={{
                position: 'absolute',
                bottom: '140px', // –ù–∞–ª–∞—à—Ç—É–π—Ç–µ, —â–æ–± –±—É–ª–æ –Ω–∞–¥ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –≥—Ä–∞–≤—Ü—è
                width: 'calc(100% - 40px)',
                maxWidth: '500px',
                left: '50%',
                transform: 'translateX(-50%)',
                maxHeight: '100px', // –ó–º–µ–Ω—à–µ–Ω–∞ –≤–∏—Å–æ—Ç–∞
                overflowY: 'auto',
                padding: '8px',
                backgroundColor: 'rgba(0,0,0,0.7)',
                border: '1px solid #444',
                borderRadius: '5px',
                fontSize: '0.8em',
                zIndex: 15
            }}>
                {log.length === 0 ? <div>–õ–æ–≥ –ø–æ—Ä–æ–∂–Ω—ñ–π.</div> :
                 log.map((entry, index) => <div key={index} style={{borderBottom: '1px dashed #333', paddingBottom: '2px', marginBottom: '2px'}}>{entry}</div>)}
            </Card>
        )}
      </div>

        {battleResult && (
        <div // –ü–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–µ –Ω–∞–∫–ª–∞–¥–µ–Ω–Ω—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
            style={{
            position: "fixed",
            top: 0, left: 0, width: "100%", height: "100%",
            backgroundColor: "rgba(0, 0, 0, 0.96)", // –¢–µ–º–Ω—ñ—à–µ –Ω–∞–∫–ª–∞–¥–µ–Ω–Ω—è
            display: "flex", flexDirection: "column",
            justifyContent: "center", alignItems: "center",
            color: "#fff", zIndex: 9999, // –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–æ–Ω–æ –∑–≤–µ—Ä—Ö—É
            padding: "20px",
            boxSizing: "border-box"
            }}
            role="dialog"
            aria-modal="true"
            aria-labelledby="battleResultTitle"
        >
            <Toaster position="top-center" toastOptions={{ duration: 2000 }} />
            <h2
            id="battleResultTitle"
            style={{
                fontSize: "3em", // –ë—ñ–ª—å—à–∏–π –µ–º–æ–¥–∑—ñ
                marginTop: 0, // –°–∫–æ—Ä–∏–≥–æ–≤–∞–Ω–∏–π –≤—ñ–¥—Å—Ç—É–ø
                marginBottom: 20, // –°–∫–æ—Ä–∏–≥–æ–≤–∞–Ω–∏–π –≤—ñ–¥—Å—Ç—É–ø
                color: "#fffc",
            }}
            >
            {battleResult === "win" ? "üéä" : "üíÄ"}
            </h2>
            <h2 style={{ fontSize: "2.5em", margin: 0, marginBottom: 20, textAlign: 'center' }}>
            {battleResult === "win" ? "–ü–µ—Ä–µ–º–æ–≥–∞!" : "–ü–æ—Ä–∞–∑–∫–∞!"}
            </h2>
            <p style={{ fontSize: "1.1em", margin: 0, marginBottom: 30, textAlign: 'center' }}>
            {battleResult === "win"
                ? "‚ú® –í–∞–º –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É! ‚ú®"
                : "–°—Ö–æ–∂–µ, –Ω–µ –ø–æ—â–∞—Å—Ç–∏–ª–æ —Ü—å–æ–≥–æ —Ä–∞–∑—É..."}
            </p>
            <Button
            onClick={() => setShowLog(prev => !prev)}
            mode="outline" // –°—Ç–∏–ª—å VKUI
            style={{
                marginBottom: 25,
                // backgroundColor: "transparent", // –û–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —Ä–µ–∂–∏–º–æ–º
                // border: "1px solid #fff", // –û–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —Ä–µ–∂–∏–º–æ–º
                // borderRadius: 8, // –û–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —Ä–µ–∂–∏–º–æ–º
                // color: "#fff", // –û–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —Ä–µ–∂–∏–º–æ–º
            }}
            aria-label={showLog ? "–°—Ö–æ–≤–∞—Ç–∏ –ª–æ–≥ –±–æ—é" : "–ü–æ–∫–∞–∑–∞—Ç–∏ –ª–æ–≥ –±–æ—é"}
            >
            üìú {showLog ? "–°—Ö–æ–≤–∞—Ç–∏ –ª–æ–≥ –±–æ—é" : "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ª–æ–≥ –±–æ—é"}
            </Button>
            {/* –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ª–æ–≥—É –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ */}
            {showLog && (
            <div
                style={{
                // marginTop: 20, // –ù—ñ, –æ—Å–∫—ñ–ª—å–∫–∏ —Ü–µ —É–º–æ–≤–Ω–æ
                maxHeight: 150, // –ó–º–µ–Ω—à–µ–Ω–∞ –≤–∏—Å–æ—Ç–∞
                overflowY: "auto",
                padding: 12,
                border: "1px solid #555", // –°–∫–æ—Ä–∏–≥–æ–≤–∞–Ω–∞ —Ä–∞–º–∫–∞
                borderRadius: 8,
                backgroundColor: "rgba(0,0,0,0.3)", // –¢–µ–º–Ω—ñ—à–∏–π –ø—Ä–æ–∑–æ—Ä–∏–π
                width: "90%",
                maxWidth: "400px", // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —à–∏—Ä–∏–Ω–∞ –¥–ª—è –ª–æ–≥—É
                color: "#eee", // –°–≤—ñ—Ç–ª—ñ—à–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –ª–æ–≥—É
                marginBottom: "20px" // –ü—Ä–æ—Å—Ç—ñ—Ä –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–∞–º–∏
                }}
                aria-label="–ñ—É—Ä–Ω–∞–ª –±–æ—é"
            >
                {log.length === 0
                ? <div style={{ opacity: 0.6 }}>–õ–æ–≥ —â–µ –ø–æ—Ä–æ–∂–Ω—ñ–π</div>
                : log.map((entry, idx) => (
                    <div key={idx} style={{paddingBottom: '2px', marginBottom: '2px', borderBottom: '1px dotted #444'}}>{entry}</div>
                ))}
            </div>
            )}
            {/* –ö–Ω–æ–ø–∫–∏ –¥—ñ–π –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ */}
            <div style={{
                position:"absolute", // –ù–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ, —è–∫—â–æ –≤–º—ñ—Å—Ç –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –ø–ª–∞–≤–∞—é—á–∏–π
                bottom: "33px", //
                display: "flex",
                justifyContent: "center",
                alignItems: "center",
                animation: "fadeIn 0.6s ease forwards", // –í–∏–∑–Ω–∞—á—Ç–µ fadeIn
                // paddingBottom: 20, // –í—ñ–¥—Å—Ç—É–ø –Ω–∞ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–º—É –µ–ª–µ–º–µ–Ω—Ç—ñ
                // paddingTop: 20, // –í—ñ–¥—Å—Ç—É–ø –Ω–∞ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–º—É –µ–ª–µ–º–µ–Ω—Ç—ñ
                gap:"15px", // –ü—Ä–æ–º—ñ–∂–æ–∫ –º—ñ–∂ –∫–Ω–æ–ø–∫–∞–º–∏
                width: "100%",
                maxWidth: "400px", // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —à–∏—Ä–∏–Ω–∞ –¥–ª—è —Ä—è–¥–∫–∞ –∫–Ω–æ–ø–æ–∫
                // backgroundColor: "rgba(0, 0, 0, 0.64)", // –í–∏–¥–∞–ª–µ–Ω–æ, –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –º–∞—î —Ñ–æ–Ω
            }}>
            <Link href="/home" style={{flex:1}}>
                <Button
                size="m"
                stretched
                style={{
                    // backgroundColor: "#f44336", // –û–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —Ä–µ–∂–∏–º–æ–º
                    // color: "#fff", // –û–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —Ä–µ–∂–∏–º–æ–º
                    animation: "fadeIn 0.6s ease forwards",
                }}
                aria-label="–í—Ç–µ–∫—Ç–∏ –¥–æ–¥–æ–º—É"
                >
                –í—Ç–µ–∫—Ç–∏
                </Button>
            </Link>
            {battleResult === "win" && (
                <Button
                size="m"
                stretched
                style={{
                    animation: "fadeIn 0.6s ease forwards",
                    // backgroundColor: "#4caf50", // –û–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —Ä–µ–∂–∏–º–æ–º
                    // color: "#fff" // –û–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —Ä–µ–∂–∏–º–æ–º
                    flex:1 // –ó—Ä–æ–±–∏—Ç–∏ –∫–Ω–æ–ø–∫–∏ —Ä—ñ–≤–Ω–æ—ó —à–∏—Ä–∏–Ω–∏
                }}
                aria-label="–î–∞–ª—ñ"
                onClick={handleWinNext} // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –Ω–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫
                >
                ‚öîÔ∏è –î–∞–ª—ñ ‚öîÔ∏è
                </Button>
            )}
            {battleResult === "lose" && (
                <Button
                size="m"
                stretched
                style={{
                    animation: "fadeIn 0.6s ease forwards",
                    // backgroundColor: "#ffc107", // –ü—Ä–∏–∫–ª–∞–¥: –±—É—Ä—à—Ç–∏–Ω–æ–≤–∏–π –∫–æ–ª—ñ—Ä –¥–ª—è "—Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É"
                    // color: "#000"
                    flex:1 // –ó—Ä–æ–±–∏—Ç–∏ –∫–Ω–æ–ø–∫–∏ —Ä—ñ–≤–Ω–æ—ó —à–∏—Ä–∏–Ω–∏
                }}
                aria-label="–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É"
                onClick={handleLossRetry} // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –Ω–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫
                >
                üõ°Ô∏è –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É üõ°Ô∏è
                </Button>
            )}
            </div>
        </div>
        )}
      {/* </Card> –ö—ñ–Ω–µ—Ü—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ Card –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ - –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Ü–µ–π Card –Ω–µ –ª–∞–º–∞—î –º–∞–∫–µ—Ç, —è–∫—â–æ –≤—ñ–Ω –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π –±—É—Ç–∏ –æ–±–≥–æ—Ä—Ç–∫–æ—é –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ */}
    </Page>
  );
}