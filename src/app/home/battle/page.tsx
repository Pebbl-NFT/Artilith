"use client";
import React, { useState, useCallback, useEffect, CSSProperties } from 'react';
import { useRouter } from 'next/navigation';
import ReactMarkdown from 'react-markdown';
import { useSignal, initData } from '@telegram-apps/sdk-react';
import { supabase } from '@/lib/supabaseClient';
import { Toaster, toast } from "react-hot-toast";
import { useEnergy } from '@/context/EnergyContext';
import { getPlayerStats } from '@/utils/getPlayerStats';
import { fetchInventory } from '@/hooks/useInventory';
import { EnemyStatusBar } from '@/components/Adventure/EnemyStatusBar';

// --- –°–¢–ò–õ–Ü ---
const styles: { [key: string]: CSSProperties } = {
  pageContainer: { width: '100vw', height: '100vh', backgroundImage: `url('/bg/dark_forest_path_blur.jpg')`, backgroundSize: 'cover', backgroundPosition: 'center', display: 'flex', flexDirection: 'column', fontFamily: "'Spectral', serif" },
  storyContainer: { flex: 1, overflowY: 'auto', padding: '20px', paddingTop: '10px', color: '#e0e7ff', display: 'flex', flexDirection: 'column' },
  storyContent: { backgroundColor: 'rgba(10, 5, 20, 0.7)', backdropFilter: 'blur(10px)', padding: '20px', borderRadius: '12px', border: '1px solid rgba(129, 140, 248, 0.2)', fontSize: '18px', lineHeight: 1.7, marginTop: 'auto' },
  playerStatusContainer: { padding: '10px 15px', background: 'linear-gradient(to top, rgba(10, 5, 20, 1), rgba(10, 5, 20, 0.7))', borderTop: '1px solid rgba(129, 140, 248, 0.3)', display: 'flex', justifyContent: 'space-around', alignItems: 'center', gap: '15px' },
  playerStat: { display: 'flex', alignItems: 'center', gap: '8px', fontSize: '16px', fontWeight: 'bold', color: '#fff' },
  actionsContainer: { padding: '15px', background: 'rgba(10, 5, 20, 1)', display: 'flex', flexDirection: 'column', gap: '10px' },
  actionButton: { padding: "16px 20px", fontSize: 16, borderRadius: '10px', border: "1px solid rgba(129, 140, 248, 0.5)", background: 'linear-gradient(145deg, #4338ca, #6d28d9)', color: "#fff", cursor: "pointer", transition: "transform 0.1s ease, box-shadow 0.2s ease", fontWeight: 600, boxShadow: "0 4px 15px rgba(0,0,0,0.3)", textAlign: 'center' },
  backButton: { padding: "12px 20px", fontSize: 16, borderRadius: '10px', border: "1px solid rgba(100, 116, 139, 0.7)", background: 'rgba(100, 116, 139, 0.5)', color: "#e0e7ff", cursor: "pointer", transition: "background-color 0.2s ease", fontWeight: 500, textAlign: 'center', marginTop: '10px' },
  loadingOverlay: { position: "fixed", top: 0, left: 0, right: 0, bottom: 0, background: "rgba(10, 5, 20, 0.85)", backdropFilter: 'blur(5px)', display: "flex", alignItems: "center", justifyContent: "center", fontSize: 24, zIndex: 100, color: '#fff' },
  // FIX: –°—Ç–∏–ª—ñ –¥–ª—è –ª–æ–≥—É –ø–æ–¥—ñ–π
  logContainer: { 
    position: 'fixed',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(10, 5, 20, 0.85)',
    backdropFilter: 'blur(10px)',
    zIndex: 110,
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'center',
    padding: '20px',
  },
  logMessage: { 
    fontSize: '16px', 
    color: '#c7d2fe', 
    marginBottom: '8px', 
    animation: 'fadeIn 0.5s ease',
    borderBottom: '1px solid rgba(129, 140, 248, 0.1)',
    paddingBottom: '8px',
  },
  logButton: {
    position: 'absolute',
    top: '15px',
    right: '15px',
    background: 'rgba(129, 140, 248, 0.2)',
    border: '1px solid rgba(129, 140, 248, 0.5)',
    color: '#e0e7ff',
    width: '40px',
    height: '40px',
    borderRadius: '50%',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    fontSize: '20px',
    cursor: 'pointer',
    zIndex: 50,
  }
};

// --- –Ü–ù–¢–ï–†–§–ï–ô–°–ò ---
interface Enemy { name: string; health: number; maxHealth: number; attack: number; defense: number; }
interface LogEntry { id: number; message: string; }
type Outcome =
  | { type: 'REWARD'; item: 'points' | 'atl_balance' | 'ton_balance'; amount: number }
  | { type: 'XP'; amount: number }
  | { 
      type: 'ITEM'; 
      item_key: string;
      item_name: string; 
      item_type: string;
      sub_type: string;
      rarity: string; 
      stats: { damage?: number; defense?: number; };
    } 
  | { type: 'BATTLE'; enemy: Omit<Enemy, 'maxHealth'> }
  | { type: 'COMBAT_TURN'; player_hp_change: number; enemy_hp_change: number; }
  | { type: 'GAME_OVER'; reason: string; } // –ù–æ–≤–∏–π —Ç–∏–ø
  | null;
interface AIResponse {
  story: string;
  choices: string[];
  outcome?: Outcome | Outcome[];
  choiceOutcomes?: { [key: string]: Outcome | Outcome[] }; // –ö–ª—é—á - —Ü–µ —Ç–µ–∫—Å—Ç –≤–∏–±–æ—Ä—É
}
interface PlayerData {
  level: number; character_class: string; points: number;
  health: number; attack: number; defense: number; currentHP: number;
}

// --- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–∞–Ω–µ–ª—ñ —Å—Ç–∞–Ω—É –≥—Ä–∞–≤—Ü—è ---
const PlayerStatusBar = ({ playerData }: { playerData: PlayerData | null }) => {
  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ö—É–∫ useEnergy –ø—Ä—è–º–æ —Ç—É—Ç, —â–æ–± –∑–∞–≤–∂–¥–∏ –º–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
  const { energy } = useEnergy(); 

  if (!playerData) return null;
  return (
    <div style={styles.playerStatusContainer}>
      <div style={styles.playerStat}><span>‚ù§Ô∏è</span><span>{playerData.currentHP} / {playerData.health}</span></div>
      <div style={styles.playerStat}><span>üó°Ô∏è</span><span>{playerData.attack}</span></div>
      <div style={styles.playerStat}><span>üõ°Ô∏è</span><span>{playerData.defense}</span></div>
      <div style={styles.playerStat}><span>‚ö°</span><span>{energy}</span></div>
    </div>
  );
};

// --- –ì–û–õ–û–í–ù–ò–ô –ö–û–ú–ü–û–ù–ï–ù–¢ ---
export default function TextAdventurePage() {
  const router = useRouter();
  const initDataState = useSignal(initData.state);
  const userId = initDataState?.user?.id;
  const { energy, spendEnergy } = useEnergy();
  
  const [story, setStory] = useState<string>("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...");
  const [choices, setChoices] = useState<string[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [playerData, setPlayerData] = useState<PlayerData | null>(null);
  const [isInCombat, setIsInCombat] = useState<boolean>(false);
  const [enemy, setEnemy] = useState<Enemy | null>(null);
  const [chatHistory, setChatHistory] = useState<any[]>([]);
  const combatChoices = ["üó°Ô∏è –ê—Ç–∞–∫—É–≤–∞—Ç–∏", "üõ°Ô∏è –ó–∞—Ö–∏—â–∞—Ç–∏—Å—å", "üèÉ –í—Ç–µ–∫—Ç–∏"];
  const [pendingOutcomes, setPendingOutcomes] = useState<{ [key: string]: Outcome | Outcome[] } | null>(null);
  
  // FIX: –°—Ç–∞–Ω –¥–ª—è –ª–æ–≥—É –ø–æ–¥—ñ–π —Ç–∞ —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –∑–≤—ñ—Ç—É
  const [eventLog, setEventLog] = useState<LogEntry[]>([]);
  const [isLogVisible, setIsLogVisible] = useState(false);
  const [adventureStep, setAdventureStep] = useState(1);
  const [adventureSummary, setAdventureSummary] = useState<Map<string, number>>(new Map());
  const [isGameOver, setIsGameOver] = useState(false);

  // FIX: –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤ –ª–æ–≥
  const addToLog = (message: string) => {
    setEventLog(prevLog => [{ id: Date.now(), message }, ...prevLog].slice(0, 5)); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 5 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
  };
  
  // FIX: –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–≤—ñ—Ç—É
  const updateSummary = (key: string, amount: number) => {
    setAdventureSummary(prevSummary => {
      const newSummary = new Map(prevSummary);
      newSummary.set(key, (newSummary.get(key) || 0) + amount);
      return newSummary;
    });
  };

  useEffect(() => {
    if (!userId) return;

    const fetchPlayerData = async () => {
      setIsLoading(true);
      try {
        // 1. –û–¥–Ω–æ—á–∞—Å–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –π–æ–≥–æ –ø–æ–≤–Ω–∏–π —ñ–Ω–≤–µ–Ω—Ç–∞—Ä
        const [userDataRes, inventoryData] = await Promise.all([
          supabase.from('users').select('level, character_class, points').eq('id', String(userId)).single(),
          fetchInventory(String(userId)) // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∞—à –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ö—É–∫
        ]);

        if (userDataRes.error) throw userDataRes.error;

        const userData = userDataRes.data;
        if (!userData) {
            toast.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –≥—Ä–∞–≤—Ü—è.");
            return;
        }

        // 2. –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –ø–µ—Ä–µ–¥–∞—é—á–∏ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä –Ü —Ä—ñ–≤–µ–Ω—å
        const playerStats = getPlayerStats(inventoryData, userData.level ?? 1);

        // 3. –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ –¥–æ –∫—É–ø–∏ —ñ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω
        setPlayerData({
          level: userData.level ?? 1,
          character_class: userData.character_class,
          points: userData.points,
          ...playerStats,
          currentHP: playerStats.health, // –ü–æ—á–∞—Ç–∫–æ–≤–µ –∑–¥–æ—Ä–æ–≤'—è –¥–æ—Ä—ñ–≤–Ω—é—î –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É
        });

      } catch (error: any) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≥—Ä–∞–≤—Ü—è:", error);
        toast.error(`–ü–æ–º–∏–ª–∫–∞: ${error.message}`);
      } finally {
        setIsLoading(false);
      }
    };

    fetchPlayerData();
  }, [userId]);
  
  useEffect(() => {
    if (playerData && chatHistory.length === 0) {
      const initialSystemPrompt = `Act as a dark fantasy RPG dungeon master. Your response must be ONLY a JSON object.
        The JSON structure is: {"story": "...", "choices": ["...", "..."], "outcome": ..., "choiceOutcomes": {...}}.

        --- FIELD DESCRIPTIONS ---

        1.  "story": The narrative text describing the current situation.
        2.  "choices": An array of strings representing the player's possible actions.
        3.  "outcome": An immediate outcome that happens regardless of the player's choice. Use this for things that happen TO the player, like starting a battle or gaining passive XP. It can be a single object or an array of objects.
        4.  "choiceOutcomes": **(NEW & IMPORTANT)** An object where keys are the EXACT text from the "choices" array, and values are the outcomes that will happen ONLY if the player makes that specific choice. Use this for rewards the player can choose to take or ignore.

        --- NEW LOGIC FOR REWARDS (ITEMS, POINTS, etc.) ---

        -   **DO NOT** put discoverable items or rewards in the main "outcome" field.
        -   Instead, describe the potential reward in the "story" and link the reward object to a specific choice in the "choiceOutcomes" field.

        --- EXAMPLE OF NEW LOGIC ---

        Correct Example:
        {
          "story": "You defeat the goblin. On the ground, you see a Rusty Dagger.",
          "choices": ["üó°Ô∏è Take the dagger", "üö∂ Leave it"],
          "outcome": { "type": "XP", "amount": 30 }, // Immediate XP for winning the battle
          "choiceOutcomes": {
            "üó°Ô∏è Take the dagger": { "type": "ITEM", "item_name": "Rusty Dagger", "item_type": "weapon", "sub_type": "dagger", "rarity": "common", "stats": {"damage": 2, "defense": 0} }
          }
        }
        // In this example, the player gets XP immediately, but the dagger is only received if they choose to take it.
        

        --- OUTCOME TYPES (Unchanged) ---

        -   Reward: {"type": "REWARD", "item": "points" | "atl_balance" | "ton_balance", "amount": ...}.
        -   Experience: {"type": "XP", "amount": ...}.
        - Initiate Battle: {"type": "BATTLE", "enemy": {"name": "...", "health": 30, "attack": 5, "defense": 2}}.
          - The "enemy" object MUST contain "name", "health", "attack", and "defense". All must be numbers, except "name".
        - Found Item: {"type": "ITEM", "item_key": "...", "item_name": "...", "item_type": "...", "sub_type": "...", "rarity": "common", "stats": {...}}.
          - RULES FOR ITEMS:
                - You MUST generate a stable, English, snake_case "item_key". This key must be unique for each base item type (e.g., "health_potion", "iron_sword").
                - You MUST also generate a translated "item_name" based on the user's language.
                - You are free to invent any creative "item_name".
                - You MUST classify it with a "sub_type".
                - "sub_type" MUST be a single, lowercase English word.
                - For now, the "rarity" for ALL generated items MUST be exactly "common".
        - Combat Turn: {"type": "COMBAT_TURN", "player_hp_change": -5, "enemy_hp_change": -10}.
          - "player_hp_change" and "enemy_hp_change" are REQUIRED and MUST be numbers (positive for healing, negative for damage).
        -   No special outcome: null.

        --- RULE FOR THE FINAL BLOW ---

        -   When the player's attack is enough to defeat the enemy (reduce its HP to 0 or less):
        -   Your "story" MUST describe the victory.
        -   The "outcome" array MUST contain BOTH of these objects:
            1.  The final {"type": "COMBAT_TURN", "player_hp_change": 0, "enemy_hp_change": -XX} object that reduces the enemy's health to 0 or less. The damage number XX must be sufficient.
            2.  The {"type": "XP", "amount": ...} reward for defeating the enemy (equal to the enemy's max health).
        -   The "choices" array MUST contain appropriate post-battle actions (e.g., ["–û–≥–ª—è–Ω—É—Ç–∏ —Ç—ñ–ª–æ", "–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —à–ª—è—Ö"]).

        --- GENERAL RULES ---

        -   When in combat (and the enemy is not defeated yet), the "choices" array MUST be exactly: ["üó°Ô∏è –ê—Ç–∞–∫—É–≤–∞—Ç–∏", "üõ°Ô∏è –ó–∞—Ö–∏—â–∞—Ç–∏—Å—å", "üèÉ –í—Ç–µ–∫—Ç–∏"].
        -   DO NOT show calculations.
        -   The player is a Level ${playerData.level} ${playerData.character_class}.
        -   GAME_OVER: {"type": "GAME_OVER", "reason": "..."}.
        -   I will provide the player's current energy in the prompt like "My character stats: Energy: 1, ...".
        -   If you see that the player's energy is 0 AFTER they perform an action, the story MUST end. The "outcome" for this situation MUST be {"type": "GAME_OVER", "reason": "–í–∏ –ø–æ–≤–Ω—ñ—Å—Ç—é –≤–∏—Å–Ω–∞–∂–∏–ª–∏—Å—å —ñ –∑–Ω–µ–ø—Ä–∏—Ç–æ–º–Ω—ñ–ª–∏ –≤—ñ–¥ –≤—Ç–æ–º–∏."}.
        `;
      const initialHistory = [
        { role: "user", parts: [{ text: initialSystemPrompt }] },
        { role: "model", parts: [{ text: JSON.stringify({ story: "–¢–∏ —Å—Ç–æ—ó—à –Ω–∞ —Ä–æ–∑–¥–æ—Ä—ñ–∂–∂—ñ –≤ –¢–µ–º–Ω–æ–º—É –ª—ñ—Å—ñ...", choices: ["–ô—Ç–∏ –Ω–∞ –ø—ñ–≤–Ω—ñ—á", "–ô—Ç–∏ –Ω–∞ —Å—Ö—ñ–¥", "–û–≥–ª—è–Ω—É—Ç–∏—Å—å –Ω–∞–≤–∫–æ–ª–æ"], outcome: null }) }] }
      ];
      setChatHistory(initialHistory);
      setStory("–¢–∏ —Å—Ç–æ—ó—à –Ω–∞ —Ä–æ–∑–¥–æ—Ä—ñ–∂–∂—ñ –≤ –¢–µ–º–Ω–æ–º—É –ª—ñ—Å—ñ...");
      setChoices(["–ô—Ç–∏ –Ω–∞ –ø—ñ–≤–Ω—ñ—á", "–ô—Ç–∏ –Ω–∞ —Å—Ö—ñ–¥", "–û–≥–ª—è–Ω—É—Ç–∏—Å—å –Ω–∞–≤–∫–æ–ª–æ"]);
    }
  }, [playerData, chatHistory.length]);

  const processOutcome = useCallback(async (outcomeToProcess: Outcome | Outcome[]) => {
    if (!outcomeToProcess || !userId) return;
    const outcomes = Array.isArray(outcomeToProcess) ? outcomeToProcess : [outcomeToProcess];

    for (const singleOutcome of outcomes) {
        if (!singleOutcome) continue;

        switch (singleOutcome.type) {
            case 'BATTLE':
                toast(`–ù–∞ –≤–∞—Å –Ω–∞–ø–∞–≤ ${singleOutcome.enemy.name}!`, { icon: '‚öîÔ∏è' });
                setEnemy({ ...singleOutcome.enemy, maxHealth: singleOutcome.enemy.health });
                setIsInCombat(true);
                setChoices(combatChoices);
                break;

            case 'COMBAT_TURN':
                // –û–Ω–æ–≤–ª—é—î–º–æ –∑–¥–æ—Ä–æ–≤'—è –≥—Ä–∞–≤—Ü—è
                setPlayerData(prevData => {
                    if (!prevData) return null;
                    const newPlayerHP = Math.max(0, prevData.currentHP + (singleOutcome.player_hp_change ?? 0));
                    
                    if (newPlayerHP <= 0 && isInCombat) { // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≥—Ä–∞–≤–µ—Ü—å —â–µ –≤ –±–æ—é
                        toast.error("–í–∞—Å –ø–µ—Ä–µ–º–æ–≥–ª–∏...");
                        setIsGameOver(true); // –ó–∞–≤–µ—Ä—à—É—î–º–æ –≥—Ä—É
                    }
                    return { ...prevData, currentHP: newPlayerHP };
                });

                // –û–Ω–æ–≤–ª—é—î–º–æ –∑–¥–æ—Ä–æ–≤'—è –≤–æ—Ä–æ–≥–∞ —ñ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –ø–µ—Ä–µ–º–æ–≥—É
                setEnemy(prevEnemy => {
                    if (!prevEnemy) return null; // –Ø–∫—â–æ –≤–æ—Ä–æ–≥–∞ –≤–∂–µ –Ω–µ–º–∞—î, –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ

                    const newEnemyHP = Math.max(0, prevEnemy.health + (singleOutcome.enemy_hp_change ?? 0));

                    // –Ø–∫—â–æ –≤–æ—Ä–æ–≥–∞ –ø–µ—Ä–µ–º–æ–∂–µ–Ω–æ, –∑–∞–≤–µ—Ä—à—É—î–º–æ –±—ñ–π —ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ null
                    if (newEnemyHP <= 0) {
                        toast.success(`–í–∏ –ø–µ—Ä–µ–º–æ–≥–ª–∏ ${prevEnemy.name}!`);
                        setIsInCombat(false); // <--- –ó–∞–≤–µ—Ä—à—É—î–º–æ –±—ñ–π
                        return null; // <--- –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –≤–æ—Ä–æ–≥–∞ (—ñ –π–æ–≥–æ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä)
                    }

                    // –Ü–Ω–∞–∫—à–µ –ø—Ä–æ—Å—Ç–æ –æ–Ω–æ–≤–ª—é—î–º–æ –∑–¥–æ—Ä–æ–≤'—è –≤–æ—Ä–æ–≥–∞
                    return { ...prevEnemy, health: newEnemyHP };
                });
                break;

            case 'REWARD':
            case 'XP':
                const statName = singleOutcome.type === 'XP' ? 'experience' : singleOutcome.item;
                const { error } = await supabase.rpc('increment_user_stat', { 
                    p_user_id: String(userId), p_stat_name: statName, p_increment_value: singleOutcome.amount 
                });
                if (!error) {
                    let icon = 'üéÅ';
                    if (singleOutcome.type === 'REWARD') {
                        if(singleOutcome.item === 'points') icon = 'ü™®'; 
                        else if(singleOutcome.item === 'atl_balance') icon = 'ü™ô'; 
                        else if(singleOutcome.item === 'ton_balance') icon = 'üíé';
                    } else if (singleOutcome.type === 'XP') icon = 'üî∑';
                    const message = `+${singleOutcome.amount} ${icon}`;
                    addToLog(message);
                    updateSummary(icon, singleOutcome.amount);
                }
                break;

            case 'GAME_OVER':
                setStory(singleOutcome.reason);
                setChoices([]);
                setIsGameOver(true);
                setIsInCombat(false); // –ù–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ –≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –Ω–µ —á–µ—Ä–µ–∑ –±—ñ–π
                setEnemy(null);
            break;
            
            case 'ITEM':
                  
        
            if (singleOutcome.type === 'ITEM') {
              // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –≤—ñ–¥ AI
              const { item_key, item_name, item_type, sub_type, rarity, stats } = singleOutcome;

              // –õ–æ–≥—ñ–∫–∞ –ø–æ—à—É–∫—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
              const primaryTemplateKey = `${item_type}_${sub_type}_${rarity}`;
              const fallbackTemplateKey = `${item_type}_${sub_type}_common`;
              let imageUrl = null;
              const { data: primaryTemplate } = await supabase
                  .from('image_templates')
                  .select('image_url')
                  .eq('template_key', primaryTemplateKey)
                  .single();
              
              if (primaryTemplate) {
                  imageUrl = primaryTemplate.image_url;
              } else {
                  const { data: fallbackTemplate } = await supabase
                      .from('image_templates')
                      .select('image_url')
                      .eq('template_key', fallbackTemplateKey)
                      .single();
                  if (fallbackTemplate) {
                      imageUrl = fallbackTemplate.image_url;
                  }
              }
              
              // –í–∏–∫–ª–∏–∫–∞—î–º–æ RPC, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ ID —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç—É
              const { data: newItemId, error: createItemError } = await supabase.rpc('get_or_create_item', { 
                  p_item_key: item_key,
                  p_name: item_name,
                  p_item_type: item_type,
                  p_sub_type: sub_type,
                  p_rarity: rarity,
                  p_stats: stats || {},
                  p_image_url: imageUrl
              });

              if (createItemError) {
                  toast.error(`–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç–∞: ${createItemError.message}`);
                  console.error('Error creating item definition:', createItemError);
                  return; // –ó—É–ø–∏–Ω—è—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, —è–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç
              }
              if (!newItemId) {
                  toast.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –ø—Ä–µ–¥–º–µ—Ç–∞.");
                  return;
              }

              const { error: stackError } = await supabase.rpc('add_or_stack_item', {
                p_user_id: userId, // –ü–µ—Ä–µ–¥–∞—î–º–æ —è–∫ —î (—á–∏—Å–ª–æ)
                p_item_id: newItemId
              });

              if (stackError) {
                  toast.error(`–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä: ${stackError.message}`);
                  console.error('Error adding/stacking item to inventory:', stackError);
                  return; // –ó—É–ø–∏–Ω—è—î–º–æ, —è–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä
              }

              // –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è, —è–∫—â–æ –≤—Å–µ –ø—Ä–æ–π—à–ª–æ —É—Å–ø—ñ—à–Ω–æ
              const message = `–ó–Ω–∞–π–¥–µ–Ω–æ: ${item_name}`;
              addToLog(message);
              updateSummary(item_name, 1);
              toast.success(message);

              break;
        }
    }
}}, [userId, isInCombat, combatChoices]); // –°–ø—Ä–æ—â–µ–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ

  
  const handleChoice = useCallback(async (choice: string) => {
    if (!playerData || chatHistory.length === 0 || isGameOver) return;

    // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–π—Å–≤—ñ–∂—ñ—à–µ –∑–Ω–∞—á–µ–Ω–Ω—è –µ–Ω–µ—Ä–≥—ñ—ó
    const currentEnergy = energy;
    const energyCost = 1;

    // –Ø–∫—â–æ –µ–Ω–µ—Ä–≥—ñ—ó –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –≤–∏—Ö–æ–¥–∏–º–æ
    if (currentEnergy < energyCost) {
      toast.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –µ–Ω–µ—Ä–≥—ñ—ó –¥–ª—è –¥—ñ—ó!");
      return; 
    }
    
    setIsLoading(true);
    await spendEnergy(energyCost);

    // –û–±—Ä–æ–±–ª—è—î–º–æ –≤—ñ–¥–∫–ª–∞–¥–µ–Ω—ñ –Ω–∞–≥–æ—Ä–æ–¥–∏, —è–∫—â–æ –≤–æ–Ω–∏ —î
    if (pendingOutcomes && pendingOutcomes[choice]) {
        const outcomeToProcess = pendingOutcomes[choice];
        await processOutcome(outcomeToProcess);
        setPendingOutcomes(null); 
    }
   
    // –§–æ—Ä–º—É—î–º–æ –ø—Ä–æ–º–ø—Ç, –≤–∫–ª—é—á–∞—é—á–∏ –≤ –Ω—å–æ–≥–æ –∞–∫—Ç—É–∞–ª—å–Ω—É –µ–Ω–µ—Ä–≥—ñ—é –ü–Ü–°–õ–Ø —ó—ó –≤–∏—Ç—Ä–∞—Ç–∏
    const energyAfterAction = currentEnergy - energyCost;
    let promptText = `My choice is: "${choice}". My character stats: Energy: ${energyAfterAction}.`;
    
    if (isInCombat && enemy) {
        promptText = `My character stats: HP ${playerData.currentHP}/${playerData.health}, ATK ${playerData.attack}, DEF ${playerData.defense}, Energy: ${energyAfterAction}. My enemy is ${enemy.name} with ${enemy.maxHealth} max HP, ${enemy.attack} ATK, ${enemy.defense} DEF. My chosen action is: "${choice}". Calculate the result and narrate. If this attack defeats the enemy, you MUST include an XP reward: {"type": "XP", "amount": ${enemy.maxHealth}}`;
    }
    
    const newHistory = [...chatHistory, { role: "user", parts: [{ text: promptText }] }];
    const payload = { contents: newHistory };
    const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;

    if (!apiKey) {
        toast.error("API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ!"); setIsLoading(false); return;
    }
    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${apiKey}`;

    let lastRawResponse = '';
    try {
        const response = await fetch(apiUrl, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
        if (!response.ok) throw new Error(`API Error: ${response.status} ${response.statusText}`);
        
        const result = await response.json();
        if (result.error) throw new Error(`Google API Error: ${result.error.message}`);
        
        if (result.candidates && result.candidates[0]?.content?.parts[0]?.text) {
            lastRawResponse = result.candidates[0].content.parts[0].text;
            const jsonMatch = lastRawResponse.match(/\{[\s\S]*\}/);
            if (!jsonMatch) throw new Error("AI did not return a valid JSON object. Raw response: " + lastRawResponse);
            
            const cleanedJsonString = jsonMatch[0].replace(/,\s*([}\]])/g, "$1");
            const parsedResponse: AIResponse = JSON.parse(cleanedJsonString);
            
            // 1. –°–ü–û–ß–ê–¢–ö–£ –æ–±—Ä–æ–±–ª—è—î–º–æ –ª–æ–≥—ñ–∫—É –≥—Ä–∏ (–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –±–æ—é, –Ω–∞–≥–æ—Ä–æ–¥–∏)
            if (parsedResponse.outcome) {
                await processOutcome(parsedResponse.outcome);
            }
            if (parsedResponse.choiceOutcomes) {
                setPendingOutcomes(parsedResponse.choiceOutcomes);
            } else {
                setPendingOutcomes(null); // –û—á–∏—â—É—î–º–æ, —è–∫—â–æ –Ω–æ–≤–∏—Ö –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–∏—Ö –Ω–∞–≥–æ—Ä–æ–¥ –Ω–µ–º–∞—î
            }

            // 2. –ü–û–¢–Ü–ú –æ–Ω–æ–≤–ª—é—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é, —ñ—Å—Ç–æ—Ä—ñ—é —á–∞—Ç—É —Ç–∞ –≤–∏–±–æ—Ä–∏
            setChatHistory([...newHistory, { role: "model", parts: [{ text: jsonMatch[0] }] }]);
            setStory(parsedResponse.story);
            setChoices(parsedResponse.choices ?? []);
        } else { throw new Error("Invalid AI response structure. Full response: " + JSON.stringify(result)); }
        setAdventureStep(prev => prev + 1);
    } catch (error: any) {
        console.error("!!! Critical Error in handleChoice !!!");
        console.error("Error Message:", error.message);
        console.error("Last raw response from AI before error:", lastRawResponse || "Not available");
        setStory("–¢–µ–º—Ä—è–≤–∞ –∑–≥—É—â—É—î—Ç—å—Å—è... –°–ø—Ä–æ–±—É–π –∑—Ä–æ–±–∏—Ç–∏ —ñ–Ω—à–∏–π –≤–∏–±—ñ—Ä. (–°—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–∞ –ø–æ–¥—ñ—è).");
    } finally {
        setIsLoading(false);
    }
  }, [chatHistory, playerData, isInCombat, enemy, energy, spendEnergy, processOutcome, combatChoices, pendingOutcomes]);

  return (
    <div style={styles.pageContainer}>
      <Toaster position="top-center" />
      {isLoading && ( <div style={styles.loadingOverlay as React.CSSProperties}><span>–î–æ–ª—è –≤–∏—Ä—ñ—à—É—î—Ç—å—Å—è...</span></div> )}
      
      {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ª–æ–≥—É –ø–æ–¥—ñ–π */}
      <button style={styles.logButton} onClick={() => setIsLogVisible(true)}>
        üìú
      </button>

      {/* –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ (–æ–≤–µ—Ä–ª–µ–π) –¥–ª—è –ª–æ–≥—É –ø–æ–¥—ñ–π */}
      {isLogVisible && (
        <div style={styles.logContainer} onClick={() => setIsLogVisible(false)}>
          <h3 style={{color: '#fff', textAlign: 'center', marginBottom: '20px'}}>–ñ—É—Ä–Ω–∞–ª –ø–æ–¥—ñ–π</h3>
          {eventLog.length > 0 ? eventLog.map(entry => (
            <div key={entry.id} style={styles.logMessage}>{entry.message}</div>
          )) : <p style={{textAlign: 'center', color: '#a7b3d9'}}>–ñ—É—Ä–Ω–∞–ª –ø–æ—Ä–æ–∂–Ω—ñ–π.</p>}
        </div>
      )}

      <main style={styles.storyContainer}>
        
        {isInCombat && <EnemyStatusBar enemy={enemy} stage={adventureStep} />}

        <div style={styles.storyContent}>
          <ReactMarkdown>{story}</ReactMarkdown>
          
          {isGameOver && (
            <div style={{marginTop: '20px', borderTop: '1px solid #444', paddingTop: '20px'}}>
              <h3>–ü—ñ–¥—Å—É–º–æ–∫ –ø—Ä–∏–≥–æ–¥–∏:</h3>
              <ul>
                {Array.from(adventureSummary.entries()).map(([key, value]) => (
                  <li key={key}><strong>{key}:</strong> {value.toFixed(4)}</li>
                ))}
              </ul>
            </div>
          )}
        </div>
      </main>

      <PlayerStatusBar playerData={playerData} />

      <footer style={styles.actionsContainer}>
        {choices.map((choice, index) => (
          <button key={index} style={styles.actionButton} onClick={() => handleChoice(choice)} disabled={isLoading || isGameOver}>
              {choice}
          </button>
        ))}
        
        <button style={styles.backButton} onClick={() => router.push('/home')} disabled={isLoading}>
          üè∞ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ø—Ä–∏–≥–æ–¥—É
        </button>
      </footer>
        <style>{`
            @keyframes flash-red { 0% { color: #ff4747; transform: scale(1.1); } 100% { color: #fff; transform: scale(1); } }
            .damage-taken { animation: flash-red 0.5s ease-out; }
        `}</style>
    </div>
  );
}
